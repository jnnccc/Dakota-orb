<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  
  

  










<head>
  <meta name="sandia.approval_type" content="formal" />
  <meta name="sandia.approved" content="pending" />
  <meta name="sandia.create_date" content="unknown" />
  <meta name="keywords" content="DAKOTA (Public) TBD" />
  <meta name="description" content="DAKOTA (Public) Trac Pages" />
  <link rev="owns" title="Content Owner" href="mailto:briadam@sandia.gov" />
    <title>
      dakota_scilab_src.patch on Ticket #4069 – Attachment
     – DAKOTA (Public)
    </title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <link rel="search" href="/trac/dakota/search" />
        <link rel="help" href="/trac/dakota/wiki/TracGuide" />
        <link rel="alternate" href="/trac/dakota/raw-attachment/ticket/4069/dakota_scilab_src.patch" type="text/x-diff; charset=iso-8859-15" title="Original Format" />
        <link rel="up" href="/trac/dakota/ticket/4069" title="Ticket #4069" />
        <link rel="start" href="/trac/dakota/wiki" />
        <link rel="stylesheet" href="/trac/dakota/chrome/common/css/trac.css" type="text/css" /><link rel="stylesheet" href="/trac/dakota/chrome/common/css/diff.css" type="text/css" /><link rel="stylesheet" href="/trac/dakota/chrome/common/css/code.css" type="text/css" />
        <link rel="shortcut icon" href="/trac/dakota/chrome/shared/sandia_icon.ico" type="image/x-icon" />
        <link rel="icon" href="/trac/dakota/chrome/shared/sandia_icon.ico" type="image/x-icon" />
      <link type="application/opensearchdescription+xml" rel="search" href="/trac/dakota/search/opensearch" title="Search DAKOTA (Public)" />
    <script type="text/javascript" src="/trac/dakota/chrome/common/js/jquery.js"></script><script type="text/javascript" src="/trac/dakota/chrome/common/js/babel.js"></script><script type="text/javascript" src="/trac/dakota/chrome/common/js/trac.js"></script><script type="text/javascript" src="/trac/dakota/chrome/common/js/search.js"></script><script type="text/javascript" src="/trac/dakota/chrome/common/js/diff.js"></script>
    <!--[if lt IE 7]>
    <script type="text/javascript" src="/trac/dakota/chrome/common/js/ie_pre7_hacks.js"></script>
    <![endif]-->
      <script type="text/javascript" src="/trac/dakota/chrome/common/js/folding.js"></script>
      <script type="text/javascript">
        jQuery(document).ready(function($) {
          $('#preview table.code').enableCollapsibleColumns($('#preview table.code thead th.content'));
        });
      </script>
  <link rel="stylesheet" href="/trac/dakota/chrome/shared/snl.css" type="text/css" />
  <style>
    #header { margin-bottom: -73px; }
    #sitenav {
       clear: both;
       color: #aaa;
       font-size: 12px;
       text-align: right;
       margin-right: 10px;
       margin-bottom: 14px;
    }
    #sitenav, #sitenav :link, #sitenav :visited {
      color: #fff;
    }
    #sitenav :link:hover, #sitenav :visited:hover {
      color: #333;
      background-color: #08b; /* pulled from the background of the SNL logo */
    }
  </style>
</head>
<body>
    <div style="background-image: url(/trac/dakota/chrome/shared/snl-banner-back.jpg);" id="banner">
    <a id="snlbanner_link" href="http://www.sandia.gov"><img src="/trac/dakota/chrome/shared/snl-banner.gif" alt="Sandia National Laboratories" /></a>
    <div id="header">
    <table height="100%"><td valign="center">
      <h1><a href="https://software.sandia.gov/trac/dakota">DAKOTA (Public)</a></h1>
        <h2>Design and Analysis Kit for Terascale Applications<br /> </h2>
    </td></table>
      </div>
    <div id="sitenav" class="nav">
      <ul><li class="last"></li></ul>
    </div>
    <form name="search" id="search" action="/trac/dakota/search" method="get">
        <div>
          <label for="proj-search">Search:</label>
          <input type="text" id="proj-search" name="q" size="18" value="Search DAKOTA (Public)" onblur="if(value==''){value='Search DAKOTA (Public)'}" onfocus="if(value=='Search DAKOTA (Public)'){value=''}" />
          <input onclick="if (document.search.q.value == 'Search DAKOTA (Public)') document.search.q.value = ''" type="submit" value="Search" />
        </div>
    </form>
      <div id="metanav" class="nav">
    <ul>
      <li class="first"><a href="/trac/dakota/login">Login</a></li><li><a href="/trac/dakota/prefs">Preferences</a></li><li><a href="/trac/dakota/wiki/TracGuide">Help/Guide</a></li><li class="last"><a href="/trac/dakota/about">About Trac</a></li>
    </ul>
  </div>
  </div>
    <div id="mainnav" class="nav">
    <ul>
      <li class="first"><a href="/trac/dakota/wiki">Wiki</a></li><li><a href="/trac/dakota/timeline">Timeline</a></li><li><a href="/trac/dakota/roadmap">Roadmap</a></li><li><a href="/trac/dakota/browser">Source</a></li><li><a href="/trac/dakota/query">Tickets</a></li><li class="last"><a href="/trac/dakota/search">Search</a></li>
    </ul>
  </div>
    <div id="main">
      <div id="ctxtnav" class="nav">
        <h2>Context Navigation</h2>
          <ul>
              <li class="last first"><a href="/trac/dakota/ticket/4069">Back to Ticket #4069</a></li>
          </ul>
        <hr />
      </div>
      <div id="notice" class="system-message">
          <div id="moderation_required">Attachments you submit will be routed for moderation.  If you have an account, please <a href="/trac/dakota/login">log in</a> first.</div>
      </div>
    <div id="content" class="attachment">
        <h1><a href="/trac/dakota/ticket/4069">Ticket #4069</a>: dakota_scilab_src.patch</h1>
        <table id="info" summary="Description">
          <tbody>
            <tr>
              <th scope="col">File dakota_scilab_src.patch,
                <span title="25965 bytes">25.4 KB</span>
                (added by anonymous, <a class="timeline" href="/trac/dakota/timeline?from=2011-08-30T09%3A09%3A51-06%3A00&amp;precision=second" title="2011-08-30T09:09:51-06:00 in Timeline">6 years</a> ago)</th>
            </tr>
            <tr>
              <td class="message searchable">
                
              </td>
            </tr>
          </tbody>
        </table>
        <div id="preview" class="searchable">
          
  <div class="diff">
  <ul class="entries">
      <li class="entry">
        <h2>
          <a>DirectApplicInterface.C</a>
        </h2>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="File DirectApplicInterface.C (rÃ©vision 598)">
                  </th>
                  <th title="File DirectApplicInterface.C (copie de travail)">
                  </th>
                  <td><em></em> </td>
                </tr>
              </thead>
            <tbody class="unmod">
                  <tr>
                          <th>58</th><th>58</th><td class="l"><span>const int NUMBER_OF_FIELDS = 25;</span> </td>
                  </tr><tr>
                          <th>59</th><th>59</th><td class="l"><span>#endif</span> </td>
                  </tr><tr>
                          <th>60</th><th>60</th><td class="l"><span></span> </td>
                  </tr>
            </tbody><tbody class="add">
                  <tr class="first">
                          <th> </th><th>61</th><td class="r"><ins>#ifdef DAKOTA_SCILAB</ins> </td>
                  </tr><tr>
                          <th> </th><th>62</th><td class="r"><ins>&nbsp; /** fields to pass to Scilab in Dakota structure */</ins> </td>
                  </tr><tr>
                          <th> </th><th>63</th><td class="r"><ins>&nbsp; const char *SCI_FIELD_NAMES[] = { "dakota_type","numFns", "numVars", "numACV", "numADIV",&nbsp; // 0</ins> </td>
                  </tr><tr>
                          <th> </th><th>64</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "numADRV", "numDerivVars", "xC", "xDI",&nbsp; &nbsp; // 5</ins> </td>
                  </tr><tr>
                          <th> </th><th>65</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "xDR", "xCLabels", "xDILabels",&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // 9</ins> </td>
                  </tr><tr>
                          <th> </th><th>66</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "xDRLabels", "directFnASV", "directFnASM", // 12</ins> </td>
                  </tr><tr>
                          <th> </th><th>67</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "directFnDVV", "directFnDVV_bool",&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// 15</ins> </td>
                  </tr><tr>
                          <th> </th><th>68</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "fnFlag", "gradFlag", "hessFlag",&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // 17</ins> </td>
                  </tr><tr>
                          <th> </th><th>69</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "fnVals",&nbsp; "fnGrads",&nbsp; "fnHessians",&nbsp; &nbsp; &nbsp; &nbsp;// 20</ins> </td>
                  </tr><tr>
                          <th> </th><th>70</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "fnLabels", "failure", "fnEvalId" };&nbsp; &nbsp; &nbsp; &nbsp;// 23</ins> </td>
                  </tr><tr>
                          <th> </th><th>71</th><td class="r"><ins>&nbsp; /** number of fields in above structure */</ins> </td>
                  </tr><tr>
                          <th> </th><th>72</th><td class="r"><ins>&nbsp; const int SCI_NUMBER_OF_FIELDS = 26;</ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>73</th><td class="r"><ins>#endif</ins> </td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>61</th><th>74</th><td class="l"><span></span> </td>
                  </tr><tr>
                          <th>62</th><th>75</th><td class="l"><span>DirectApplicInterface::</span> </td>
                  </tr><tr>
                          <th>63</th><th>76</th><td class="l"><span>DirectApplicInterface(const ProblemDescDB&amp; problem_db):</span> </td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="#L99">…</a></th>
                  <th><a href="#L112">…</a></th>
                  <td><em></em> </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>99</th><th>112</th><td class="l"><span>&nbsp; driverTypeMap["mc_api_run"]&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= MODELCENTER;</span> </td>
                  </tr><tr>
                          <th>100</th><th>113</th><td class="l"><span>&nbsp; driverTypeMap["modelcenter"]&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = MODELCENTER;</span> </td>
                  </tr><tr>
                          <th>101</th><th>114</th><td class="l"><span>&nbsp; driverTypeMap["matlab"]&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= MATLAB;</span> </td>
                  </tr>
            </tbody><tbody class="add">
                  <tr class="last first">
                          <th> </th><th>115</th><td class="r"><ins>&nbsp; driverTypeMap["scilab"]&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= SCILAB;</ins> </td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>102</th><th>116</th><td class="l"><span>&nbsp; driverTypeMap["python"]&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= PYTHON;</span> </td>
                  </tr><tr>
                          <th>103</th><th>117</th><td class="l"><span></span> </td>
                  </tr><tr>
                          <th>104</th><th>118</th><td class="l"><span>&nbsp; // convert strings to enums for analysisDriverTypes, iFilterType, oFilterType</span> </td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="#L171">…</a></th>
                  <th><a href="#L185">…</a></th>
                  <td><em></em> </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>171</th><th>185</th><td class="l"><span>&nbsp; &nbsp; case TEXT_BOOK:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;case TEXT_BOOK_OUU:</span> </td>
                  </tr><tr>
                          <th>172</th><th>186</th><td class="l"><span>&nbsp; &nbsp; case TEXT_BOOK1: case TEXT_BOOK2:&nbsp; case TEXT_BOOK3:</span> </td>
                  </tr><tr>
                          <th>173</th><th>187</th><td class="l"><span>&nbsp; &nbsp; case SALINAS:&nbsp; &nbsp; case MODELCENTER: case MATLAB: case PYTHON:</span> </td>
                  </tr>
            </tbody><tbody class="add">
                  <tr class="last first">
                          <th> </th><th>188</th><td class="r"><ins>&nbsp; &nbsp; case SCILAB:</ins> </td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>174</th><th>189</th><td class="l"><span>&nbsp; &nbsp; &nbsp; localDataView |= VARIABLES_VECTOR; break;</span> </td>
                  </tr><tr>
                          <th>175</th><th>190</th><td class="l"><span>&nbsp; &nbsp; }</span> </td>
                  </tr><tr>
                          <th>176</th><th>191</th><td class="l"><span></span> </td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="#L240">…</a></th>
                  <th><a href="#L255">…</a></th>
                  <td><em></em> </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>240</th><th>255</th><td class="l"><span>&nbsp; }</span> </td>
                  </tr><tr>
                          <th>241</th><th>256</th><td class="l"><span>#endif</span> </td>
                  </tr><tr>
                          <th>242</th><th>257</th><td class="l"><span></span> </td>
                  </tr>
            </tbody><tbody class="add">
                  <tr class="first">
                          <th> </th><th>258</th><td class="r"><ins>#ifdef DAKOTA_SCILAB</ins> </td>
                  </tr><tr>
                          <th> </th><th>259</th><td class="r"><ins>&nbsp; &nbsp; if (contains(analysisDriverTypes, SCILAB)) {</ins> </td>
                  </tr><tr>
                          <th> </th><th>260</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; // Scilab Initialisation</ins> </td>
                  </tr><tr>
                          <th> </th><th>261</th><td class="r"><ins>#ifdef _MSC_VER</ins> </td>
                  </tr><tr>
                          <th> </th><th>262</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; scilabEngine = Call_ScilabOpen(NULL,TRUE,NULL,NULL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>263</th><td class="r"><ins>#else</ins> </td>
                  </tr><tr>
                          <th> </th><th>264</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; scilabEngine = Call_ScilabOpen(getenv("SCI"),TRUE,NULL,NULL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>265</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr>
                          <th> </th><th>266</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; if ( scilabEngine !=0 )</ins> </td>
                  </tr><tr>
                          <th> </th><th>267</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>268</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Cerr &lt;&lt; "Error (Direct:Scilab): Could not initialize Scilab engine "</ins> </td>
                  </tr><tr>
                          <th> </th><th>269</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;&lt; "for direct fn. eval." &lt;&lt; std::endl;</ins> </td>
                  </tr><tr>
                          <th> </th><th>270</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; abort_handler(-1);</ins> </td>
                  </tr><tr>
                          <th> </th><th>271</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>272</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; else</ins> </td>
                  </tr><tr>
                          <th> </th><th>273</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>274</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (outputLevel &gt;= NORMAL_OUTPUT)</ins> </td>
                  </tr><tr>
                          <th> </th><th>275</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Cout &lt;&lt; "Scilab engine initialized for direct function evaluation."</ins> </td>
                  </tr><tr>
                          <th> </th><th>276</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;&lt; std::endl;</ins> </td>
                  </tr><tr>
                          <th> </th><th>277</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; char * env_scilab_startup = getenv("DAKOTA_SCILAB_STARTUP");</ins> </td>
                  </tr><tr>
                          <th> </th><th>278</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (env_scilab_startup) SendScilabJob(env_scilab_startup);&nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>279</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>280</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>281</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>282</th><td class="r"><ins></ins> </td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>243</th><th>283</th><td class="l"><span>#ifdef DAKOTA_PYTHON</span> </td>
                  </tr><tr>
                          <th>244</th><th>284</th><td class="l"><span>&nbsp; if (contains(analysisDriverTypes, PYTHON)) {</span> </td>
                  </tr><tr>
                          <th>245</th><th>285</th><td class="l"><span>&nbsp; &nbsp; Py_Initialize();</span> </td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="#L281">…</a></th>
                  <th><a href="#L321">…</a></th>
                  <td><em></em> </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>281</th><th>321</th><td class="l"><span>&nbsp; &nbsp; else if (outputLevel &gt;= NORMAL_OUTPUT)</span> </td>
                  </tr><tr>
                          <th>282</th><th>322</th><td class="l"><span>&nbsp; &nbsp; &nbsp; Cout &lt;&lt; "Matlab engine terminated." &lt;&lt; std::endl;</span> </td>
                  </tr><tr>
                          <th>283</th><th>323</th><td class="l"><span>#endif</span> </td>
                  </tr>
            </tbody><tbody class="add">
                  <tr class="first">
                          <th> </th><th>324</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>325</th><td class="r"><ins>#ifdef DAKOTA_SCILAB</ins> </td>
                  </tr><tr>
                          <th> </th><th>326</th><td class="r"><ins>&nbsp; &nbsp; if (contains(analysisDriverTypes, SCILAB) &amp;&amp; (scilabEngine==0))</ins> </td>
                  </tr><tr>
                          <th> </th><th>327</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>328</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; if (TerminateScilab(NULL) == FALSE) {</ins> </td>
                  </tr><tr>
                          <th> </th><th>329</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; Cerr &lt;&lt; "Error (Direct:Scilab): Couldn't terminate Scilab engine post "</ins> </td>
                  </tr><tr>
                          <th> </th><th>330</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;&lt; "direct fn. eval." &lt;&lt; std::endl;</ins> </td>
                  </tr><tr>
                          <th> </th><th>331</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; abort_handler(-1);</ins> </td>
                  </tr><tr>
                          <th> </th><th>332</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; } </ins> </td>
                  </tr><tr>
                          <th> </th><th>333</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; else</ins> </td>
                  </tr><tr>
                          <th> </th><th>334</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>335</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; Cout &lt;&lt; "Scilab engine terminated." &lt;&lt; std::endl;</ins> </td>
                  </tr><tr>
                          <th> </th><th>336</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>337</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>338</th><td class="r"><ins></ins> </td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>284</th><th>339</th><td class="l"><span>#ifdef DAKOTA_PYTHON</span> </td>
                  </tr><tr>
                          <th>285</th><th>340</th><td class="l"><span>&nbsp; if (Py_IsInitialized()) {</span> </td>
                  </tr><tr>
                          <th>286</th><th>341</th><td class="l"><span>&nbsp; &nbsp; Py_Finalize();</span> </td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="#L495">…</a></th>
                  <th><a href="#L550">…</a></th>
                  <td><em></em> </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>495</th><th>550</th><td class="l"><span>&nbsp; case MATLAB:</span> </td>
                  </tr><tr>
                          <th>496</th><th>551</th><td class="l"><span>&nbsp; &nbsp; fail_code = matlab_engine_run(); break;</span> </td>
                  </tr><tr>
                          <th>497</th><th>552</th><td class="l"><span>#endif // DAKOTA_MATLAB</span> </td>
                  </tr>
            </tbody><tbody class="add">
                  <tr class="first">
                          <th> </th><th>553</th><td class="r"><ins>#ifdef DAKOTA_SCILAB</ins> </td>
                  </tr><tr>
                          <th> </th><th>554</th><td class="r"><ins>&nbsp; case SCILAB:</ins> </td>
                  </tr><tr>
                          <th> </th><th>555</th><td class="r"><ins>&nbsp; &nbsp; fail_code = scilab_engine_run(); break;</ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>556</th><td class="r"><ins>#endif //DAKOTA_SCILAB</ins> </td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>498</th><th>557</th><td class="l"><span>#ifdef DAKOTA_PYTHON</span> </td>
                  </tr><tr>
                          <th>499</th><th>558</th><td class="l"><span>&nbsp; case PYTHON:</span> </td>
                  </tr><tr>
                          <th>500</th><th>559</th><td class="l"><span>&nbsp; &nbsp; fail_code = python_run(); break;</span> </td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="#L3406">…</a></th>
                  <th><a href="#L3465">…</a></th>
                  <td><em></em> </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>3406</th><th>3465</th><td class="l"><span>}</span> </td>
                  </tr><tr>
                          <th>3407</th><th>3466</th><td class="l"><span>#endif // DAKOTA_MATLAB</span> </td>
                  </tr><tr>
                          <th>3408</th><th>3467</th><td class="l"><span></span> </td>
                  </tr>
            </tbody><tbody class="add">
                  <tr class="first">
                          <th> </th><th>3468</th><td class="r"><ins>#ifdef DAKOTA_SCILAB</ins> </td>
                  </tr><tr>
                          <th> </th><th>3469</th><td class="r"><ins>int DirectApplicInterface::scilab_engine_run()</ins> </td>
                  </tr><tr>
                          <th> </th><th>3470</th><td class="r"><ins>{</ins> </td>
                  </tr><tr>
                          <th> </th><th>3471</th><td class="r"><ins>&nbsp; // direct interface to Scilab through Mathworks external API, BMA 11/28/2005</ins> </td>
                  </tr><tr>
                          <th> </th><th>3472</th><td class="r"><ins>&nbsp; // mfile executed is specified through analysisComponents</ins> </td>
                  </tr><tr>
                          <th> </th><th>3473</th><td class="r"><ins>&nbsp; // Special thanks to Lee Peterson for substantial enhancements 12/15/2007:</ins> </td>
                  </tr><tr>
                          <th> </th><th>3474</th><td class="r"><ins>&nbsp; // - Added output buffer for the SCILAB command response and error messages</ins> </td>
                  </tr><tr>
                          <th> </th><th>3475</th><td class="r"><ins>&nbsp; // - Made the Dakota variable persistent in the SCILAB engine workspace</ins> </td>
                  </tr><tr>
                          <th> </th><th>3476</th><td class="r"><ins>&nbsp; // - Added robustness to the user deleting required Dakota fields</ins> </td>
                  </tr><tr>
                          <th> </th><th>3477</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3478</th><td class="r"><ins>&nbsp; const int SCILAB_FAIL = 1;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3479</th><td class="r"><ins>&nbsp; const int RESPONSE_TYPES[] = {1, 2, 4};</ins> </td>
                  </tr><tr>
                          <th> </th><th>3480</th><td class="r"><ins>&nbsp; int i, j, k, iF;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3481</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3482</th><td class="r"><ins>&nbsp; /* temporary variables */</ins> </td>
                  </tr><tr>
                          <th> </th><th>3483</th><td class="r"><ins>&nbsp; int nbrow,nbrol;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3484</th><td class="r"><ins>&nbsp; double *ptr, * x_tmp = NULL, dbl_tmp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3485</th><td class="r"><ins>&nbsp; std::string analysis_command;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3486</th><td class="r"><ins>&nbsp; const int BUFSIZE = 32768;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3487</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>3488</th><td class="r"><ins>&nbsp; int fail_code;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3489</th><td class="r"><ins>&nbsp; bool fn_flag;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3490</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>3491</th><td class="r"><ins>&nbsp; SciErr _SciErr;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3492</th><td class="r"><ins>&nbsp; int * piMListAddr = NULL, * piMListAddrHess, * piLength = NULL;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3493</th><td class="r"><ins>&nbsp; int piRows,piCols,piNbItem,iRet;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3494</th><td class="r"><ins>&nbsp; double * pdblReal = NULL;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3495</th><td class="r"><ins>&nbsp; char ** pstStrings = NULL;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3496</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3497</th><td class="r"><ins>&nbsp; iRet = 0;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3498</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>3499</th><td class="r"><ins>&nbsp; _SciErr = createNamedMList(pvApiCtx, "Dakota", SCI_NUMBER_OF_FIELDS, &amp;piMListAddr);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3500</th><td class="r"><ins>&nbsp; if (_SciErr.iErr)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3501</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3502</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; Cerr &lt;&lt; "Error (Direct:Scilab): 1 "&lt;&lt; std::endl;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3503</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; printError(&amp;_SciErr,0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3504</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3505</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3506</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3507</th><td class="r"><ins>&nbsp; _SciErr = createMatrixOfStringInNamedList(pvApiCtx, "Dakota", piMListAddr, 1, 1, SCI_NUMBER_OF_FIELDS, SCI_FIELD_NAMES);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3508</th><td class="r"><ins>&nbsp; if (_SciErr.iErr)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3509</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3510</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; Cerr &lt;&lt; "Error (Direct:Scilab): 2 "&lt;&lt; std::endl;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3511</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; printError(&amp;_SciErr,0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3512</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3513</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3514</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3515</th><td class="r"><ins>&nbsp; // numFns</ins> </td>
                  </tr><tr>
                          <th> </th><th>3516</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3517</th><td class="r"><ins>#ifdef SCILAB_DEBUG</ins> </td>
                  </tr><tr>
                          <th> </th><th>3518</th><td class="r"><ins>&nbsp; printf("Ã©criture paramÃštre 1\n");</ins> </td>
                  </tr><tr>
                          <th> </th><th>3519</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr>
                          <th> </th><th>3520</th><td class="r"><ins>&nbsp; dbl_tmp = numFns;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3521</th><td class="r"><ins>&nbsp; _SciErr = createMatrixOfDoubleInNamedList(pvApiCtx,"Dakota",piMListAddr,2,1,1,&amp;dbl_tmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3522</th><td class="r"><ins>&nbsp; if (_SciErr.iErr)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3523</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3524</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; printError(&amp;_SciErr,0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3525</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3526</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3527</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>3528</th><td class="r"><ins>&nbsp; // numVars</ins> </td>
                  </tr><tr>
                          <th> </th><th>3529</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3530</th><td class="r"><ins>#ifdef SCILAB_DEBUG</ins> </td>
                  </tr><tr>
                          <th> </th><th>3531</th><td class="r"><ins>&nbsp; printf("Ã©criture paramÃštre 2\n");</ins> </td>
                  </tr><tr>
                          <th> </th><th>3532</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr>
                          <th> </th><th>3533</th><td class="r"><ins>&nbsp; dbl_tmp = numVars;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3534</th><td class="r"><ins>&nbsp; _SciErr = createMatrixOfDoubleInNamedList(pvApiCtx,"Dakota",piMListAddr,3,1,1,&amp;dbl_tmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3535</th><td class="r"><ins>&nbsp; if (_SciErr.iErr)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3536</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3537</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; printError(&amp;_SciErr,0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3538</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3539</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3540</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>3541</th><td class="r"><ins>&nbsp; // numACV</ins> </td>
                  </tr><tr>
                          <th> </th><th>3542</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3543</th><td class="r"><ins>#ifdef SCILAB_DEBUG</ins> </td>
                  </tr><tr>
                          <th> </th><th>3544</th><td class="r"><ins>&nbsp; printf("Ã©criture paramÃštre 3\n");</ins> </td>
                  </tr><tr>
                          <th> </th><th>3545</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr>
                          <th> </th><th>3546</th><td class="r"><ins>&nbsp; dbl_tmp = numACV;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3547</th><td class="r"><ins>&nbsp; _SciErr = createMatrixOfDoubleInNamedList(pvApiCtx,"Dakota",piMListAddr,4,1,1,&amp;dbl_tmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3548</th><td class="r"><ins>&nbsp; if (_SciErr.iErr)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3549</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3550</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; printError(&amp;_SciErr,0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3551</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3552</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3553</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>3554</th><td class="r"><ins>&nbsp; // numADIV</ins> </td>
                  </tr><tr>
                          <th> </th><th>3555</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3556</th><td class="r"><ins>#ifdef SCILAB_DEBUG</ins> </td>
                  </tr><tr>
                          <th> </th><th>3557</th><td class="r"><ins>&nbsp; printf("Ã©criture paramÃštre 4\n");</ins> </td>
                  </tr><tr>
                          <th> </th><th>3558</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr>
                          <th> </th><th>3559</th><td class="r"><ins>&nbsp; dbl_tmp = numADIV;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3560</th><td class="r"><ins>&nbsp; _SciErr = createMatrixOfDoubleInNamedList(pvApiCtx,"Dakota",piMListAddr,5,1,1,&amp;dbl_tmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3561</th><td class="r"><ins>&nbsp; if (_SciErr.iErr)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3562</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3563</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; printError(&amp;_SciErr,0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3564</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3565</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3566</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3567</th><td class="r"><ins>&nbsp; // numADRV</ins> </td>
                  </tr><tr>
                          <th> </th><th>3568</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3569</th><td class="r"><ins>#ifdef SCILAB_DEBUG</ins> </td>
                  </tr><tr>
                          <th> </th><th>3570</th><td class="r"><ins>&nbsp; printf("Ã©criture paramÃštre 5\n");</ins> </td>
                  </tr><tr>
                          <th> </th><th>3571</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr>
                          <th> </th><th>3572</th><td class="r"><ins>&nbsp; dbl_tmp = numADRV;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3573</th><td class="r"><ins>&nbsp; _SciErr = createMatrixOfDoubleInNamedList(pvApiCtx,"Dakota",piMListAddr,6,1,1,&amp;dbl_tmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3574</th><td class="r"><ins>&nbsp; if (_SciErr.iErr)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3575</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3576</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; printError(&amp;_SciErr,0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3577</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3578</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3579</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>3580</th><td class="r"><ins>&nbsp; // numDerivVars</ins> </td>
                  </tr><tr>
                          <th> </th><th>3581</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3582</th><td class="r"><ins>#ifdef SCILAB_DEBUG</ins> </td>
                  </tr><tr>
                          <th> </th><th>3583</th><td class="r"><ins>&nbsp; printf("Ã©criture paramÃštre 6\n");</ins> </td>
                  </tr><tr>
                          <th> </th><th>3584</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr>
                          <th> </th><th>3585</th><td class="r"><ins>&nbsp; dbl_tmp = numDerivVars;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3586</th><td class="r"><ins>&nbsp; _SciErr = createMatrixOfDoubleInNamedList(pvApiCtx,"Dakota",piMListAddr,7,1,1,&amp;dbl_tmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3587</th><td class="r"><ins>&nbsp; if (_SciErr.iErr)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3588</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3589</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; printError(&amp;_SciErr,0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3590</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3591</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3592</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>3593</th><td class="r"><ins>&nbsp; /* continuous variables */</ins> </td>
                  </tr><tr>
                          <th> </th><th>3594</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3595</th><td class="r"><ins>&nbsp; // xC</ins> </td>
                  </tr><tr>
                          <th> </th><th>3596</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3597</th><td class="r"><ins>#ifdef SCILAB_DEBUG</ins> </td>
                  </tr><tr>
                          <th> </th><th>3598</th><td class="r"><ins>&nbsp; printf("Ã©criture paramÃštre 7\n");</ins> </td>
                  </tr><tr>
                          <th> </th><th>3599</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr>
                          <th> </th><th>3600</th><td class="r"><ins>&nbsp; x_tmp =&nbsp; (double *) malloc (sizeof(double) * numACV); // YC</ins> </td>
                  </tr><tr>
                          <th> </th><th>3601</th><td class="r"><ins>&nbsp; //x_tmp = new double[numACV];</ins> </td>
                  </tr><tr>
                          <th> </th><th>3602</th><td class="r"><ins>&nbsp; for(i=0;i&lt;numACV;i++)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3603</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3604</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; x_tmp[i] = xC[i];</ins> </td>
                  </tr><tr>
                          <th> </th><th>3605</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3606</th><td class="r"><ins>&nbsp; _SciErr = createMatrixOfDoubleInNamedList(pvApiCtx,"Dakota",piMListAddr,8,1,numACV,x_tmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3607</th><td class="r"><ins>&nbsp; free(x_tmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3608</th><td class="r"><ins>&nbsp; //delete [] x_tmp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3609</th><td class="r"><ins>&nbsp; if (_SciErr.iErr)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3610</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3611</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; printError(&amp;_SciErr,0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3612</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3613</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3614</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3615</th><td class="r"><ins>&nbsp; /* discrete integer variables */</ins> </td>
                  </tr><tr>
                          <th> </th><th>3616</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3617</th><td class="r"><ins>&nbsp; // xDI</ins> </td>
                  </tr><tr>
                          <th> </th><th>3618</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3619</th><td class="r"><ins>#ifdef SCILAB_DEBUG</ins> </td>
                  </tr><tr>
                          <th> </th><th>3620</th><td class="r"><ins>&nbsp; printf("Ã©criture paramÃštre 8\n");</ins> </td>
                  </tr><tr>
                          <th> </th><th>3621</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr>
                          <th> </th><th>3622</th><td class="r"><ins>&nbsp; x_tmp = (double *)malloc(sizeof(double)*numADIV); // YC</ins> </td>
                  </tr><tr>
                          <th> </th><th>3623</th><td class="r"><ins>&nbsp; // x_tmp = new double[numADIV]; </ins> </td>
                  </tr><tr>
                          <th> </th><th>3624</th><td class="r"><ins>&nbsp; for(i=0;i&lt;numADIV;i++)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3625</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3626</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; x_tmp[i] = (double) xDI[i];</ins> </td>
                  </tr><tr>
                          <th> </th><th>3627</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3628</th><td class="r"><ins>&nbsp; _SciErr = createMatrixOfDoubleInNamedList(pvApiCtx,"Dakota",piMListAddr,9,1,numADIV,x_tmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3629</th><td class="r"><ins>&nbsp; free(x_tmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3630</th><td class="r"><ins>&nbsp; //delete [] x_tmp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3631</th><td class="r"><ins>&nbsp; if (_SciErr.iErr)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3632</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3633</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; printError(&amp;_SciErr,0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3634</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3635</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3636</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3637</th><td class="r"><ins>&nbsp; // xDR </ins> </td>
                  </tr><tr>
                          <th> </th><th>3638</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3639</th><td class="r"><ins>#ifdef SCILAB_DEBUG</ins> </td>
                  </tr><tr>
                          <th> </th><th>3640</th><td class="r"><ins>&nbsp; printf("Ã©criture paramÃštre 9\n");</ins> </td>
                  </tr><tr>
                          <th> </th><th>3641</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr>
                          <th> </th><th>3642</th><td class="r"><ins>&nbsp; x_tmp = (double *)malloc(sizeof(double)*numADRV); // YC</ins> </td>
                  </tr><tr>
                          <th> </th><th>3643</th><td class="r"><ins>&nbsp; // x_tmp = new double[numADRV];</ins> </td>
                  </tr><tr>
                          <th> </th><th>3644</th><td class="r"><ins>&nbsp; for(i=0;i&lt;numADRV;i++)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3645</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3646</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; x_tmp[i] = xDR[i];</ins> </td>
                  </tr><tr>
                          <th> </th><th>3647</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3648</th><td class="r"><ins>&nbsp; _SciErr = createMatrixOfDoubleInNamedList(pvApiCtx,"Dakota",piMListAddr,10,1,numADRV,x_tmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3649</th><td class="r"><ins>&nbsp; free(x_tmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3650</th><td class="r"><ins>&nbsp; //delete [] x_tmp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3651</th><td class="r"><ins>&nbsp; if (_SciErr.iErr)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3652</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3653</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; printError(&amp;_SciErr,0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3654</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3655</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3656</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3657</th><td class="r"><ins>&nbsp; /* continuous labels */</ins> </td>
                  </tr><tr>
                          <th> </th><th>3658</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3659</th><td class="r"><ins>&nbsp; // xCLabels</ins> </td>
                  </tr><tr>
                          <th> </th><th>3660</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3661</th><td class="r"><ins>#ifdef SCILAB_DEBUG</ins> </td>
                  </tr><tr>
                          <th> </th><th>3662</th><td class="r"><ins>&nbsp; printf("Ã©criture paramÃštre 10\n");</ins> </td>
                  </tr><tr>
                          <th> </th><th>3663</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr>
                          <th> </th><th>3664</th><td class="r"><ins>&nbsp; char ** pstStringsTmp = NULL;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3665</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>3666</th><td class="r"><ins>&nbsp; pstStringsTmp = (char **) malloc (sizeof(char*) * xCLabels.size());</ins> </td>
                  </tr><tr>
                          <th> </th><th>3667</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>3668</th><td class="r"><ins>&nbsp; for(i = 0; i &lt; xCLabels.size(); i++)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3669</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3670</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; pstStringsTmp[i] = (char *)xCLabels[i].c_str();</ins> </td>
                  </tr><tr>
                          <th> </th><th>3671</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3672</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>3673</th><td class="r"><ins>&nbsp; _SciErr = createMatrixOfStringInNamedList(pvApiCtx,"Dakota",piMListAddr,11,1,xCLabels.size(),pstStringsTmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3674</th><td class="r"><ins>&nbsp; if (_SciErr.iErr)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3675</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3676</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; printError(&amp;_SciErr,0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3677</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3678</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3679</th><td class="r"><ins>&nbsp; free(pstStringsTmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3680</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3681</th><td class="r"><ins>&nbsp; /* discrete integer labels */</ins> </td>
                  </tr><tr>
                          <th> </th><th>3682</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3683</th><td class="r"><ins>&nbsp; // xDILabels</ins> </td>
                  </tr><tr>
                          <th> </th><th>3684</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3685</th><td class="r"><ins>#ifdef SCILAB_DEBUG</ins> </td>
                  </tr><tr>
                          <th> </th><th>3686</th><td class="r"><ins>&nbsp; printf("Ã©criture paramÃštre 11\n");</ins> </td>
                  </tr><tr>
                          <th> </th><th>3687</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr>
                          <th> </th><th>3688</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>3689</th><td class="r"><ins>&nbsp; pstStringsTmp = (char **) malloc (sizeof(char*) * xDILabels.size());</ins> </td>
                  </tr><tr>
                          <th> </th><th>3690</th><td class="r"><ins>&nbsp; for(i = 0 ; i &lt; xDILabels.size() ; i++)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3691</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3692</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; pstStringsTmp[i] = (char *)xDILabels[i].c_str();</ins> </td>
                  </tr><tr>
                          <th> </th><th>3693</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3694</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>3695</th><td class="r"><ins>&nbsp; _SciErr = createMatrixOfStringInNamedList(pvApiCtx,"Dakota",piMListAddr,12,1,xDILabels.size(),pstStringsTmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3696</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>3697</th><td class="r"><ins>&nbsp; free(pstStringsTmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3698</th><td class="r"><ins>&nbsp; if (_SciErr.iErr)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3699</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3700</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; printError(&amp;_SciErr,0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3701</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3702</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3703</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3704</th><td class="r"><ins>&nbsp; // xDRLabels</ins> </td>
                  </tr><tr>
                          <th> </th><th>3705</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3706</th><td class="r"><ins>#ifdef SCILAB_DEBUG</ins> </td>
                  </tr><tr>
                          <th> </th><th>3707</th><td class="r"><ins>&nbsp; printf("Ã©criture paramÃštre 12\n");</ins> </td>
                  </tr><tr>
                          <th> </th><th>3708</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr>
                          <th> </th><th>3709</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>3710</th><td class="r"><ins>&nbsp; pstStringsTmp = (char **) malloc (sizeof(char) * xDRLabels.size());</ins> </td>
                  </tr><tr>
                          <th> </th><th>3711</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>3712</th><td class="r"><ins>&nbsp; for(i = 0 ; i &lt; xDRLabels.size() ; i++)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3713</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3714</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; pstStringsTmp[i] = (char *)xDRLabels[i].c_str();</ins> </td>
                  </tr><tr>
                          <th> </th><th>3715</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3716</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>3717</th><td class="r"><ins>&nbsp; _SciErr = createMatrixOfStringInNamedList(pvApiCtx,"Dakota",piMListAddr,13,1,xDRLabels.size(),pstStringsTmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3718</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>3719</th><td class="r"><ins>&nbsp; free(pstStringsTmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3720</th><td class="r"><ins>&nbsp; if (_SciErr.iErr)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3721</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3722</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; printError(&amp;_SciErr,0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3723</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3724</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3725</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3726</th><td class="r"><ins>&nbsp; /* active set vector (ASV) / matrix */</ins> </td>
                  </tr><tr>
                          <th> </th><th>3727</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3728</th><td class="r"><ins>&nbsp; // directFnASV</ins> </td>
                  </tr><tr>
                          <th> </th><th>3729</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3730</th><td class="r"><ins>#ifdef SCILAB_DEBUG</ins> </td>
                  </tr><tr>
                          <th> </th><th>3731</th><td class="r"><ins>&nbsp; printf("Ã©criture paramÃštre 13\n");</ins> </td>
                  </tr><tr>
                          <th> </th><th>3732</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr>
                          <th> </th><th>3733</th><td class="r"><ins>&nbsp; x_tmp = (double *)malloc(sizeof(double) * numFns); // YC</ins> </td>
                  </tr><tr>
                          <th> </th><th>3734</th><td class="r"><ins>&nbsp; // x_tmp = new double[numFns];</ins> </td>
                  </tr><tr>
                          <th> </th><th>3735</th><td class="r"><ins>&nbsp; for(i=0;i&lt;numFns;i++)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3736</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3737</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; x_tmp[i] = directFnASV[i];</ins> </td>
                  </tr><tr>
                          <th> </th><th>3738</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3739</th><td class="r"><ins>&nbsp; _SciErr = createMatrixOfDoubleInNamedList(pvApiCtx,"Dakota",piMListAddr,14,1,numFns,x_tmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3740</th><td class="r"><ins>&nbsp; free(x_tmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3741</th><td class="r"><ins>&nbsp; //delete [] x_tmp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3742</th><td class="r"><ins>&nbsp; if (_SciErr.iErr)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3743</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3744</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; printError(&amp;_SciErr,0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3745</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3746</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3747</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>3748</th><td class="r"><ins>&nbsp; /* Create boolean version of ASV.&nbsp; Rows are fnval, grad, hess; col per fn</ins> </td>
                  </tr><tr>
                          <th> </th><th>3749</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;CAREFUL -- Matlab stores by column */</ins> </td>
                  </tr><tr>
                          <th> </th><th>3750</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3751</th><td class="r"><ins>&nbsp; // directFnASM</ins> </td>
                  </tr><tr>
                          <th> </th><th>3752</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3753</th><td class="r"><ins>#ifdef SCILAB_DEBUG</ins> </td>
                  </tr><tr>
                          <th> </th><th>3754</th><td class="r"><ins>&nbsp; printf("Ã©criture paramÃštre 14\n");</ins> </td>
                  </tr><tr>
                          <th> </th><th>3755</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr>
                          <th> </th><th>3756</th><td class="r"><ins>&nbsp; x_tmp = (double *)malloc(sizeof(double) * 3 * numFns); // YC</ins> </td>
                  </tr><tr>
                          <th> </th><th>3757</th><td class="r"><ins>&nbsp; // x_tmp = new double[3 * numFns];</ins> </td>
                  </tr><tr>
                          <th> </th><th>3758</th><td class="r"><ins>&nbsp; for( i=0; i&lt;3; i++)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3759</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3760</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; for ( j=0; j&lt;numFns; j++)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3761</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3762</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // FIX THIS MESS!</ins> </td>
                  </tr><tr>
                          <th> </th><th>3763</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (directFnASV[j] &amp; RESPONSE_TYPES[i])</ins> </td>
                  </tr><tr>
                          <th> </th><th>3764</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ? (x_tmp[3*j+i] = 1)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3765</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; : (x_tmp[3*j+i] = 0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3766</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3767</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3768</th><td class="r"><ins>&nbsp; _SciErr = createMatrixOfDoubleInNamedList(pvApiCtx,"Dakota",piMListAddr,15,3,numFns,x_tmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3769</th><td class="r"><ins>&nbsp; free(x_tmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3770</th><td class="r"><ins>&nbsp; //delete [] x_tmp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3771</th><td class="r"><ins>&nbsp; if (_SciErr.iErr)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3772</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3773</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; printError(&amp;_SciErr,0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3774</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3775</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3776</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>3777</th><td class="r"><ins>&nbsp; /* derivative variables vector (DVV) / DVV_bool */</ins> </td>
                  </tr><tr>
                          <th> </th><th>3778</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3779</th><td class="r"><ins>&nbsp; // directFnDVV</ins> </td>
                  </tr><tr>
                          <th> </th><th>3780</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3781</th><td class="r"><ins>#ifdef SCILAB_DEBUG</ins> </td>
                  </tr><tr>
                          <th> </th><th>3782</th><td class="r"><ins>&nbsp; printf("Ã©criture paramÃštre 15\n");</ins> </td>
                  </tr><tr>
                          <th> </th><th>3783</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr>
                          <th> </th><th>3784</th><td class="r"><ins>&nbsp; x_tmp = (double *)malloc(sizeof(double) * numDerivVars); // YC</ins> </td>
                  </tr><tr>
                          <th> </th><th>3785</th><td class="r"><ins>&nbsp; // x_tmp = new double[numDerivVars];</ins> </td>
                  </tr><tr>
                          <th> </th><th>3786</th><td class="r"><ins>&nbsp; for( i=0; i&lt;numDerivVars; ++i)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3787</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3788</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; x_tmp[i] = directFnDVV[i];&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>3789</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3790</th><td class="r"><ins>&nbsp; _SciErr = createMatrixOfDoubleInNamedList(pvApiCtx,"Dakota",piMListAddr,16,1,numDerivVars,x_tmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3791</th><td class="r"><ins>&nbsp; free(x_tmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3792</th><td class="r"><ins>&nbsp; //delete [] x_tmp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3793</th><td class="r"><ins>&nbsp; if (_SciErr.iErr)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3794</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3795</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; printError(&amp;_SciErr,0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3796</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3797</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3798</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3799</th><td class="r"><ins>&nbsp; // directFnDVV_bool</ins> </td>
                  </tr><tr>
                          <th> </th><th>3800</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3801</th><td class="r"><ins>#ifdef SCILAB_DEBUG</ins> </td>
                  </tr><tr>
                          <th> </th><th>3802</th><td class="r"><ins>&nbsp; printf("Ã©criture paramÃštre 16\n");</ins> </td>
                  </tr><tr>
                          <th> </th><th>3803</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr>
                          <th> </th><th>3804</th><td class="r"><ins>&nbsp; x_tmp = (double *)malloc(sizeof(double) * numDerivVars); // YC</ins> </td>
                  </tr><tr>
                          <th> </th><th>3805</th><td class="r"><ins>&nbsp; // x_tmp = new double[numDerivVars];</ins> </td>
                  </tr><tr>
                          <th> </th><th>3806</th><td class="r"><ins>&nbsp; for ( j=0; j&lt;numDerivVars; j++)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3807</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3808</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; x_tmp[directFnDVV[j] - 1] = 1;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3809</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3810</th><td class="r"><ins>&nbsp; _SciErr = createMatrixOfDoubleInNamedList(pvApiCtx,"Dakota",piMListAddr,17,1,numDerivVars,x_tmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3811</th><td class="r"><ins>&nbsp; free(x_tmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3812</th><td class="r"><ins>&nbsp; //delete [] x_tmp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3813</th><td class="r"><ins>&nbsp; if (_SciErr.iErr)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3814</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3815</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; printError(&amp;_SciErr,0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3816</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3817</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3818</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3819</th><td class="r"><ins>&nbsp; // fnFlag</ins> </td>
                  </tr><tr>
                          <th> </th><th>3820</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3821</th><td class="r"><ins>#ifdef SCILAB_DEBUG</ins> </td>
                  </tr><tr>
                          <th> </th><th>3822</th><td class="r"><ins>&nbsp; printf("Ã©criture paramÃštre 17\n");</ins> </td>
                  </tr><tr>
                          <th> </th><th>3823</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr>
                          <th> </th><th>3824</th><td class="r"><ins>&nbsp; fn_flag = false;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3825</th><td class="r"><ins>&nbsp; for ( j=0; j&lt;numFns; ++j)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3826</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3827</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; if (directFnASV[j] &amp; 1)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3828</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3829</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fn_flag = true;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3830</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3831</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3832</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3833</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3834</th><td class="r"><ins>&nbsp; dbl_tmp = fn_flag;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3835</th><td class="r"><ins>&nbsp; _SciErr = createMatrixOfDoubleInNamedList(pvApiCtx,"Dakota",piMListAddr,18,1,1,&amp;dbl_tmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3836</th><td class="r"><ins>&nbsp; if (_SciErr.iErr)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3837</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3838</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; printError(&amp;_SciErr,0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3839</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3840</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3841</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>3842</th><td class="r"><ins>&nbsp; // gradFlag</ins> </td>
                  </tr><tr>
                          <th> </th><th>3843</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3844</th><td class="r"><ins>#ifdef SCILAB_DEBUG</ins> </td>
                  </tr><tr>
                          <th> </th><th>3845</th><td class="r"><ins>&nbsp; printf("Ã©criture paramÃštre 18\n");</ins> </td>
                  </tr><tr>
                          <th> </th><th>3846</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr>
                          <th> </th><th>3847</th><td class="r"><ins>&nbsp; dbl_tmp = gradFlag;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3848</th><td class="r"><ins>&nbsp; _SciErr = createMatrixOfDoubleInNamedList(pvApiCtx,"Dakota",piMListAddr,19,1,1,&amp;dbl_tmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3849</th><td class="r"><ins>&nbsp; if (_SciErr.iErr)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3850</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3851</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; printError(&amp;_SciErr,0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3852</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3853</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3854</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>3855</th><td class="r"><ins>&nbsp; // hessFlag</ins> </td>
                  </tr><tr>
                          <th> </th><th>3856</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3857</th><td class="r"><ins>#ifdef SCILAB_DEBUG</ins> </td>
                  </tr><tr>
                          <th> </th><th>3858</th><td class="r"><ins>&nbsp; printf("Ã©criture paramÃštre 19\n");</ins> </td>
                  </tr><tr>
                          <th> </th><th>3859</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr>
                          <th> </th><th>3860</th><td class="r"><ins>&nbsp; dbl_tmp = hessFlag;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3861</th><td class="r"><ins>&nbsp; _SciErr = createMatrixOfDoubleInNamedList(pvApiCtx,"Dakota",piMListAddr,20,1,1,&amp;dbl_tmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3862</th><td class="r"><ins>&nbsp; if (_SciErr.iErr)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3863</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3864</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; printError(&amp;_SciErr,0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3865</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3866</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3867</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3868</th><td class="r"><ins>&nbsp; /* fn, grad, hess Flags; as needed, allocate &amp; initialize matrices to zero */</ins> </td>
                  </tr><tr>
                          <th> </th><th>3869</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3870</th><td class="r"><ins>&nbsp; // fnVals</ins> </td>
                  </tr><tr>
                          <th> </th><th>3871</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3872</th><td class="r"><ins>#ifdef SCILAB_DEBUG</ins> </td>
                  </tr><tr>
                          <th> </th><th>3873</th><td class="r"><ins>&nbsp; printf("Ã©criture paramÃštre 20\n");</ins> </td>
                  </tr><tr>
                          <th> </th><th>3874</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr>
                          <th> </th><th>3875</th><td class="r"><ins>&nbsp; if (fn_flag)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3876</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3877</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; x_tmp = (double *)malloc(sizeof(double) * numFns); // YC</ins> </td>
                  </tr><tr>
                          <th> </th><th>3878</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; // x_tmp = new double[numFns];</ins> </td>
                  </tr><tr>
                          <th> </th><th>3879</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; for(i=0;i&lt;numFns;i++)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3880</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3881</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; x_tmp[i] = 0.0;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3882</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3883</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; _SciErr = createMatrixOfDoubleInNamedList(pvApiCtx,"Dakota",piMListAddr,21,1,numFns,x_tmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3884</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; free(x_tmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3885</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; //delete [] x_tmp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3886</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; if (_SciErr.iErr)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3887</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3888</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; printError(&amp;_SciErr,0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3889</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3890</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3891</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3892</th><td class="r"><ins>&nbsp; else</ins> </td>
                  </tr><tr>
                          <th> </th><th>3893</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3894</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; dbl_tmp = 0;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3895</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; _SciErr = createMatrixOfDoubleInNamedList(pvApiCtx,"Dakota",piMListAddr,21,0,0,&amp;dbl_tmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3896</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; if (_SciErr.iErr)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3897</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3898</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; printError(&amp;_SciErr,0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3899</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3900</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3901</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3902</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3903</th><td class="r"><ins>&nbsp; // fnGrads</ins> </td>
                  </tr><tr>
                          <th> </th><th>3904</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3905</th><td class="r"><ins>#ifdef SCILAB_DEBUG</ins> </td>
                  </tr><tr>
                          <th> </th><th>3906</th><td class="r"><ins>&nbsp; printf("Ã©criture paramÃštre 21\n");</ins> </td>
                  </tr><tr>
                          <th> </th><th>3907</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr>
                          <th> </th><th>3908</th><td class="r"><ins>&nbsp; if (gradFlag)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3909</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3910</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; x_tmp = (double *)malloc(sizeof(double) * numFns * numDerivVars); // YC</ins> </td>
                  </tr><tr>
                          <th> </th><th>3911</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; // x_tmp = new double[numFns * numDerivVars];</ins> </td>
                  </tr><tr>
                          <th> </th><th>3912</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; for(i=0;i&lt;numFns * numDerivVars;i++)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3913</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3914</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; x_tmp[i] = 0.0;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3915</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3916</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; _SciErr = createMatrixOfDoubleInNamedList(pvApiCtx,"Dakota",piMListAddr,22,1,numFns * numDerivVars,x_tmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3917</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; free(x_tmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3918</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; //delete [] x_tmp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3919</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; if (_SciErr.iErr)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3920</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3921</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; printError(&amp;_SciErr,0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3922</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3923</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3924</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3925</th><td class="r"><ins>&nbsp; else</ins> </td>
                  </tr><tr>
                          <th> </th><th>3926</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3927</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; dbl_tmp = 0;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3928</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; _SciErr = createMatrixOfDoubleInNamedList(pvApiCtx,"Dakota",piMListAddr,22,0,0,&amp;dbl_tmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3929</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; if (_SciErr.iErr)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3930</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3931</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; printError(&amp;_SciErr,0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3932</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3933</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3934</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3935</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3936</th><td class="r"><ins>&nbsp; // fnHessians</ins> </td>
                  </tr><tr>
                          <th> </th><th>3937</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3938</th><td class="r"><ins>#ifdef SCILAB_DEBUG</ins> </td>
                  </tr><tr>
                          <th> </th><th>3939</th><td class="r"><ins>&nbsp; printf("Ã©criture paramÃštre 22\n");</ins> </td>
                  </tr><tr>
                          <th> </th><th>3940</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr>
                          <th> </th><th>3941</th><td class="r"><ins>&nbsp; if (hessFlag)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3942</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3943</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; int * piListInMList = NULL;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3944</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3945</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; _SciErr = createListInNamedList(pvApiCtx, "Dakota", piMListAddr, 23, numFns, &amp;piListInMList);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3946</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; for(i=0;i&lt;numFns;i++)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3947</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3948</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dbl_tmp = 0;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3949</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _SciErr = createMatrixOfDoubleInNamedList(pvApiCtx,"Dakota",piListInMList,23,0,0,&amp;dbl_tmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3950</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (_SciErr.iErr)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3951</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3952</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; printError(&amp;_SciErr,0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3953</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3954</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3955</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3956</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3957</th><td class="r"><ins>&nbsp; else</ins> </td>
                  </tr><tr>
                          <th> </th><th>3958</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3959</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; dbl_tmp = 0;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3960</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; _SciErr = createMatrixOfDoubleInNamedList(pvApiCtx,"Dakota",piMListAddr,23,0,0,&amp;dbl_tmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3961</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; if (_SciErr.iErr)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3962</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3963</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; printError(&amp;_SciErr,0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3964</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3965</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3966</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3967</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>3968</th><td class="r"><ins>&nbsp; // fnLabels </ins> </td>
                  </tr><tr>
                          <th> </th><th>3969</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3970</th><td class="r"><ins>#ifdef SCILAB_DEBUG</ins> </td>
                  </tr><tr>
                          <th> </th><th>3971</th><td class="r"><ins>&nbsp; printf("Ã©criture paramÃštre 23\n");</ins> </td>
                  </tr><tr>
                          <th> </th><th>3972</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr>
                          <th> </th><th>3973</th><td class="r"><ins>&nbsp; pstStringsTmp = (char **) malloc (sizeof(char*) * xDRLabels.size());</ins> </td>
                  </tr><tr>
                          <th> </th><th>3974</th><td class="r"><ins>&nbsp; for(i = 0 ; i &lt; xDRLabels.size() ; i++)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3975</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3976</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; pstStringsTmp[i] = (char *)xDRLabels[i].c_str();</ins> </td>
                  </tr><tr>
                          <th> </th><th>3977</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3978</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>3979</th><td class="r"><ins>&nbsp; _SciErr = createMatrixOfStringInNamedList(pvApiCtx,"Dakota",piMListAddr,24,1,xDRLabels.size(),pstStringsTmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3980</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>3981</th><td class="r"><ins>&nbsp; free(pstStringsTmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3982</th><td class="r"><ins>&nbsp; if (_SciErr.iErr)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3983</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3984</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; printError(&amp;_SciErr,0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3985</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3986</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>3987</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>3988</th><td class="r"><ins>&nbsp; // failure</ins> </td>
                  </tr><tr>
                          <th> </th><th>3989</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>3990</th><td class="r"><ins>#ifdef SCILAB_DEBUG</ins> </td>
                  </tr><tr>
                          <th> </th><th>3991</th><td class="r"><ins>&nbsp; printf("Ã©criture paramÃštre 24\n");</ins> </td>
                  </tr><tr>
                          <th> </th><th>3992</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr>
                          <th> </th><th>3993</th><td class="r"><ins>&nbsp; dbl_tmp = 0;</ins> </td>
                  </tr><tr>
                          <th> </th><th>3994</th><td class="r"><ins>&nbsp; _SciErr = createMatrixOfDoubleInNamedList(pvApiCtx,"Dakota",piMListAddr,25,1,1,&amp;dbl_tmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3995</th><td class="r"><ins>&nbsp; if (_SciErr.iErr)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3996</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>3997</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; printError(&amp;_SciErr,0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3998</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>3999</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>4000</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>4001</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>4002</th><td class="r"><ins>&nbsp; // fnEvalId</ins> </td>
                  </tr><tr>
                          <th> </th><th>4003</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>4004</th><td class="r"><ins>#ifdef SCILAB_DEBUG</ins> </td>
                  </tr><tr>
                          <th> </th><th>4005</th><td class="r"><ins>&nbsp; printf("Ã©criture paramÃštre 25\n");</ins> </td>
                  </tr><tr>
                          <th> </th><th>4006</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr>
                          <th> </th><th>4007</th><td class="r"><ins>&nbsp; dbl_tmp = fnEvalId;</ins> </td>
                  </tr><tr>
                          <th> </th><th>4008</th><td class="r"><ins>&nbsp; _SciErr = createMatrixOfDoubleInNamedList(pvApiCtx,"Dakota",piMListAddr,26,1,1,&amp;dbl_tmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4009</th><td class="r"><ins>&nbsp; if (_SciErr.iErr)</ins> </td>
                  </tr><tr>
                          <th> </th><th>4010</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>4011</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; printError(&amp;_SciErr,0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4012</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4013</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>4014</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4015</th><td class="r"><ins>&nbsp; /* put the structure into the Scilab workspace, then </ins> </td>
                  </tr><tr>
                          <th> </th><th>4016</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;iterate over provided analysis components, checking for error each time */</ins> </td>
                  </tr><tr>
                          <th> </th><th>4017</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4018</th><td class="r"><ins>#ifdef SCILAB_DEBUG</ins> </td>
                  </tr><tr>
                          <th> </th><th>4019</th><td class="r"><ins>&nbsp; printf("Ã©valuation fobj\n");</ins> </td>
                  </tr><tr>
                          <th> </th><th>4020</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr>
                          <th> </th><th>4021</th><td class="r"><ins>&nbsp; int testJob ;</ins> </td>
                  </tr><tr>
                          <th> </th><th>4022</th><td class="r"><ins>&nbsp; for (int aci=0;aci&lt;analysisComponents[analysisDriverIndex].size();aci++)</ins> </td>
                  </tr><tr>
                          <th> </th><th>4023</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>4024</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; // strip away any .sci the user might have included</ins> </td>
                  </tr><tr>
                          <th> </th><th>4025</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; size_t pos = analysisComponents[analysisDriverIndex][aci].find(".");</ins> </td>
                  </tr><tr>
                          <th> </th><th>4026</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; analysis_command = "Dakota_out = " + </ins> </td>
                  </tr><tr>
                          <th> </th><th>4027</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; analysisComponents[analysisDriverIndex][aci].substr(0,pos) + "(Dakota);";</ins> </td>
                  </tr><tr>
                          <th> </th><th>4028</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; printf("analysis_command : %s\n", analysis_command.c_str());</ins> </td>
                  </tr><tr>
                          <th> </th><th>4029</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; testJob = SendScilabJob((char *)analysis_command.c_str()); </ins> </td>
                  </tr><tr>
                          <th> </th><th>4030</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; if (testJob == -1)</ins> </td>
                  </tr><tr>
                          <th> </th><th>4031</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>4032</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Cerr &lt;&lt; "Error (Direct:Scilab): Call Scilab has not been able to write the job into Scilab "</ins> </td>
                  </tr><tr>
                          <th> </th><th>4033</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;&lt; "Scilab." &lt;&lt; std::endl;</ins> </td>
                  </tr><tr>
                          <th> </th><th>4034</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4035</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>4036</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; else if (testJob == -2 | testJob == -3)</ins> </td>
                  </tr><tr>
                          <th> </th><th>4037</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>4038</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Cerr &lt;&lt; "Error (Direct:Scilab): Call Scilab has not been able to read the error code from Scilab "</ins> </td>
                  </tr><tr>
                          <th> </th><th>4039</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;&lt; "Scilab." &lt;&lt; std::endl;</ins> </td>
                  </tr><tr>
                          <th> </th><th>4040</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4041</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>4042</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; else if (testJob == -4)</ins> </td>
                  </tr><tr>
                          <th> </th><th>4043</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>4044</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Cerr &lt;&lt; "Error (Direct:Scilab): Call Scilab has not been able to allocate the job "</ins> </td>
                  </tr><tr>
                          <th> </th><th>4045</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;&lt; "Scilab." &lt;&lt; std::endl;</ins> </td>
                  </tr><tr>
                          <th> </th><th>4046</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4047</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>4048</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>4049</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4050</th><td class="r"><ins>#ifdef SCILAB_DEBUG</ins> </td>
                  </tr><tr>
                          <th> </th><th>4051</th><td class="r"><ins>&nbsp; printf("rÃ©cupÃ©ration variable Dakota\n");</ins> </td>
                  </tr><tr>
                          <th> </th><th>4052</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr>
                          <th> </th><th>4053</th><td class="r"><ins>&nbsp; /* retrieve and parse the response */</ins> </td>
                  </tr><tr>
                          <th> </th><th>4054</th><td class="r"><ins>&nbsp; _SciErr = readNamedMList(pvApiCtx, "Dakota_out", &amp;piNbItem, &amp;piMListAddr);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4055</th><td class="r"><ins>&nbsp; if (_SciErr.iErr)</ins> </td>
                  </tr><tr>
                          <th> </th><th>4056</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>4057</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; Cerr &lt;&lt; "Error (Direct:Scilab): Failed to get variable Dakota from "</ins> </td>
                  </tr><tr>
                          <th> </th><th>4058</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;&lt; "Scilab." &lt;&lt; std::endl;</ins> </td>
                  </tr><tr>
                          <th> </th><th>4059</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; printError(&amp;_SciErr,0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4060</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4061</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>4062</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4063</th><td class="r"><ins>#ifdef SCILAB_DEBUG</ins> </td>
                  </tr><tr>
                          <th> </th><th>4064</th><td class="r"><ins>&nbsp; printf("lecture labels\n");</ins> </td>
                  </tr><tr>
                          <th> </th><th>4065</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr>
                          <th> </th><th>4066</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>4067</th><td class="r"><ins>&nbsp; //LECTURE DES CHAINES</ins> </td>
                  </tr><tr>
                          <th> </th><th>4068</th><td class="r"><ins>&nbsp; _SciErr = readMatrixOfStringInNamedList(pvApiCtx, "Dakota_out", piMListAddr, 1, &amp;piRows, &amp;piCols, NULL, NULL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4069</th><td class="r"><ins>&nbsp; piLength = (int*) malloc (sizeof(int) * piRows * piCols);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4070</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4071</th><td class="r"><ins>&nbsp; _SciErr = readMatrixOfStringInNamedList(pvApiCtx, "Dakota_out", piMListAddr, 1, &amp;piRows, &amp;piCols, piLength, NULL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4072</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4073</th><td class="r"><ins>&nbsp; pstStrings = (char **) malloc (sizeof(char*) * piRows * piCols);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4074</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4075</th><td class="r"><ins>&nbsp; for(i = 0 ; i &lt; piRows * piCols ; i++)</ins> </td>
                  </tr><tr>
                          <th> </th><th>4076</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>4077</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; pstStrings[i] = (char*)malloc(sizeof(char) * (piLength[i] + 1));</ins> </td>
                  </tr><tr>
                          <th> </th><th>4078</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>4079</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4080</th><td class="r"><ins>&nbsp; _SciErr = readMatrixOfStringInNamedList(pvApiCtx, "Dakota_out", piMListAddr, 1, &amp;piRows, &amp;piCols,</ins> </td>
                  </tr><tr>
                          <th> </th><th>4081</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; piLength, pstStrings);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4082</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>4083</th><td class="r"><ins>&nbsp; if (strcmp(pstStrings[0],SCI_FIELD_NAMES[0]) != 0)</ins> </td>
                  </tr><tr>
                          <th> </th><th>4084</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>4085</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4086</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>4087</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4088</th><td class="r"><ins>&nbsp; // Failure</ins> </td>
                  </tr><tr>
                          <th> </th><th>4089</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4090</th><td class="r"><ins>#ifdef SCILAB_DEBUG</ins> </td>
                  </tr><tr>
                          <th> </th><th>4091</th><td class="r"><ins>&nbsp; printf("lecture paramÃštre 25\n");</ins> </td>
                  </tr><tr>
                          <th> </th><th>4092</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr>
                          <th> </th><th>4093</th><td class="r"><ins>&nbsp; _SciErr = readMatrixOfDoubleInNamedList(pvApiCtx, "Dakota_out", piMListAddr, 25, &amp;piRows, &amp;piCols, NULL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4094</th><td class="r"><ins>&nbsp; x_tmp = (double*) malloc (sizeof(double) * piRows * piCols);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4095</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4096</th><td class="r"><ins>&nbsp; _SciErr = readMatrixOfDoubleInNamedList(pvApiCtx, "Dakota_out", piMListAddr, 25, &amp;piRows, &amp;piCols, x_tmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4097</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4098</th><td class="r"><ins>&nbsp; if(_SciErr.iErr)</ins> </td>
                  </tr><tr>
                          <th> </th><th>4099</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>4100</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; printError(&amp;_SciErr, 0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4101</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4102</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>4103</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4104</th><td class="r"><ins>&nbsp; if( *x_tmp != 0 )</ins> </td>
                  </tr><tr>
                          <th> </th><th>4105</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>4106</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; /* Matlab user indicated failure, don't process */</ins> </td>
                  </tr><tr>
                          <th> </th><th>4107</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; fail_code = (int) *x_tmp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>4108</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>4109</th><td class="r"><ins>&nbsp; else</ins> </td>
                  </tr><tr>
                          <th> </th><th>4110</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>4111</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; fail_code = 0;</ins> </td>
                  </tr><tr>
                          <th> </th><th>4112</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; /* get fields by name in case the user somehow reordered, or decided to</ins> </td>
                  </tr><tr>
                          <th> </th><th>4113</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;only return some of the fields to us... update all of</ins> </td>
                  </tr><tr>
                          <th> </th><th>4114</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fns:&nbsp; &nbsp;1 x numFns</ins> </td>
                  </tr><tr>
                          <th> </th><th>4115</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;grads: numFns * numDerivVars</ins> </td>
                  </tr><tr>
                          <th> </th><th>4116</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;hess:&nbsp; numFns * numDerivVars * numDerivVars</ins> </td>
                  </tr><tr>
                          <th> </th><th>4117</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if any of these come back wrong, set fail_code</ins> </td>
                  </tr><tr>
                          <th> </th><th>4118</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; */&nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4119</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>4120</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>4121</th><td class="r"><ins>#ifdef SCILAB_DEBUG</ins> </td>
                  </tr><tr>
                          <th> </th><th>4122</th><td class="r"><ins>&nbsp; printf("lecture paramÃštre 20\n");</ins> </td>
                  </tr><tr>
                          <th> </th><th>4123</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr>
                          <th> </th><th>4124</th><td class="r"><ins>&nbsp; if (fn_flag)</ins> </td>
                  </tr><tr>
                          <th> </th><th>4125</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>4126</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; _SciErr = readMatrixOfDoubleInNamedList(pvApiCtx,"Dakota_out", piMListAddr, 21, &amp;piRows, &amp;piCols, NULL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4127</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4128</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; x_tmp = (double*) malloc (sizeof(double) * piRows * piCols);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4129</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4130</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; _SciErr = readMatrixOfDoubleInNamedList(pvApiCtx, "Dakota_out", piMListAddr, 21, &amp;piRows, &amp;piCols, x_tmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4131</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4132</th><td class="r"><ins>#ifdef SCILAB_DEBUG</ins> </td>
                  </tr><tr>
                          <th> </th><th>4133</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; for(i=0;i&lt;piRows*piCols;i++)</ins> </td>
                  </tr><tr>
                          <th> </th><th>4134</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>4135</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; printf("fn[%d] = %f\n",i,x_tmp[i]);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4136</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>4137</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr>
                          <th> </th><th>4138</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4139</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; if (x_tmp == NULL)</ins> </td>
                  </tr><tr>
                          <th> </th><th>4140</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>4141</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4142</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Cerr &lt;&lt; "Error (Direct:Scilab): Failed to get field fnVals from " </ins> </td>
                  </tr><tr>
                          <th> </th><th>4143</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;&lt; "Dakota structure." &lt;&lt; std::endl;</ins> </td>
                  </tr><tr>
                          <th> </th><th>4144</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fail_code = SCILAB_FAIL;</ins> </td>
                  </tr><tr>
                          <th> </th><th>4145</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4146</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>4147</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; else if (piRows != 1 | piCols != numFns )</ins> </td>
                  </tr><tr>
                          <th> </th><th>4148</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>4149</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4150</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Cerr &lt;&lt; "Error (Direct:Scilab): Dakota.fnVals must be [1 x numFns]." </ins> </td>
                  </tr><tr>
                          <th> </th><th>4151</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;&lt; std::endl;&nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4152</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fail_code = SCILAB_FAIL;</ins> </td>
                  </tr><tr>
                          <th> </th><th>4153</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4154</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>4155</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; else</ins> </td>
                  </tr><tr>
                          <th> </th><th>4156</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>4157</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (i=0; i&lt;numFns; ++i)</ins> </td>
                  </tr><tr>
                          <th> </th><th>4158</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>4159</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fnVals[i] += x_tmp[i];</ins> </td>
                  </tr><tr>
                          <th> </th><th>4160</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>4161</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>4162</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>4163</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4164</th><td class="r"><ins>#ifdef SCILAB_DEBUG</ins> </td>
                  </tr><tr>
                          <th> </th><th>4165</th><td class="r"><ins>&nbsp; printf("lecture paramÃštre 21\n");</ins> </td>
                  </tr><tr>
                          <th> </th><th>4166</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr>
                          <th> </th><th>4167</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>4168</th><td class="r"><ins>&nbsp; if (gradFlag)</ins> </td>
                  </tr><tr>
                          <th> </th><th>4169</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>4170</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; _SciErr = readMatrixOfDoubleInNamedList(pvApiCtx,"Dakota_out", piMListAddr, 22, &amp;piRows, &amp;piCols, NULL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4171</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4172</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; x_tmp = (double*) malloc (sizeof(double) * piRows * piCols);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4173</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4174</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; _SciErr = readMatrixOfDoubleInNamedList(pvApiCtx, "Dakota_out", piMListAddr, 22, &amp;piRows, &amp;piCols, x_tmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4175</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; if (_SciErr.iErr)</ins> </td>
                  </tr><tr>
                          <th> </th><th>4176</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>4177</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; printError(&amp;_SciErr, 0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4178</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4179</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>4180</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>4181</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>4182</th><td class="r"><ins>#ifdef SCILAB_DEBUG</ins> </td>
                  </tr><tr>
                          <th> </th><th>4183</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; for(i=0;i&lt;piRows*piCols;i++)</ins> </td>
                  </tr><tr>
                          <th> </th><th>4184</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>4185</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; printf("grad[%d] = %f\n",i,x_tmp[i]);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4186</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>4187</th><td class="r"><ins>#endif </ins> </td>
                  </tr><tr>
                          <th> </th><th>4188</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; if ( piRows != numFns |</ins> </td>
                  </tr><tr>
                          <th> </th><th>4189</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; piCols != numDerivVars )</ins> </td>
                  </tr><tr>
                          <th> </th><th>4190</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>4191</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4192</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Cerr &lt;&lt; "Error (Direct:Scilab): Dakota.fnVals must be "</ins> </td>
                  </tr><tr>
                          <th> </th><th>4193</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;&lt; "[numFns x numDerivVars]." &lt;&lt; std::endl;&nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4194</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fail_code = SCILAB_FAIL;</ins> </td>
                  </tr><tr>
                          <th> </th><th>4195</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4196</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>4197</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; else </ins> </td>
                  </tr><tr>
                          <th> </th><th>4198</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>4199</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4200</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (i=0; i&lt;numFns; ++i)</ins> </td>
                  </tr><tr>
                          <th> </th><th>4201</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>4202</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (j=0; j&lt;numDerivVars; ++j)</ins> </td>
                  </tr><tr>
                          <th> </th><th>4203</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>4204</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fnGrads(j,i) += x_tmp[numFns*j + i];</ins> </td>
                  </tr><tr>
                          <th> </th><th>4205</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>4206</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>4207</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>4208</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>4209</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4210</th><td class="r"><ins>#ifdef SCILAB_DEBUG</ins> </td>
                  </tr><tr>
                          <th> </th><th>4211</th><td class="r"><ins>&nbsp; printf("lecture paramÃštre 12\n"); </ins> </td>
                  </tr><tr>
                          <th> </th><th>4212</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr>
                          <th> </th><th>4213</th><td class="r"><ins>&nbsp; if (hessFlag)</ins> </td>
                  </tr><tr>
                          <th> </th><th>4214</th><td class="r"><ins>&nbsp; &nbsp; { </ins> </td>
                  </tr><tr>
                          <th> </th><th>4215</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>4216</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; _SciErr = getMListInList(pvApiCtx, piMListAddr, 23, &amp;piMListAddrHess);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4217</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4218</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; _SciErr = getVarDimension(pvApiCtx, piMListAddrHess, &amp;piRows, &amp;piCols);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4219</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>4220</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; if (piRows != numFns | piCols != numDerivVars)</ins> </td>
                  </tr><tr>
                          <th> </th><th>4221</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>4222</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Cerr &lt;&lt; "Error (Direct:Scilab): Dakota.fnVals must be "</ins> </td>
                  </tr><tr>
                          <th> </th><th>4223</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;&lt; "[numFns x numDerivVars]." &lt;&lt; std::endl;&nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4224</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fail_code = SCILAB_FAIL;</ins> </td>
                  </tr><tr>
                          <th> </th><th>4225</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>4226</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; else</ins> </td>
                  </tr><tr>
                          <th> </th><th>4227</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>4228</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for(i=0;i&lt;numFns;i++)</ins> </td>
                  </tr><tr>
                          <th> </th><th>4229</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>4230</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pdblReal =&nbsp; (double *)malloc (sizeof(double) * piRows * piCols); // YC YC</ins> </td>
                  </tr><tr>
                          <th> </th><th>4231</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _SciErr = readMatrixOfDoubleInNamedList(pvApiCtx, "Dakota_out", piMListAddrHess, i+1, &amp;piRows, &amp;piCols, pdblReal);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4232</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4233</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (_SciErr.iErr)</ins> </td>
                  </tr><tr>
                          <th> </th><th>4234</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>4235</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; printError(&amp;_SciErr, 0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4236</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4237</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>4238</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4239</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (j=0; j&lt;numDerivVars; ++j)</ins> </td>
                  </tr><tr>
                          <th> </th><th>4240</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>4241</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (k=0; k&lt;numDerivVars; ++k)</ins> </td>
                  </tr><tr>
                          <th> </th><th>4242</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>4243</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fnHessians[i](j,k) += pdblReal[numDerivVars*numFns*k + numFns*j + i];</ins> </td>
                  </tr><tr>
                          <th> </th><th>4244</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>4245</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>4246</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>4247</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>4248</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>4249</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>4250</th><td class="r"><ins>#ifdef SCILAB_DEBUG</ins> </td>
                  </tr><tr>
                          <th> </th><th>4251</th><td class="r"><ins>&nbsp; printf("lecture paramÃštre 23\n");</ins> </td>
                  </tr><tr>
                          <th> </th><th>4252</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr>
                          <th> </th><th>4253</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>4254</th><td class="r"><ins>&nbsp; /* get fnLabels--- optional return value */</ins> </td>
                  </tr><tr>
                          <th> </th><th>4255</th><td class="r"><ins>&nbsp; _SciErr = readMatrixOfStringInNamedList(pvApiCtx, "Dakota_out", piMListAddr, 24, &amp;piRows, &amp;piCols, NULL, NULL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4256</th><td class="r"><ins>&nbsp; if (_SciErr.iErr)</ins> </td>
                  </tr><tr>
                          <th> </th><th>4257</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>4258</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; printError(&amp;_SciErr, 0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4259</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4260</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>4261</th><td class="r"><ins>&nbsp; piLength = (int*) malloc (sizeof(int) * piRows * piCols);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4262</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4263</th><td class="r"><ins>&nbsp; _SciErr = readMatrixOfStringInNamedList(pvApiCtx, "Dakota_out", piMListAddr, 24, &amp;piRows, &amp;piCols, piLength, NULL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4264</th><td class="r"><ins>&nbsp; if (_SciErr.iErr)</ins> </td>
                  </tr><tr>
                          <th> </th><th>4265</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>4266</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; printError(&amp;_SciErr, 0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4267</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4268</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>4269</th><td class="r"><ins>&nbsp; pstStrings = (char **) malloc (sizeof(char*) * piRows * piCols);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4270</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4271</th><td class="r"><ins>&nbsp; for(i = 0 ; i &lt; piRows * piCols ; i++)</ins> </td>
                  </tr><tr>
                          <th> </th><th>4272</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>4273</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; pstStrings[i] = (char*)malloc(sizeof(char) * (piLength[i] + 1));</ins> </td>
                  </tr><tr>
                          <th> </th><th>4274</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>4275</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4276</th><td class="r"><ins>&nbsp; _SciErr = readMatrixOfStringInNamedList(pvApiCtx, "Dakota_out", piMListAddr, 24, &amp;piRows, &amp;piCols, piLength, </ins> </td>
                  </tr><tr>
                          <th> </th><th>4277</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pstStrings);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4278</th><td class="r"><ins>&nbsp; if (_SciErr.iErr)</ins> </td>
                  </tr><tr>
                          <th> </th><th>4279</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>4280</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; printError(&amp;_SciErr, 0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4281</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; return (SCILAB_FAIL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4282</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>4283</th><td class="r"><ins>&nbsp; for (i=0; i&lt;numFns; ++i) </ins> </td>
                  </tr><tr>
                          <th> </th><th>4284</th><td class="r"><ins>&nbsp; &nbsp; {</ins> </td>
                  </tr><tr>
                          <th> </th><th>4285</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; fnLabels[i] = pstStrings[i];</ins> </td>
                  </tr><tr>
                          <th> </th><th>4286</th><td class="r"><ins>&nbsp; &nbsp; }</ins> </td>
                  </tr><tr>
                          <th> </th><th>4287</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4288</th><td class="r"><ins>&nbsp; free(piLength);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4289</th><td class="r"><ins>&nbsp; free(pstStrings);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4290</th><td class="r"><ins>&nbsp; free(x_tmp);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4291</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>4292</th><td class="r"><ins>&nbsp; return(fail_code);&nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>4293</th><td class="r"><ins>}</ins> </td>
                  </tr><tr>
                          <th> </th><th>4294</th><td class="r"><ins>#endif //DAKOTA_SCILAB</ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>4295</th><td class="r"><ins></ins> </td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>3409</th><th>4296</th><td class="l"><span>#ifdef DAKOTA_PYTHON</span> </td>
                  </tr><tr>
                          <th>3410</th><th>4297</th><td class="l"><span>int DirectApplicInterface::python_run()</span> </td>
                  </tr><tr>
                          <th>3411</th><th>4298</th><td class="l"><span>{</span> </td>
                  </tr>
            </tbody>
        </table>
      </li>
      <li class="entry">
        <h2>
          <a>DirectApplicInterface.H</a>
        </h2>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="File DirectApplicInterface.H (rÃ©vision 598)">
                  </th>
                  <th title="File DirectApplicInterface.H (copie de travail)">
                  </th>
                  <td><em></em> </td>
                </tr>
              </thead>
            <tbody class="unmod">
                  <tr>
                          <th>28</th><th>28</th><td class="l"><span>//struct engine;&nbsp; //forward declaration for engine pointer</span> </td>
                  </tr><tr>
                          <th>29</th><th>29</th><td class="l"><span>//struct mxArray; //forward declaration for mxArray argument</span> </td>
                  </tr><tr>
                          <th>30</th><th>30</th><td class="l"><span>#endif</span> </td>
                  </tr>
            </tbody><tbody class="add">
                  <tr class="first">
                          <th> </th><th>31</th><td class="r"><ins>#ifdef DAKOTA_SCILAB</ins> </td>
                  </tr><tr>
                          <th> </th><th>32</th><td class="r"><ins>#include &lt;api_scilab.h&gt;</ins> </td>
                  </tr><tr>
                          <th> </th><th>33</th><td class="r"><ins>#include &lt;call_scilab.h&gt;</ins> </td>
                  </tr><tr>
                          <th> </th><th>34</th><td class="r"><ins>#include &lt;string.h&gt;</ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>35</th><td class="r"><ins>#endif</ins> </td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>31</th><th>36</th><td class="l"><span>#ifdef DAKOTA_PYTHON</span> </td>
                  </tr><tr>
                          <th>32</th><th>37</th><td class="l"><span>#include &lt;Python.h&gt;&nbsp; //eventually use forward declaration of PyObject</span> </td>
                  </tr><tr>
                          <th>33</th><th>38</th><td class="l"><span>#endif</span> </td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="#L56">…</a></th>
                  <th><a href="#L61">…</a></th>
                  <td><em></em> </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>56</th><th>61</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SOBOL_RATIONAL, SOBOL_G_FUNCTION, SOBOL_ISHIGAMI,</span> </td>
                  </tr><tr>
                          <th>57</th><th>62</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; STEEL_COLUMN_COST, STEEL_COLUMN_PERFORMANCE,</span> </td>
                  </tr><tr>
                          <th>58</th><th>63</th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TEXT_BOOK, TEXT_BOOK1, TEXT_BOOK2, TEXT_BOOK3, TEXT_BOOK_OUU,</span> </td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>59</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SALINAS, MODELCENTER, MATLAB, <del></del>PYTHON };</span> </td>
                      </tr>
                      <tr class="last">
                        <th> </th><th>64</th><td class="r"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SALINAS, MODELCENTER, MATLAB, <ins>SCILAB, </ins>PYTHON };</span> </td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>60</th><th>65</th><td class="l"><span></span> </td>
                  </tr><tr>
                          <th>61</th><th>66</th><td class="l"><span>/// enumeration for how local variables are stored (values must employ</span> </td>
                  </tr><tr>
                          <th>62</th><th>67</th><td class="l"><span>/// a bit representation)</span> </td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="#L203">…</a></th>
                  <th><a href="#L208">…</a></th>
                  <td><em></em> </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>203</th><th>208</th><td class="l"><span>&nbsp; engine *matlabEngine;</span> </td>
                  </tr><tr>
                          <th>204</th><th>209</th><td class="l"><span>#endif</span> </td>
                  </tr><tr>
                          <th>205</th><th>210</th><td class="l"><span></span> </td>
                  </tr>
            </tbody><tbody class="add">
                  <tr class="first">
                          <th> </th><th>211</th><td class="r"><ins>#ifdef DAKOTA_SCILAB</ins> </td>
                  </tr><tr>
                          <th> </th><th>212</th><td class="r"><ins>&nbsp; int scilabEngine;</ins> </td>
                  </tr><tr>
                          <th> </th><th>213</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>214</th><td class="r"><ins></ins> </td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>206</th><th>215</th><td class="l"><span>private:</span> </td>
                  </tr><tr>
                          <th>207</th><th>216</th><td class="l"><span></span> </td>
                  </tr><tr>
                          <th>208</th><th>217</th><td class="l"><span>&nbsp; //</span> </td>
                  </tr>
            </tbody>
              <tbody class="skipped">
                <tr>
                  <th><a href="#L253">…</a></th>
                  <th><a href="#L262">…</a></th>
                  <td><em></em> </td>
                </tr>
              </tbody>
            <tbody class="unmod">
                  <tr>
                          <th>253</th><th>262</th><td class="l"><span>&nbsp; int matlab_field_prep(mxArray* dakota_matlab, const char* field_name);</span> </td>
                  </tr><tr>
                          <th>254</th><th>263</th><td class="l"><span>#endif // DAKOTA_MATLAB</span> </td>
                  </tr><tr>
                          <th>255</th><th>264</th><td class="l"><span></span> </td>
                  </tr>
            </tbody><tbody class="add">
                  <tr class="first">
                          <th> </th><th>265</th><td class="r"><ins>#ifdef DAKOTA_SCILAB</ins> </td>
                  </tr><tr>
                          <th> </th><th>266</th><td class="r"><ins>&nbsp; int scilab_engine_run();</ins> </td>
                  </tr><tr>
                          <th> </th><th>267</th><td class="r"><ins>#endif</ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>268</th><td class="r"><ins></ins> </td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>256</th><th>269</th><td class="l"><span>#ifdef DAKOTA_PYTHON</span> </td>
                  </tr><tr>
                          <th>257</th><th>270</th><td class="l"><span>&nbsp; /// direct interface to Python via API, BMA 07/02/07</span> </td>
                  </tr><tr>
                          <th>258</th><th>271</th><td class="l"><span>&nbsp; int python_run();</span> </td>
                  </tr>
            </tbody>
        </table>
      </li>
  </ul>
</div>

        </div>
    </div>
    <div id="altlinks">
      <h3>Download in other formats:</h3>
      <ul>
        <li class="last first">
          <a rel="nofollow" href="/trac/dakota/raw-attachment/ticket/4069/dakota_scilab_src.patch">Original Format</a>
        </li>
      </ul>
    </div>
    </div>
  <div id="footer" lang="en" xml:lang="en">
    <a id="traclogo" href="http://trac.edgewall.org/"><img src="/trac/dakota/chrome/common/trac_logo_mini.png" alt="Trac Powered" /></a>
    <a id="snllogo" href="http://www.sandia.gov/"><img src="/trac/dakota/chrome/shared/sandia_logo.png" alt="Sandia National Laboratories" /></a>
    <p align="center">
      ©2010 Sandia Corporation <br />
      <a href="http://www.sandia.gov/general/privacy-security/index.html">Privacy and Security</a> |
        <a href="mailto:briadam@sandia.gov">Site Contact</a>
    </p>
  </div>
</body>
</html>