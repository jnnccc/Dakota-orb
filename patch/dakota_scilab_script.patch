<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  
  

  










<head>
  <meta name="sandia.approval_type" content="formal" />
  <meta name="sandia.approved" content="pending" />
  <meta name="sandia.create_date" content="unknown" />
  <meta name="keywords" content="DAKOTA (Public) TBD" />
  <meta name="description" content="DAKOTA (Public) Trac Pages" />
  <link rev="owns" title="Content Owner" href="mailto:briadam@sandia.gov" />
    <title>
      dakota_scilab_script.patch on Ticket #4069 – Attachment
     – DAKOTA (Public)
    </title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <link rel="search" href="/trac/dakota/search" />
        <link rel="help" href="/trac/dakota/wiki/TracGuide" />
        <link rel="alternate" href="/trac/dakota/raw-attachment/ticket/4069/dakota_scilab_script.patch" type="text/x-diff; charset=iso-8859-15" title="Original Format" />
        <link rel="up" href="/trac/dakota/ticket/4069" title="Ticket #4069" />
        <link rel="start" href="/trac/dakota/wiki" />
        <link rel="stylesheet" href="/trac/dakota/chrome/common/css/trac.css" type="text/css" /><link rel="stylesheet" href="/trac/dakota/chrome/common/css/diff.css" type="text/css" /><link rel="stylesheet" href="/trac/dakota/chrome/common/css/code.css" type="text/css" />
        <link rel="shortcut icon" href="/trac/dakota/chrome/shared/sandia_icon.ico" type="image/x-icon" />
        <link rel="icon" href="/trac/dakota/chrome/shared/sandia_icon.ico" type="image/x-icon" />
      <link type="application/opensearchdescription+xml" rel="search" href="/trac/dakota/search/opensearch" title="Search DAKOTA (Public)" />
    <script type="text/javascript" src="/trac/dakota/chrome/common/js/jquery.js"></script><script type="text/javascript" src="/trac/dakota/chrome/common/js/babel.js"></script><script type="text/javascript" src="/trac/dakota/chrome/common/js/trac.js"></script><script type="text/javascript" src="/trac/dakota/chrome/common/js/search.js"></script><script type="text/javascript" src="/trac/dakota/chrome/common/js/diff.js"></script>
    <!--[if lt IE 7]>
    <script type="text/javascript" src="/trac/dakota/chrome/common/js/ie_pre7_hacks.js"></script>
    <![endif]-->
      <script type="text/javascript" src="/trac/dakota/chrome/common/js/folding.js"></script>
      <script type="text/javascript">
        jQuery(document).ready(function($) {
          $('#preview table.code').enableCollapsibleColumns($('#preview table.code thead th.content'));
        });
      </script>
  <link rel="stylesheet" href="/trac/dakota/chrome/shared/snl.css" type="text/css" />
  <style>
    #header { margin-bottom: -73px; }
    #sitenav {
       clear: both;
       color: #aaa;
       font-size: 12px;
       text-align: right;
       margin-right: 10px;
       margin-bottom: 14px;
    }
    #sitenav, #sitenav :link, #sitenav :visited {
      color: #fff;
    }
    #sitenav :link:hover, #sitenav :visited:hover {
      color: #333;
      background-color: #08b; /* pulled from the background of the SNL logo */
    }
  </style>
</head>
<body>
    <div style="background-image: url(/trac/dakota/chrome/shared/snl-banner-back.jpg);" id="banner">
    <a id="snlbanner_link" href="http://www.sandia.gov"><img src="/trac/dakota/chrome/shared/snl-banner.gif" alt="Sandia National Laboratories" /></a>
    <div id="header">
    <table height="100%"><td valign="center">
      <h1><a href="https://software.sandia.gov/trac/dakota">DAKOTA (Public)</a></h1>
        <h2>Design and Analysis Kit for Terascale Applications<br /> </h2>
    </td></table>
      </div>
    <div id="sitenav" class="nav">
      <ul><li class="last"></li></ul>
    </div>
    <form name="search" id="search" action="/trac/dakota/search" method="get">
        <div>
          <label for="proj-search">Search:</label>
          <input type="text" id="proj-search" name="q" size="18" value="Search DAKOTA (Public)" onblur="if(value==''){value='Search DAKOTA (Public)'}" onfocus="if(value=='Search DAKOTA (Public)'){value=''}" />
          <input onclick="if (document.search.q.value == 'Search DAKOTA (Public)') document.search.q.value = ''" type="submit" value="Search" />
        </div>
    </form>
      <div id="metanav" class="nav">
    <ul>
      <li class="first"><a href="/trac/dakota/login">Login</a></li><li><a href="/trac/dakota/prefs">Preferences</a></li><li><a href="/trac/dakota/wiki/TracGuide">Help/Guide</a></li><li class="last"><a href="/trac/dakota/about">About Trac</a></li>
    </ul>
  </div>
  </div>
    <div id="mainnav" class="nav">
    <ul>
      <li class="first"><a href="/trac/dakota/wiki">Wiki</a></li><li><a href="/trac/dakota/timeline">Timeline</a></li><li><a href="/trac/dakota/roadmap">Roadmap</a></li><li><a href="/trac/dakota/browser">Source</a></li><li><a href="/trac/dakota/query">Tickets</a></li><li class="last"><a href="/trac/dakota/search">Search</a></li>
    </ul>
  </div>
    <div id="main">
      <div id="ctxtnav" class="nav">
        <h2>Context Navigation</h2>
          <ul>
              <li class="last first"><a href="/trac/dakota/ticket/4069">Back to Ticket #4069</a></li>
          </ul>
        <hr />
      </div>
      <div id="notice" class="system-message">
          <div id="moderation_required">Attachments you submit will be routed for moderation.  If you have an account, please <a href="/trac/dakota/login">log in</a> first.</div>
      </div>
    <div id="content" class="attachment">
        <h1><a href="/trac/dakota/ticket/4069">Ticket #4069</a>: dakota_scilab_script.patch</h1>
        <table id="info" summary="Description">
          <tbody>
            <tr>
              <th scope="col">File dakota_scilab_script.patch,
                <span title="38964 bytes">38.1 KB</span>
                (added by anonymous, <a class="timeline" href="/trac/dakota/timeline?from=2011-08-30T09%3A08%3A43-06%3A00&amp;precision=second" title="2011-08-30T09:08:43-06:00 in Timeline">6 years</a> ago)</th>
            </tr>
            <tr>
              <td class="message searchable">
                
              </td>
            </tr>
          </tbody>
        </table>
        <div id="preview" class="searchable">
          
  <div class="diff">
  <ul class="entries">
      <li class="entry">
        <h2>
          <a>Rosenbrock/scilab_rosen_wrapper.sci</a>
        </h2>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="File Rosenbrock/scilab_rosen_wrapper.sci (rÃ©vision 0)">
                  </th>
                  <th title="File Rosenbrock/scilab_rosen_wrapper.sci (rÃ©vision 0)">
                  </th>
                  <td><em></em> </td>
                </tr>
              </thead>
            <tbody class="add">
                  <tr class="first">
                          <th> </th><th>1</th><td class="r"><ins>// scilab_rosen_wrapper.sci</ins> </td>
                  </tr><tr>
                          <th> </th><th>2</th><td class="r"><ins>function scilab_rosen_wrapper(params,results)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>4</th><td class="r"><ins>exec('rosenbrock.sci');</ins> </td>
                  </tr><tr>
                          <th> </th><th>5</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>6</th><td class="r"><ins>//--------------------------------------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>7</th><td class="r"><ins>// Set any fixed/default values needed for your analysis .sci code</ins> </td>
                  </tr><tr>
                          <th> </th><th>8</th><td class="r"><ins>//--------------------------------------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>9</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>10</th><td class="r"><ins>alpha = 100;</ins> </td>
                  </tr><tr>
                          <th> </th><th>11</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>12</th><td class="r"><ins>//------------------------------------------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>13</th><td class="r"><ins>// READ params.in (or params.in.num) from DAKOTA and set Scilab variables</ins> </td>
                  </tr><tr>
                          <th> </th><th>14</th><td class="r"><ins>//</ins> </td>
                  </tr><tr>
                          <th> </th><th>15</th><td class="r"><ins>// read params.in (no aprepro) -- just one param per line</ins> </td>
                  </tr><tr>
                          <th> </th><th>16</th><td class="r"><ins>//------------------------------------------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>17</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>18</th><td class="r"><ins>fid = mopen(params,'r');</ins> </td>
                  </tr><tr>
                          <th> </th><th>19</th><td class="r"><ins>C = mgetl(fid,-1);</ins> </td>
                  </tr><tr>
                          <th> </th><th>20</th><td class="r"><ins>mclose(fid);</ins> </td>
                  </tr><tr>
                          <th> </th><th>21</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>22</th><td class="r"><ins>// set design variables -- could use vector notation</ins> </td>
                  </tr><tr>
                          <th> </th><th>23</th><td class="r"><ins>// rosenbrock x1, x2</ins> </td>
                  </tr><tr>
                          <th> </th><th>24</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>25</th><td class="r"><ins>Line = tokens(C(2),' '); x(1) = eval(Line(1)); disp(x(1));</ins> </td>
                  </tr><tr>
                          <th> </th><th>26</th><td class="r"><ins>Line = tokens(C(3),' '); x(2) = eval(Line(1)); disp(x(2));</ins> </td>
                  </tr><tr>
                          <th> </th><th>27</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>28</th><td class="r"><ins>//------------------------------------------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>29</th><td class="r"><ins>// CALL your analysis code to get the function value</ins> </td>
                  </tr><tr>
                          <th> </th><th>30</th><td class="r"><ins>//------------------------------------------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>31</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>32</th><td class="r"><ins>f = rosenbrock(x,alpha);</ins> </td>
                  </tr><tr>
                          <th> </th><th>33</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>34</th><td class="r"><ins>//------------------------------------------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>35</th><td class="r"><ins>// WRITE results.out</ins> </td>
                  </tr><tr>
                          <th> </th><th>36</th><td class="r"><ins>//------------------------------------------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>37</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>38</th><td class="r"><ins>fid = mopen(results,'w');</ins> </td>
                  </tr><tr>
                          <th> </th><th>39</th><td class="r"><ins>mfprintf(fid,'%20.10e&nbsp; &nbsp; &nbsp;f\n', f);</ins> </td>
                  </tr><tr>
                          <th> </th><th>40</th><td class="r"><ins>mclose(fid);</ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>41</th><td class="r"><ins>endfunction</ins> </td>
                  </tr>
            </tbody>
        </table>
      </li>
      <li class="entry">
        <h2>
          <a>Rosenbrock/rosenbrock.sci</a>
        </h2>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="File Rosenbrock/rosenbrock.sci (rÃ©vision 0)">
                  </th>
                  <th title="File Rosenbrock/rosenbrock.sci (rÃ©vision 0)">
                  </th>
                  <td><em></em> </td>
                </tr>
              </thead>
            <tbody class="add">
                  <tr class="first">
                          <th> </th><th>1</th><td class="r"><ins>// rosenbrock</ins> </td>
                  </tr><tr>
                          <th> </th><th>2</th><td class="r"><ins>//</ins> </td>
                  </tr><tr>
                          <th> </th><th>3</th><td class="r"><ins>// return function values for the rosenbrock problem</ins> </td>
                  </tr><tr>
                          <th> </th><th>4</th><td class="r"><ins>//&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; f( x1, x2 ) = alpha*( x2 - x1^2 )^2 + ( 1 - x1 )^2</ins> </td>
                  </tr><tr>
                          <th> </th><th>5</th><td class="r"><ins>//</ins> </td>
                  </tr><tr>
                          <th> </th><th>6</th><td class="r"><ins>// eventually: handle constraints, gradients, hessians</ins> </td>
                  </tr><tr>
                          <th> </th><th>7</th><td class="r"><ins>function f = rosenbrock(x,alpha)</ins> </td>
                  </tr><tr>
                          <th> </th><th>8</th><td class="r"><ins>&nbsp; f = alpha*( x(2) - x(1)^2 )^2 + ( 1 - x(1) )^2;</ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>9</th><td class="r"><ins>endfunction</ins> </td>
                  </tr>
            </tbody>
        </table>
      </li>
      <li class="entry">
        <h2>
          <a>Rosenbrock/scilab_rosen_bb_simulator.bat</a>
        </h2>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="File Rosenbrock/scilab_rosen_bb_simulator.bat (rÃ©vision 0)">
                  </th>
                  <th title="File Rosenbrock/scilab_rosen_bb_simulator.bat (rÃ©vision 0)">
                  </th>
                  <td><em></em> </td>
                </tr>
              </thead>
            <tbody class="add">
                  <tr class="first">
                          <th> </th><th>1</th><td class="r"><ins>rem Sample simulator to Dakota system call script -- Scilab example</ins> </td>
                  </tr><tr>
                          <th> </th><th>2</th><td class="r"><ins>rem See User Manual for instructions</ins> </td>
                  </tr><tr>
                          <th> </th><th>3</th><td class="r"><ins>rem</ins> </td>
                  </tr><tr>
                          <th> </th><th>4</th><td class="r"><ins>rem bvbw 10/24/01</ins> </td>
                  </tr><tr>
                          <th> </th><th>5</th><td class="r"><ins>rem Brian M. Adams, 11/17/2005; 5/11/2009</ins> </td>
                  </tr><tr>
                          <th> </th><th>6</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>7</th><td class="r"><ins>rem $1 is params.in FROM Dakota</ins> </td>
                  </tr><tr>
                          <th> </th><th>8</th><td class="r"><ins>rem $2 is results.out returned to Dakota</ins> </td>
                  </tr><tr>
                          <th> </th><th>9</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>10</th><td class="r"><ins>rem Assuming Scilab .sci files and any necessary data are in ./</ins> </td>
                  </tr><tr>
                          <th> </th><th>11</th><td class="r"><ins>rem from which DAKOTA is run</ins> </td>
                  </tr><tr>
                          <th> </th><th>12</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>13</th><td class="r"><ins>rem NOTE: The workdir could be eliminated since the scilab wrapper</ins> </td>
                  </tr><tr>
                          <th> </th><th>14</th><td class="r"><ins>rem accepts parameters file names as input, but is included for example</ins> </td>
                  </tr><tr>
                          <th> </th><th>15</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>16</th><td class="r"><ins>rem ------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>17</th><td class="r"><ins>rem Set up working directory</ins> </td>
                  </tr><tr>
                          <th> </th><th>18</th><td class="r"><ins>rem ------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>19</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>20</th><td class="r"><ins>rem you could simplify this and keep all files in your main directory</ins> </td>
                  </tr><tr>
                          <th> </th><th>21</th><td class="r"><ins>rem if you are only running one simulation at a time.</ins> </td>
                  </tr><tr>
                          <th> </th><th>22</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>23</th><td class="r"><ins>rem strip function evaluation number for making working directory</ins> </td>
                  </tr><tr>
                          <th> </th><th>24</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>25</th><td class="r"><ins>mkdir workdir</ins> </td>
                  </tr><tr>
                          <th> </th><th>26</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>27</th><td class="r"><ins>echo "test : p1 = $1"</ins> </td>
                  </tr><tr>
                          <th> </th><th>28</th><td class="r"><ins>echo "test : p2 = $2"</ins> </td>
                  </tr><tr>
                          <th> </th><th>29</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>30</th><td class="r"><ins>rem copy parameters file from DAKOTA into working directory</ins> </td>
                  </tr><tr>
                          <th> </th><th>31</th><td class="r"><ins>copy $1 workdir\params.in</ins> </td>
                  </tr><tr>
                          <th> </th><th>32</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>33</th><td class="r"><ins>rem copy any necessary .m files and data files into workdir</ins> </td>
                  </tr><tr>
                          <th> </th><th>34</th><td class="r"><ins>copy rosenbrock.sci scilab_rosen_wrapper.sci workdir</ins> </td>
                  </tr><tr>
                          <th> </th><th>35</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>36</th><td class="r"><ins>rem ------------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>37</th><td class="r"><ins>rem RUN the simulation from workdir.num</ins> </td>
                  </tr><tr>
                          <th> </th><th>38</th><td class="r"><ins>rem ------------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>39</th><td class="r"><ins>rem launch Scilab with command mode (-r)</ins> </td>
                  </tr><tr>
                          <th> </th><th>40</th><td class="r"><ins>rem scilab_rosen_wrapper.sci will call the actual analysis file</ins> </td>
                  </tr><tr>
                          <th> </th><th>41</th><td class="r"><ins>rem rosenbrock.sci</ins> </td>
                  </tr><tr>
                          <th> </th><th>42</th><td class="r"><ins>cd workdir</ins> </td>
                  </tr><tr>
                          <th> </th><th>43</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>44</th><td class="r"><ins>echo scilab -nwni -e "exec scilab_rosen_wrapper.sci; scilab_rosen_wrapper('params.in', 'results.out'); exit"</ins> </td>
                  </tr><tr>
                          <th> </th><th>45</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>46</th><td class="r"><ins>scilab -nwni -e "exec scilab_rosen_wrapper.sci; scilab_rosen_wrapper('params.in', 'results.out'); exit"</ins> </td>
                  </tr><tr>
                          <th> </th><th>47</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>48</th><td class="r"><ins>rem *** --&gt; The 'exit' command is crucial so Scilab will exit after running</ins> </td>
                  </tr><tr>
                          <th> </th><th>49</th><td class="r"><ins>rem&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;the analysis!</ins> </td>
                  </tr><tr>
                          <th> </th><th>50</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>51</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>52</th><td class="r"><ins>rem -------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>53</th><td class="r"><ins>rem write results.out.X and cleanup</ins> </td>
                  </tr><tr>
                          <th> </th><th>54</th><td class="r"><ins>rem -------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>55</th><td class="r"><ins>copy results.out ../$2 </ins> </td>
                  </tr><tr>
                          <th> </th><th>56</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>57</th><td class="r"><ins>cd ..</ins> </td>
                  </tr><tr>
                          <th> </th><th>58</th><td class="r"><ins>rmdir /s /q workdir</ins> </td>
                  </tr><tr>
                          <th> </th><th>59</th><td class="r"><ins></ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>60</th><td class="r"><ins></ins> </td>
                  </tr>
            </tbody>
        </table>
      </li>
      <li class="entry">
        <h2>
          <a>Rosenbrock/dakota_scilab_rosenbrock.in</a>
        </h2>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="File Rosenbrock/dakota_scilab_rosenbrock.in (rÃ©vision 0)">
                  </th>
                  <th title="File Rosenbrock/dakota_scilab_rosenbrock.in (rÃ©vision 0)">
                  </th>
                  <td><em></em> </td>
                </tr>
              </thead>
            <tbody class="add">
                  <tr class="first">
                          <th> </th><th>1</th><td class="r"><ins>#&nbsp; DAKOTA INPUT FILE - dakota_scilab_rosenbrock.in</ins> </td>
                  </tr><tr>
                          <th> </th><th>2</th><td class="r"><ins>#&nbsp; This sample Dakota input file optimizes the Rosenbrock function.</ins> </td>
                  </tr><tr>
                          <th> </th><th>3</th><td class="r"><ins>#&nbsp; See p. 95 in Practical Optimization by Gill, Murray, and Wright.</ins> </td>
                  </tr><tr>
                          <th> </th><th>4</th><td class="r"><ins>#&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>5</th><td class="r"><ins># Here we use either the </ins> </td>
                  </tr><tr>
                          <th> </th><th>6</th><td class="r"><ins>#&nbsp; &nbsp;scilab_rosen_bb_simulator.sh (Unix) or </ins> </td>
                  </tr><tr>
                          <th> </th><th>7</th><td class="r"><ins>#&nbsp; &nbsp;scilab_rosen_bb_simulator.bat (Windows)</ins> </td>
                  </tr><tr>
                          <th> </th><th>8</th><td class="r"><ins># analysis driver that calls Scilab for each function evaluation</ins> </td>
                  </tr><tr>
                          <th> </th><th>9</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>10</th><td class="r"><ins>method,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>11</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; conmin_frcg&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>12</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>13</th><td class="r"><ins>variables,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>14</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; continuous_design = 2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>15</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; cdv_initial_point&nbsp; &nbsp;-1.0&nbsp; &nbsp; &nbsp; 1.0&nbsp; &nbsp; &nbsp; &nbsp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>16</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; cdv_lower_bounds&nbsp; &nbsp; -2.0&nbsp; &nbsp; &nbsp;-2.0&nbsp; &nbsp; &nbsp; &nbsp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>17</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; cdv_upper_bounds&nbsp; &nbsp; &nbsp;2.0&nbsp; &nbsp; &nbsp; 2.0&nbsp; &nbsp; &nbsp; &nbsp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>18</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; cdv_descriptor&nbsp; &nbsp; &nbsp; &nbsp;'x1'&nbsp; &nbsp; &nbsp;'x2'</ins> </td>
                  </tr><tr>
                          <th> </th><th>19</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>20</th><td class="r"><ins>interface,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>21</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>22</th><td class="r"><ins># common options</ins> </td>
                  </tr><tr>
                          <th> </th><th>23</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; fork,</ins> </td>
                  </tr><tr>
                          <th> </th><th>24</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; parameters_file = 'params.in'&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>25</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; results_file&nbsp; &nbsp; = 'results.out'&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>26</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>27</th><td class="r"><ins># Use this line for Linux</ins> </td>
                  </tr><tr>
                          <th> </th><th>28</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; analysis_driver = 'scilab_rosen_bb_simulator.sh'&nbsp; &nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>29</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>30</th><td class="r"><ins># OR use this line for Windows</ins> </td>
                  </tr><tr>
                          <th> </th><th>31</th><td class="r"><ins>##&nbsp; &nbsp; &nbsp; analysis_driver = ' scilab_rosen_bb_simulator.bat'&nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>32</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>33</th><td class="r"><ins># POSSIBLY use the following to perform 2 or more simultaneous Scilab</ins> </td>
                  </tr><tr>
                          <th> </th><th>34</th><td class="r"><ins># evaluations.&nbsp; I haven't researched whether the automation</ins> </td>
                  </tr><tr>
                          <th> </th><th>35</th><td class="r"><ins># server supports this asynchronously, or whether one evaluation will</ins> </td>
                  </tr><tr>
                          <th> </th><th>36</th><td class="r"><ins># block the next (seems to work though)</ins> </td>
                  </tr><tr>
                          <th> </th><th>37</th><td class="r"><ins>##&nbsp; &nbsp; &nbsp; &nbsp;asynchronous&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>38</th><td class="r"><ins>##&nbsp; &nbsp; &nbsp; &nbsp;evaluation_concurrency = 2</ins> </td>
                  </tr><tr>
                          <th> </th><th>39</th><td class="r"><ins>##&nbsp; &nbsp; &nbsp; &nbsp;file_tag&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>40</th><td class="r"><ins># use this to keep parameters/results files around if you wish (when</ins> </td>
                  </tr><tr>
                          <th> </th><th>41</th><td class="r"><ins># using file_tag only)</ins> </td>
                  </tr><tr>
                          <th> </th><th>42</th><td class="r"><ins>##&nbsp; &nbsp; &nbsp; file_save&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>43</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>44</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>45</th><td class="r"><ins>responses,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>46</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; num_objective_functions = 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>47</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; numerical_gradients&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>48</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fd_gradient_step_size = .000001&nbsp; &nbsp; &nbsp; &nbsp;</ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>49</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; no_hessians</ins> </td>
                  </tr>
            </tbody>
        </table>
      </li>
      <li class="entry">
        <h2>
          <a>Rosenbrock/scilab_rosen_bb_simulator.sh</a>
        </h2>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="File Rosenbrock/scilab_rosen_bb_simulator.sh (rÃ©vision 0)">
                  </th>
                  <th title="File Rosenbrock/scilab_rosen_bb_simulator.sh (rÃ©vision 0)">
                  </th>
                  <td><em></em> </td>
                </tr>
              </thead>
            <tbody class="add">
                  <tr class="first">
                          <th> </th><th>1</th><td class="r"><ins>#!/bin/bash </ins> </td>
                  </tr><tr>
                          <th> </th><th>2</th><td class="r"><ins># Sample simulator to Dakota system call script -- Scilab example</ins> </td>
                  </tr><tr>
                          <th> </th><th>3</th><td class="r"><ins># See User Manual for instructions</ins> </td>
                  </tr><tr>
                          <th> </th><th>4</th><td class="r"><ins>#</ins> </td>
                  </tr><tr>
                          <th> </th><th>5</th><td class="r"><ins># yc 10/24/01</ins> </td>
                  </tr><tr>
                          <th> </th><th>6</th><td class="r"><ins># Yann Chapalain, 4/05/2011</ins> </td>
                  </tr><tr>
                          <th> </th><th>7</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>8</th><td class="r"><ins># $1 is params.in FROM Dakota</ins> </td>
                  </tr><tr>
                          <th> </th><th>9</th><td class="r"><ins># $2 is results.out returned to Dakota</ins> </td>
                  </tr><tr>
                          <th> </th><th>10</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>11</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>12</th><td class="r"><ins># Assuming Scilab .sci files and any necessary data are in ./</ins> </td>
                  </tr><tr>
                          <th> </th><th>13</th><td class="r"><ins># from which DAKOTA is run</ins> </td>
                  </tr><tr>
                          <th> </th><th>14</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>15</th><td class="r"><ins># NOTE: The workdir could be eliminated since the scilab wrapper</ins> </td>
                  </tr><tr>
                          <th> </th><th>16</th><td class="r"><ins># accepts parameters file names as input, but is included for example</ins> </td>
                  </tr><tr>
                          <th> </th><th>17</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>18</th><td class="r"><ins># ------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>19</th><td class="r"><ins># Set up working directory</ins> </td>
                  </tr><tr>
                          <th> </th><th>20</th><td class="r"><ins># ------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>21</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>22</th><td class="r"><ins># you could simplify this and keep all files in your main directory</ins> </td>
                  </tr><tr>
                          <th> </th><th>23</th><td class="r"><ins># if you are only running one simulation at a time.</ins> </td>
                  </tr><tr>
                          <th> </th><th>24</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>25</th><td class="r"><ins># strip function evaluation number for making working directory</ins> </td>
                  </tr><tr>
                          <th> </th><th>26</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>27</th><td class="r"><ins>mkdir workdir</ins> </td>
                  </tr><tr>
                          <th> </th><th>28</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>29</th><td class="r"><ins>echo "test : p1 = $1"</ins> </td>
                  </tr><tr>
                          <th> </th><th>30</th><td class="r"><ins>echo "test : p2 = $2"</ins> </td>
                  </tr><tr>
                          <th> </th><th>31</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>32</th><td class="r"><ins># copy parameters file from DAKOTA into working directory</ins> </td>
                  </tr><tr>
                          <th> </th><th>33</th><td class="r"><ins>cp $1 workdir/params.in</ins> </td>
                  </tr><tr>
                          <th> </th><th>34</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>35</th><td class="r"><ins># copy any necessary .sci files and data files into workdir</ins> </td>
                  </tr><tr>
                          <th> </th><th>36</th><td class="r"><ins>cp rosenbrock.sci scilab_rosen_wrapper.sci workdir</ins> </td>
                  </tr><tr>
                          <th> </th><th>37</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>38</th><td class="r"><ins># -------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>39</th><td class="r"><ins># RUN the simulation from workdir</ins> </td>
                  </tr><tr>
                          <th> </th><th>40</th><td class="r"><ins># -------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>41</th><td class="r"><ins># launch Scilab with command mode (-r)</ins> </td>
                  </tr><tr>
                          <th> </th><th>42</th><td class="r"><ins># scilab_rosen_wrapper.sci will call the actual analysis file</ins> </td>
                  </tr><tr>
                          <th> </th><th>43</th><td class="r"><ins># rosenbrock.sci</ins> </td>
                  </tr><tr>
                          <th> </th><th>44</th><td class="r"><ins>cd workdir</ins> </td>
                  </tr><tr>
                          <th> </th><th>45</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>46</th><td class="r"><ins>echo scilab -nwni -e "exec scilab_rosen_wrapper.sci; scilab_rosen_wrapper('params.in', 'results.out'); exit"</ins> </td>
                  </tr><tr>
                          <th> </th><th>47</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>48</th><td class="r"><ins>/home/yann/Programmes/scilab-5.3.1/bin/scilab -nwni -e "exec scilab_rosen_wrapper.sci; scilab_rosen_wrapper('params.in', 'results.out'); exit"</ins> </td>
                  </tr><tr>
                          <th> </th><th>49</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>50</th><td class="r"><ins># *** --&gt; The 'exit' command is crucial so Scilab will exit after running</ins> </td>
                  </tr><tr>
                          <th> </th><th>51</th><td class="r"><ins>#&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;the analysis!</ins> </td>
                  </tr><tr>
                          <th> </th><th>52</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>53</th><td class="r"><ins># -------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>54</th><td class="r"><ins># write results.out and cleanup</ins> </td>
                  </tr><tr>
                          <th> </th><th>55</th><td class="r"><ins># -------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>56</th><td class="r"><ins>mv results.out ../$2 </ins> </td>
                  </tr><tr>
                          <th> </th><th>57</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>58</th><td class="r"><ins>cd ..</ins> </td>
                  </tr><tr>
                          <th> </th><th>59</th><td class="r"><ins>\rm -rf workdir</ins> </td>
                  </tr><tr>
                          <th> </th><th>60</th><td class="r"><ins></ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>61</th><td class="r"><ins></ins> </td>
                  </tr>
            </tbody>
        </table>
      </li>
      <li class="entry">
        <h2>
          <a>FemTRUSS/bridge_optim_derivative.sce</a>
        </h2>
        <pre>
Modification de propriÃ©tÃ©s sur Rosenbrock/scilab_rosen_bb_simulator.sh
___________________________________________________________________
AjoutÃ©Â : svn:executable
   + *
</pre>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="File FemTRUSS/bridge_optim_derivative.sce (rÃ©vision 0)">
                  </th>
                  <th title="File FemTRUSS/bridge_optim_derivative.sce (rÃ©vision 0)">
                  </th>
                  <td><em></em> </td>
                </tr>
              </thead>
            <tbody class="add">
                  <tr class="first">
                          <th> </th><th>1</th><td class="r"><ins>lines(0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>2</th><td class="r"><ins>warning_old = warning('query');</ins> </td>
                  </tr><tr>
                          <th> </th><th>3</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>4</th><td class="r"><ins>Order = 4; // 1 2 or 4 for derivative</ins> </td>
                  </tr><tr>
                          <th> </th><th>5</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>6</th><td class="r"><ins>femtruss_path = get_absolute_file_path('bridge_optim_derivative.sce');</ins> </td>
                  </tr><tr>
                          <th> </th><th>7</th><td class="r"><ins>exec(femtruss_path + 'build_long_bridge_2d.sce');</ins> </td>
                  </tr><tr>
                          <th> </th><th>8</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>9</th><td class="r"><ins>function y = fobj_truss(x)</ins> </td>
                  </tr><tr>
                          <th> </th><th>10</th><td class="r"><ins>[t,p,e,A,E,rho,F] = bridge_optim(x);</ins> </td>
                  </tr><tr>
                          <th> </th><th>11</th><td class="r"><ins>[U,P,R]= femtruss(bridge_optim, %F, x);</ins> </td>
                  </tr><tr>
                          <th> </th><th>12</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>13</th><td class="r"><ins>// The deck of the bridge is in IndexNodeVarInf</ins> </td>
                  </tr><tr>
                          <th> </th><th>14</th><td class="r"><ins>y = sqrt(sum(U(2*(IndexNodeVarInf-1)+2).^2));</ins> </td>
                  </tr><tr>
                          <th> </th><th>15</th><td class="r"><ins>endfunction</ins> </td>
                  </tr><tr>
                          <th> </th><th>16</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>17</th><td class="r"><ins>function dy = dfobj_truss(x)</ins> </td>
                  </tr><tr>
                          <th> </th><th>18</th><td class="r"><ins>dy = derivative(fobj_truss,x,order=Order)';</ins> </td>
                  </tr><tr>
                          <th> </th><th>19</th><td class="r"><ins>endfunction</ins> </td>
                  </tr><tr>
                          <th> </th><th>20</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>21</th><td class="r"><ins>function [y, dy, ind] = optim_fobj_truss(x, ind)</ins> </td>
                  </tr><tr>
                          <th> </th><th>22</th><td class="r"><ins>y&nbsp; = fobj_truss(x);</ins> </td>
                  </tr><tr>
                          <th> </th><th>23</th><td class="r"><ins>dy = dfobj_truss(x)';</ins> </td>
                  </tr><tr>
                          <th> </th><th>24</th><td class="r"><ins>endfunction</ins> </td>
                  </tr><tr>
                          <th> </th><th>25</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>26</th><td class="r"><ins>////////////////////////////////////////////</ins> </td>
                  </tr><tr>
                          <th> </th><th>27</th><td class="r"><ins>// Parameters for the optimization method //</ins> </td>
                  </tr><tr>
                          <th> </th><th>28</th><td class="r"><ins>////////////////////////////////////////////</ins> </td>
                  </tr><tr>
                          <th> </th><th>29</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>30</th><td class="r"><ins>MaxEvalFunc = 400;</ins> </td>
                  </tr><tr>
                          <th> </th><th>31</th><td class="r"><ins>Algorithm&nbsp; &nbsp;= 'gc'; // 'qn', 'gc', 'nd' -&gt; Ne marche qu'avec 'qn' (quasi-newton). Pour les autres, on obtient rapidement une structure mal</ins> </td>
                  </tr><tr>
                          <th> </th><th>32</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // conditionnee</ins> </td>
                  </tr><tr>
                          <th> </th><th>33</th><td class="r"><ins>Log&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= %F;</ins> </td>
                  </tr><tr>
                          <th> </th><th>34</th><td class="r"><ins>TOL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 1.0e-6; // accuracy for convergence test (minimum)</ins> </td>
                  </tr><tr>
                          <th> </th><th>35</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>36</th><td class="r"><ins>//////////////////////////////</ins> </td>
                  </tr><tr>
                          <th> </th><th>37</th><td class="r"><ins>// Main part of the problem //</ins> </td>
                  </tr><tr>
                          <th> </th><th>38</th><td class="r"><ins>//////////////////////////////</ins> </td>
                  </tr><tr>
                          <th> </th><th>39</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>40</th><td class="r"><ins>printf('optimization starting, be patient ... \n\n');</ins> </td>
                  </tr><tr>
                          <th> </th><th>41</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>42</th><td class="r"><ins>[f_opt, x_opt] = optim(optim_fobj_truss, x0, algo=Algorithm,'ar',MaxEvalFunc,MaxEvalFunc,TOL,TOL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>43</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>44</th><td class="r"><ins>printf('initial solution:'); disp(x0');</ins> </td>
                  </tr><tr>
                          <th> </th><th>45</th><td class="r"><ins>printf('initial objective function value = %f\n',fobj_truss(x0));</ins> </td>
                  </tr><tr>
                          <th> </th><th>46</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>47</th><td class="r"><ins>printf('Final solution:'); disp(x_opt');</ins> </td>
                  </tr><tr>
                          <th> </th><th>48</th><td class="r"><ins>printf('Final objective function value = %f\n',fobj_truss(x_opt));</ins> </td>
                  </tr><tr>
                          <th> </th><th>49</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>50</th><td class="r"><ins>scf();</ins> </td>
                  </tr><tr>
                          <th> </th><th>51</th><td class="r"><ins>plot_fobj_truss(x0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>52</th><td class="r"><ins>xtitle('Before optimization','x','y');</ins> </td>
                  </tr><tr>
                          <th> </th><th>53</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>54</th><td class="r"><ins>scf();</ins> </td>
                  </tr><tr>
                          <th> </th><th>55</th><td class="r"><ins>plot_fobj_truss(x_opt);</ins> </td>
                  </tr><tr>
                          <th> </th><th>56</th><td class="r"><ins>xtitle('After optimization','x','y');</ins> </td>
                  </tr><tr>
                          <th> </th><th>57</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>58</th><td class="r"><ins>warning(warning_old);</ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>59</th><td class="r"><ins></ins> </td>
                  </tr>
            </tbody>
        </table>
      </li>
      <li class="entry">
        <h2>
          <a>FemTRUSS/scilab_rosen_wrapper.sci</a>
        </h2>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="File FemTRUSS/scilab_rosen_wrapper.sci (rÃ©vision 0)">
                  </th>
                  <th title="File FemTRUSS/scilab_rosen_wrapper.sci (rÃ©vision 0)">
                  </th>
                  <td><em></em> </td>
                </tr>
              </thead>
            <tbody class="add">
                  <tr class="first">
                          <th> </th><th>1</th><td class="r"><ins>// scilab_rosen_wrapper.sci</ins> </td>
                  </tr><tr>
                          <th> </th><th>2</th><td class="r"><ins>function scilab_rosen_wrapper(params,results)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>4</th><td class="r"><ins>exec('f.sci');</ins> </td>
                  </tr><tr>
                          <th> </th><th>5</th><td class="r"><ins>exec('fp.sci');</ins> </td>
                  </tr><tr>
                          <th> </th><th>6</th><td class="r"><ins>exec('build_long_bridge_2d.sce');</ins> </td>
                  </tr><tr>
                          <th> </th><th>7</th><td class="r"><ins>exec('bridge_optim_derivative.sce');</ins> </td>
                  </tr><tr>
                          <th> </th><th>8</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>9</th><td class="r"><ins>//--------------------------------------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>10</th><td class="r"><ins>// Set any fixed/default values needed for your analysis .sci code</ins> </td>
                  </tr><tr>
                          <th> </th><th>11</th><td class="r"><ins>//--------------------------------------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>12</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>13</th><td class="r"><ins>//alpha = 100;</ins> </td>
                  </tr><tr>
                          <th> </th><th>14</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>15</th><td class="r"><ins>//------------------------------------------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>16</th><td class="r"><ins>// READ params.in (or params.in.num) from DAKOTA and set Scilab variables</ins> </td>
                  </tr><tr>
                          <th> </th><th>17</th><td class="r"><ins>//</ins> </td>
                  </tr><tr>
                          <th> </th><th>18</th><td class="r"><ins>// read params.in (no aprepro) -- just one param per line</ins> </td>
                  </tr><tr>
                          <th> </th><th>19</th><td class="r"><ins>//------------------------------------------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>20</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>21</th><td class="r"><ins>fid = mopen(params,'r');</ins> </td>
                  </tr><tr>
                          <th> </th><th>22</th><td class="r"><ins>C = mgetl(fid,-1);</ins> </td>
                  </tr><tr>
                          <th> </th><th>23</th><td class="r"><ins>mclose(fid);</ins> </td>
                  </tr><tr>
                          <th> </th><th>24</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>25</th><td class="r"><ins>// set design variables -- could use vector notation</ins> </td>
                  </tr><tr>
                          <th> </th><th>26</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>27</th><td class="r"><ins>Line = tokens(C(2),' '); x(1) = eval(Line(1)); disp(x(1));</ins> </td>
                  </tr><tr>
                          <th> </th><th>28</th><td class="r"><ins>Line = tokens(C(3),' '); x(2) = eval(Line(1)); disp(x(2));</ins> </td>
                  </tr><tr>
                          <th> </th><th>29</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>30</th><td class="r"><ins>//------------------------------------------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>31</th><td class="r"><ins>// CALL your analysis code to get the function value</ins> </td>
                  </tr><tr>
                          <th> </th><th>32</th><td class="r"><ins>//------------------------------------------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>33</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>34</th><td class="r"><ins>f = f(x);</ins> </td>
                  </tr><tr>
                          <th> </th><th>35</th><td class="r"><ins>f2 = fp(x);</ins> </td>
                  </tr><tr>
                          <th> </th><th>36</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>37</th><td class="r"><ins>//------------------------------------------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>38</th><td class="r"><ins>// WRITE results.out</ins> </td>
                  </tr><tr>
                          <th> </th><th>39</th><td class="r"><ins>//------------------------------------------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>40</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>41</th><td class="r"><ins>fid = mopen(results,'w');</ins> </td>
                  </tr><tr>
                          <th> </th><th>42</th><td class="r"><ins>mfprintf(fid,'%20.10e&nbsp; &nbsp; &nbsp;f\n', f);</ins> </td>
                  </tr><tr>
                          <th> </th><th>43</th><td class="r"><ins>mclose(fid);</ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>44</th><td class="r"><ins>endfunction</ins> </td>
                  </tr>
            </tbody>
        </table>
      </li>
      <li class="entry">
        <h2>
          <a>FemTRUSS/build_long_bridge_3d_good.sce</a>
        </h2>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="File FemTRUSS/build_long_bridge_3d_good.sce (rÃ©vision 0)">
                  </th>
                  <th title="File FemTRUSS/build_long_bridge_3d_good.sce (rÃ©vision 0)">
                  </th>
                  <td><em></em> </td>
                </tr>
              </thead>
            <tbody class="add">
                  <tr class="first">
                          <th> </th><th>1</th><td class="r"><ins>lines(0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>2</th><td class="r"><ins>warning_old = warning('query');</ins> </td>
                  </tr><tr>
                          <th> </th><th>3</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>4</th><td class="r"><ins>NbBlocs = 8; // The number of blocks for the bridge.</ins> </td>
                  </tr><tr>
                          <th> </th><th>5</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>6</th><td class="r"><ins>global IndexNodeVarSup;</ins> </td>
                  </tr><tr>
                          <th> </th><th>7</th><td class="r"><ins>global IndexNodeVarInf;</ins> </td>
                  </tr><tr>
                          <th> </th><th>8</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>9</th><td class="r"><ins>IndexNodeVarSup = []; // This list will handles the number of the nodes we are allowed to move</ins> </td>
                  </tr><tr>
                          <th> </th><th>10</th><td class="r"><ins>IndexNodeVarInf = []; // This list will handles the number of the nodes where we compute the deformation of the deck of the bridge</ins> </td>
                  </tr><tr>
                          <th> </th><th>11</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>12</th><td class="r"><ins>// Definition of the initial solution. Depends on the number of blocks</ins> </td>
                  </tr><tr>
                          <th> </th><th>13</th><td class="r"><ins>x0 = zeros(2*NbBlocs+2,3);</ins> </td>
                  </tr><tr>
                          <th> </th><th>14</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>15</th><td class="r"><ins>//IndexNodeVarSup = [IndexNodeVarSup 4*(i-1)+3+5 4*(i-1)+3+7];</ins> </td>
                  </tr><tr>
                          <th> </th><th>16</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>17</th><td class="r"><ins>NbPts = size(x0(1:2:$,1),1);</ins> </td>
                  </tr><tr>
                          <th> </th><th>18</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>19</th><td class="r"><ins>// i+1 1 0;&nbsp; // 4*(i-1)+3+5</ins> </td>
                  </tr><tr>
                          <th> </th><th>20</th><td class="r"><ins>x0(1:2:$,1) = (1:NbPts)';</ins> </td>
                  </tr><tr>
                          <th> </th><th>21</th><td class="r"><ins>x0(1:2:$,2) = 1;</ins> </td>
                  </tr><tr>
                          <th> </th><th>22</th><td class="r"><ins>x0(1:2:$,3) = 0;</ins> </td>
                  </tr><tr>
                          <th> </th><th>23</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>24</th><td class="r"><ins>// i+1 1 1]; // 4*(i-1)+3+7</ins> </td>
                  </tr><tr>
                          <th> </th><th>25</th><td class="r"><ins>x0(2:2:$,1) = (1:NbPts)';</ins> </td>
                  </tr><tr>
                          <th> </th><th>26</th><td class="r"><ins>x0(2:2:$,2) = 1;</ins> </td>
                  </tr><tr>
                          <th> </th><th>27</th><td class="r"><ins>x0(2:2:$,3) = 1;</ins> </td>
                  </tr><tr>
                          <th> </th><th>28</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>29</th><td class="r"><ins>x0 = matrix(x0',length(x0),1);</ins> </td>
                  </tr><tr>
                          <th> </th><th>30</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>31</th><td class="r"><ins>function [t,p,e,A,E,rho,F] = bridge_optim_3d(x)</ins> </td>
                  </tr><tr>
                          <th> </th><th>32</th><td class="r"><ins>global IndexNodeVarSup;</ins> </td>
                  </tr><tr>
                          <th> </th><th>33</th><td class="r"><ins>global IndexNodeVarInf;</ins> </td>
                  </tr><tr>
                          <th> </th><th>34</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>35</th><td class="r"><ins>// t : donnees en lignes regroupees par 2 (connection extremite 1 - connection extremite 2)</ins> </td>
                  </tr><tr>
                          <th> </th><th>36</th><td class="r"><ins>// p : autant de lignes que de noeuds. Sur chaque ligne n on retrouve les coordonnees 2d du noeud n</ins> </td>
                  </tr><tr>
                          <th> </th><th>37</th><td class="r"><ins>// e : liste des noeuds d'appui</ins> </td>
                  </tr><tr>
                          <th> </th><th>38</th><td class="r"><ins>// A : liste des sections des elements. Vecteur contenant autant d'entrees que d'elements</ins> </td>
                  </tr><tr>
                          <th> </th><th>39</th><td class="r"><ins>// E : liste des modules d'elasticite des elements. Vecteur contenant autant d'entrees que d'elements</ins> </td>
                  </tr><tr>
                          <th> </th><th>40</th><td class="r"><ins>// rho : liste des masses volumiques des elements. Vecteur contenant autant d'entrees que d'elements</ins> </td>
                  </tr><tr>
                          <th> </th><th>41</th><td class="r"><ins>// F&nbsp; &nbsp;: liste des forces appliquees aux noeuds. Vecteur colonne comprenant la coordonnes X du noeud 1 en premiere ligne, la coordonnees Y du noeud 1 en seconde </ins> </td>
                  </tr><tr>
                          <th> </th><th>42</th><td class="r"><ins>//&nbsp; &nbsp; &nbsp; &nbsp;ligne, etc ...</ins> </td>
                  </tr><tr>
                          <th> </th><th>43</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>44</th><td class="r"><ins>IndexNodeVarSup = [];</ins> </td>
                  </tr><tr>
                          <th> </th><th>45</th><td class="r"><ins>IndexNodeVarInf = [];</ins> </td>
                  </tr><tr>
                          <th> </th><th>46</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>47</th><td class="r"><ins>//&nbsp; &nbsp; &nbsp; 4&nbsp; &nbsp; &nbsp; &nbsp;6</ins> </td>
                  </tr><tr>
                          <th> </th><th>48</th><td class="r"><ins>//&nbsp; &nbsp; &nbsp; +&nbsp; &nbsp; &nbsp; &nbsp;+</ins> </td>
                  </tr><tr>
                          <th> </th><th>49</th><td class="r"><ins>//&nbsp; &nbsp; &nbsp;/&nbsp; &nbsp; &nbsp; &nbsp;/</ins> </td>
                  </tr><tr>
                          <th> </th><th>50</th><td class="r"><ins>//&nbsp; &nbsp; /&nbsp; &nbsp; &nbsp; &nbsp;/ </ins> </td>
                  </tr><tr>
                          <th> </th><th>51</th><td class="r"><ins>//&nbsp; &nbsp;/&nbsp; &nbsp; &nbsp; &nbsp;/&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>52</th><td class="r"><ins>// -+---+&nbsp; -+---+</ins> </td>
                  </tr><tr>
                          <th> </th><th>53</th><td class="r"><ins>//&nbsp; |1&nbsp; 3&nbsp; &nbsp;|2&nbsp; 5</ins> </td>
                  </tr><tr>
                          <th> </th><th>54</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>55</th><td class="r"><ins>p = [0 0 0;</ins> </td>
                  </tr><tr>
                          <th> </th><th>56</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;0 0 1;</ins> </td>
                  </tr><tr>
                          <th> </th><th>57</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;1 0 0;</ins> </td>
                  </tr><tr>
                          <th> </th><th>58</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;1 1 0;</ins> </td>
                  </tr><tr>
                          <th> </th><th>59</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;1 0 1;</ins> </td>
                  </tr><tr>
                          <th> </th><th>60</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;1 1 1];</ins> </td>
                  </tr><tr>
                          <th> </th><th>61</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>62</th><td class="r"><ins>t = [1 3;</ins> </td>
                  </tr><tr>
                          <th> </th><th>63</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;1 4;</ins> </td>
                  </tr><tr>
                          <th> </th><th>64</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;2 5;</ins> </td>
                  </tr><tr>
                          <th> </th><th>65</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;2 6;</ins> </td>
                  </tr><tr>
                          <th> </th><th>66</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;1 2;</ins> </td>
                  </tr><tr>
                          <th> </th><th>67</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;3 5;</ins> </td>
                  </tr><tr>
                          <th> </th><th>68</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;4 6;</ins> </td>
                  </tr><tr>
                          <th> </th><th>69</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;1 5;</ins> </td>
                  </tr><tr>
                          <th> </th><th>70</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;2 3;</ins> </td>
                  </tr><tr>
                          <th> </th><th>71</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;3 6;</ins> </td>
                  </tr><tr>
                          <th> </th><th>72</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;4 5];</ins> </td>
                  </tr><tr>
                          <th> </th><th>73</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>74</th><td class="r"><ins>IndexNodeVarSup = [4 6];</ins> </td>
                  </tr><tr>
                          <th> </th><th>75</th><td class="r"><ins>IndexNodeVarInf = [3 5];</ins> </td>
                  </tr><tr>
                          <th> </th><th>76</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>77</th><td class="r"><ins>for i=1:NbBlocs</ins> </td>
                  </tr><tr>
                          <th> </th><th>78</th><td class="r"><ins>&nbsp; //&nbsp; 4*(i-1)+3+1 4*(i-1)+3+5&nbsp; 4*(i-1)+3+3 4*(i-1)+3+7&nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>79</th><td class="r"><ins>&nbsp; //&nbsp; +----+&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; +----+</ins> </td>
                  </tr><tr>
                          <th> </th><th>80</th><td class="r"><ins>&nbsp; //&nbsp; |\&nbsp; /&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|\&nbsp; /</ins> </td>
                  </tr><tr>
                          <th> </th><th>81</th><td class="r"><ins>&nbsp; //&nbsp; | /\&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | /\ </ins> </td>
                  </tr><tr>
                          <th> </th><th>82</th><td class="r"><ins>&nbsp; //&nbsp; |/&nbsp; \&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|/&nbsp; \</ins> </td>
                  </tr><tr>
                          <th> </th><th>83</th><td class="r"><ins>&nbsp; //&nbsp; +----+&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; +----+</ins> </td>
                  </tr><tr>
                          <th> </th><th>84</th><td class="r"><ins>&nbsp; //&nbsp; 4*(i-1)+3+0 4*(i-1)+3+4&nbsp; 4*(i-1)+3+2 4*(i-1)+3+6</ins> </td>
                  </tr><tr>
                          <th> </th><th>85</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>86</th><td class="r"><ins>&nbsp; p = [p; </ins> </td>
                  </tr><tr>
                          <th> </th><th>87</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;i+1 0 0;&nbsp; // 4*(i-1)+3+4</ins> </td>
                  </tr><tr>
                          <th> </th><th>88</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;i+1 1 0;&nbsp; // 4*(i-1)+3+5</ins> </td>
                  </tr><tr>
                          <th> </th><th>89</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;i+1 0 1;&nbsp; // 4*(i-1)+3+6</ins> </td>
                  </tr><tr>
                          <th> </th><th>90</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;i+1 1 1]; // 4*(i-1)+3+7</ins> </td>
                  </tr><tr>
                          <th> </th><th>91</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>92</th><td class="r"><ins>&nbsp; t = [t; </ins> </td>
                  </tr><tr>
                          <th> </th><th>93</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;4*(i-1)+3+0 4*(i-1)+3+4; // First face</ins> </td>
                  </tr><tr>
                          <th> </th><th>94</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;4*(i-1)+3+1 4*(i-1)+3+5;</ins> </td>
                  </tr><tr>
                          <th> </th><th>95</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;4*(i-1)+3+0 4*(i-1)+3+1;</ins> </td>
                  </tr><tr>
                          <th> </th><th>96</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;4*(i-1)+3+0 4*(i-1)+3+5;</ins> </td>
                  </tr><tr>
                          <th> </th><th>97</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;4*(i-1)+3+1 4*(i-1)+3+4;</ins> </td>
                  </tr><tr>
                          <th> </th><th>98</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;4*(i-1)+3+2 4*(i-1)+3+6; // Second face</ins> </td>
                  </tr><tr>
                          <th> </th><th>99</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;4*(i-1)+3+3 4*(i-1)+3+7;</ins> </td>
                  </tr><tr>
                          <th> </th><th>100</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;4*(i-1)+3+2 4*(i-1)+3+3;</ins> </td>
                  </tr><tr>
                          <th> </th><th>101</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;4*(i-1)+3+3 4*(i-1)+3+6;</ins> </td>
                  </tr><tr>
                          <th> </th><th>102</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;4*(i-1)+3+2 4*(i-1)+3+7;</ins> </td>
                  </tr><tr>
                          <th> </th><th>103</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;4*(i-1)+3+1 4*(i-1)+3+7; // Above cross</ins> </td>
                  </tr><tr>
                          <th> </th><th>104</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;4*(i-1)+3+3 4*(i-1)+3+5;</ins> </td>
                  </tr><tr>
                          <th> </th><th>105</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;4*(i-1)+3+0 4*(i-1)+3+6; // Below cross</ins> </td>
                  </tr><tr>
                          <th> </th><th>106</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;4*(i-1)+3+4 4*(i-1)+3+2;</ins> </td>
                  </tr><tr>
                          <th> </th><th>107</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;4*(i-1)+3+4 4*(i-1)+3+7; // Cross inside</ins> </td>
                  </tr><tr>
                          <th> </th><th>108</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;4*(i-1)+3+5 4*(i-1)+3+6];</ins> </td>
                  </tr><tr>
                          <th> </th><th>109</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>110</th><td class="r"><ins>&nbsp; IndexNodeVarSup = [IndexNodeVarSup 4*(i-1)+3+5 4*(i-1)+3+7];</ins> </td>
                  </tr><tr>
                          <th> </th><th>111</th><td class="r"><ins>&nbsp; IndexNodeVarInf = [IndexNodeVarInf 4*(i-1)+3+4 4*(i-1)+3+6];</ins> </td>
                  </tr><tr>
                          <th> </th><th>112</th><td class="r"><ins>end</ins> </td>
                  </tr><tr>
                          <th> </th><th>113</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>114</th><td class="r"><ins>//&nbsp; 4*(i-1)+1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;4*(i-1)+3&nbsp; &nbsp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>115</th><td class="r"><ins>//&nbsp; +&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; +&nbsp; &nbsp; &nbsp; &nbsp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>116</th><td class="r"><ins>//&nbsp; &nbsp;\&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \&nbsp; &nbsp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>117</th><td class="r"><ins>//&nbsp; &nbsp; \&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \</ins> </td>
                  </tr><tr>
                          <th> </th><th>118</th><td class="r"><ins>//&nbsp; &nbsp; &nbsp;\&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \ </ins> </td>
                  </tr><tr>
                          <th> </th><th>119</th><td class="r"><ins>// +---+&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+---+</ins> </td>
                  </tr><tr>
                          <th> </th><th>120</th><td class="r"><ins>// 4*(i-1)+0 4*i(i-1)4&nbsp; &nbsp; &nbsp; 4*(i-1)+2 4*(i-1)+5</ins> </td>
                  </tr><tr>
                          <th> </th><th>121</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>122</th><td class="r"><ins>p = [p; </ins> </td>
                  </tr><tr>
                          <th> </th><th>123</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;NbBlocs+2 0 0;</ins> </td>
                  </tr><tr>
                          <th> </th><th>124</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;NbBlocs+2 0 1;];</ins> </td>
                  </tr><tr>
                          <th> </th><th>125</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>126</th><td class="r"><ins>t = [t;</ins> </td>
                  </tr><tr>
                          <th> </th><th>127</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;4*(NbBlocs)+3+0 4*(NbBlocs)+3+1;</ins> </td>
                  </tr><tr>
                          <th> </th><th>128</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;4*(NbBlocs)+3+2 4*(NbBlocs)+3+3;</ins> </td>
                  </tr><tr>
                          <th> </th><th>129</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;4*(NbBlocs)+3+0 4*(NbBlocs)+3+4;</ins> </td>
                  </tr><tr>
                          <th> </th><th>130</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;4*(NbBlocs)+3+2 4*(NbBlocs)+3+5;</ins> </td>
                  </tr><tr>
                          <th> </th><th>131</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;4*(NbBlocs)+3+1 4*(NbBlocs)+3+4;</ins> </td>
                  </tr><tr>
                          <th> </th><th>132</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;4*(NbBlocs)+3+3 4*(NbBlocs)+3+5;</ins> </td>
                  </tr><tr>
                          <th> </th><th>133</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;4*(NbBlocs)+3+4 4*(NbBlocs)+3+5;</ins> </td>
                  </tr><tr>
                          <th> </th><th>134</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;4*(NbBlocs)+3+0 4*(NbBlocs)+3+5;</ins> </td>
                  </tr><tr>
                          <th> </th><th>135</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;4*(NbBlocs)+3+2 4*(NbBlocs)+3+4]</ins> </td>
                  </tr><tr>
                          <th> </th><th>136</th><td class="r"><ins>&nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>137</th><td class="r"><ins>e = [</ins> </td>
                  </tr><tr>
                          <th> </th><th>138</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;[1, 1, 1] .* localise3d(1);</ins> </td>
                  </tr><tr>
                          <th> </th><th>139</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;[1, 1, 1] .* localise3d(2);</ins> </td>
                  </tr><tr>
                          <th> </th><th>140</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;[1, 1, 1] .* localise3d(4*NbBlocs+3+4);</ins> </td>
                  </tr><tr>
                          <th> </th><th>141</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;[1, 1, 1] .* localise3d(4*NbBlocs+3+5);</ins> </td>
                  </tr><tr>
                          <th> </th><th>142</th><td class="r"><ins>&nbsp; &nbsp; ]; </ins> </td>
                  </tr><tr>
                          <th> </th><th>143</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>144</th><td class="r"><ins>A&nbsp; &nbsp;= ones(1,size(t,1)) * 25e-4; // sections des elements</ins> </td>
                  </tr><tr>
                          <th> </th><th>145</th><td class="r"><ins>E&nbsp; &nbsp;= ones(1,size(t,1)) * 210e9; // module d'elasticite des elements </ins> </td>
                  </tr><tr>
                          <th> </th><th>146</th><td class="r"><ins>rho = ones(1,size(t,1)) * 7.8e3; // masse volumique des elements</ins> </td>
                  </tr><tr>
                          <th> </th><th>147</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>148</th><td class="r"><ins>F = zeros(length(p),1);</ins> </td>
                  </tr><tr>
                          <th> </th><th>149</th><td class="r"><ins>F(3*(IndexNodeVarInf-1)+2) = -3.4e5;</ins> </td>
                  </tr><tr>
                          <th> </th><th>150</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>151</th><td class="r"><ins>p(IndexNodeVarSup,1) = x(1:3:$);</ins> </td>
                  </tr><tr>
                          <th> </th><th>152</th><td class="r"><ins>p(IndexNodeVarSup,2) = x(2:3:$);</ins> </td>
                  </tr><tr>
                          <th> </th><th>153</th><td class="r"><ins>p(IndexNodeVarSup,3) = x(3:3:$);</ins> </td>
                  </tr><tr>
                          <th> </th><th>154</th><td class="r"><ins>endfunction</ins> </td>
                  </tr><tr>
                          <th> </th><th>155</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>156</th><td class="r"><ins>function plot_fobj_truss(x)</ins> </td>
                  </tr><tr>
                          <th> </th><th>157</th><td class="r"><ins>[t,p,e,A,E,rho,F] = bridge_optim_3d(x);</ins> </td>
                  </tr><tr>
                          <th> </th><th>158</th><td class="r"><ins>[U,P,R]= femtruss(bridge_optim_3d, %F, x);</ins> </td>
                  </tr><tr>
                          <th> </th><th>159</th><td class="r"><ins>plotdeforme(U,p,t,10);</ins> </td>
                  </tr><tr>
                          <th> </th><th>160</th><td class="r"><ins>endfunction</ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>161</th><td class="r"><ins></ins> </td>
                  </tr>
            </tbody>
        </table>
      </li>
      <li class="entry">
        <h2>
          <a>FemTRUSS/bridge_optim_derivative_init.sce</a>
        </h2>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="File FemTRUSS/bridge_optim_derivative_init.sce (rÃ©vision 0)">
                  </th>
                  <th title="File FemTRUSS/bridge_optim_derivative_init.sce (rÃ©vision 0)">
                  </th>
                  <td><em></em> </td>
                </tr>
              </thead>
            <tbody class="add">
                  <tr class="first">
                          <th> </th><th>1</th><td class="r"><ins>lines(0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>2</th><td class="r"><ins>warning_old = warning('query');</ins> </td>
                  </tr><tr>
                          <th> </th><th>3</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>4</th><td class="r"><ins>Order = 4; // 1 2 or 4 for derivative</ins> </td>
                  </tr><tr>
                          <th> </th><th>5</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>6</th><td class="r"><ins>femtruss_path = get_absolute_file_path('bridge_optim_derivative.sce');</ins> </td>
                  </tr><tr>
                          <th> </th><th>7</th><td class="r"><ins>exec(femtruss_path + 'build_long_bridge_2d.sce');</ins> </td>
                  </tr><tr>
                          <th> </th><th>8</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>9</th><td class="r"><ins>function y = fobj_truss(x)</ins> </td>
                  </tr><tr>
                          <th> </th><th>10</th><td class="r"><ins>[t,p,e,A,E,rho,F] = bridge_optim(x);</ins> </td>
                  </tr><tr>
                          <th> </th><th>11</th><td class="r"><ins>[U,P,R]= femtruss(bridge_optim, %F, x);</ins> </td>
                  </tr><tr>
                          <th> </th><th>12</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>13</th><td class="r"><ins>// The deck of the bridge is in IndexNodeVarInf</ins> </td>
                  </tr><tr>
                          <th> </th><th>14</th><td class="r"><ins>y = sqrt(sum(U(2*(IndexNodeVarInf-1)+2).^2));</ins> </td>
                  </tr><tr>
                          <th> </th><th>15</th><td class="r"><ins>endfunction</ins> </td>
                  </tr><tr>
                          <th> </th><th>16</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>17</th><td class="r"><ins>function dy = dfobj_truss(x)</ins> </td>
                  </tr><tr>
                          <th> </th><th>18</th><td class="r"><ins>dy = derivative(fobj_truss,x,order=Order)';</ins> </td>
                  </tr><tr>
                          <th> </th><th>19</th><td class="r"><ins>endfunction</ins> </td>
                  </tr><tr>
                          <th> </th><th>20</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>21</th><td class="r"><ins>function [y, dy, ind] = optim_fobj_truss(x, ind)</ins> </td>
                  </tr><tr>
                          <th> </th><th>22</th><td class="r"><ins>y&nbsp; = fobj_truss(x);</ins> </td>
                  </tr><tr>
                          <th> </th><th>23</th><td class="r"><ins>dy = dfobj_truss(x)';</ins> </td>
                  </tr><tr>
                          <th> </th><th>24</th><td class="r"><ins>endfunction</ins> </td>
                  </tr><tr>
                          <th> </th><th>25</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>26</th><td class="r"><ins>////////////////////////////////////////////</ins> </td>
                  </tr><tr>
                          <th> </th><th>27</th><td class="r"><ins>// Parameters for the optimization method //</ins> </td>
                  </tr><tr>
                          <th> </th><th>28</th><td class="r"><ins>////////////////////////////////////////////</ins> </td>
                  </tr><tr>
                          <th> </th><th>29</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>30</th><td class="r"><ins>MaxEvalFunc = 400;</ins> </td>
                  </tr><tr>
                          <th> </th><th>31</th><td class="r"><ins>Algorithm&nbsp; &nbsp;= 'gc'; // 'qn', 'gc', 'nd' -&gt; Ne marche qu'avec 'qn' (quasi-newton). Pour les autres, on obtient rapidement une structure mal</ins> </td>
                  </tr><tr>
                          <th> </th><th>32</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // conditionnee</ins> </td>
                  </tr><tr>
                          <th> </th><th>33</th><td class="r"><ins>Log&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= %F;</ins> </td>
                  </tr><tr>
                          <th> </th><th>34</th><td class="r"><ins>TOL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= 1.0e-6; // accuracy for convergence test (minimum)</ins> </td>
                  </tr><tr>
                          <th> </th><th>35</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>36</th><td class="r"><ins>//////////////////////////////</ins> </td>
                  </tr><tr>
                          <th> </th><th>37</th><td class="r"><ins>// Main part of the problem //</ins> </td>
                  </tr><tr>
                          <th> </th><th>38</th><td class="r"><ins>//////////////////////////////</ins> </td>
                  </tr><tr>
                          <th> </th><th>39</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>40</th><td class="r"><ins>printf('optimization starting, be patient ... \n\n');</ins> </td>
                  </tr><tr>
                          <th> </th><th>41</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>42</th><td class="r"><ins>[f_opt, x_opt] = optim(optim_fobj_truss, x0, algo=Algorithm,'ar',MaxEvalFunc,MaxEvalFunc,TOL,TOL);</ins> </td>
                  </tr><tr>
                          <th> </th><th>43</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>44</th><td class="r"><ins>printf('initial solution:'); disp(x0');</ins> </td>
                  </tr><tr>
                          <th> </th><th>45</th><td class="r"><ins>printf('initial objective function value = %f\n',fobj_truss(x0));</ins> </td>
                  </tr><tr>
                          <th> </th><th>46</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>47</th><td class="r"><ins>printf('Final solution:'); disp(x_opt');</ins> </td>
                  </tr><tr>
                          <th> </th><th>48</th><td class="r"><ins>printf('Final objective function value = %f\n',fobj_truss(x_opt));</ins> </td>
                  </tr><tr>
                          <th> </th><th>49</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>50</th><td class="r"><ins>scf();</ins> </td>
                  </tr><tr>
                          <th> </th><th>51</th><td class="r"><ins>plot_fobj_truss(x0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>52</th><td class="r"><ins>xtitle('Before optimization','x','y');</ins> </td>
                  </tr><tr>
                          <th> </th><th>53</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>54</th><td class="r"><ins>scf();</ins> </td>
                  </tr><tr>
                          <th> </th><th>55</th><td class="r"><ins>plot_fobj_truss(x_opt);</ins> </td>
                  </tr><tr>
                          <th> </th><th>56</th><td class="r"><ins>xtitle('After optimization','x','y');</ins> </td>
                  </tr><tr>
                          <th> </th><th>57</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>58</th><td class="r"><ins>warning(warning_old);</ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>59</th><td class="r"><ins></ins> </td>
                  </tr>
            </tbody>
        </table>
      </li>
      <li class="entry">
        <h2>
          <a>FemTRUSS/fp.sci</a>
        </h2>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="File FemTRUSS/fp.sci (rÃ©vision 0)">
                  </th>
                  <th title="File FemTRUSS/fp.sci (rÃ©vision 0)">
                  </th>
                  <td><em></em> </td>
                </tr>
              </thead>
            <tbody class="add">
                  <tr class="first">
                          <th> </th><th>1</th><td class="r"><ins>function dy = df(x)</ins> </td>
                  </tr><tr>
                          <th> </th><th>2</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;dy = derivative(fobj_truss,x,order=Order)';</ins> </td>
                  </tr><tr>
                          <th> </th><th>3</th><td class="r"><ins>endfunction</ins> </td>
                  </tr><tr>
                          <th> </th><th>4</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>5</th><td class="r"><ins>//function [y, dy, ind] = optim_fobj_truss(x, ind)</ins> </td>
                  </tr><tr>
                          <th> </th><th>6</th><td class="r"><ins>//y&nbsp; = fobj_truss(x);</ins> </td>
                  </tr><tr>
                          <th> </th><th>7</th><td class="r"><ins>//dy = dfobj_truss(x)';</ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>8</th><td class="r"><ins>//endfunction</ins> </td>
                  </tr>
            </tbody>
        </table>
      </li>
      <li class="entry">
        <h2>
          <a>FemTRUSS/f.sci</a>
        </h2>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="File FemTRUSS/f.sci (rÃ©vision 0)">
                  </th>
                  <th title="File FemTRUSS/f.sci (rÃ©vision 0)">
                  </th>
                  <td><em></em> </td>
                </tr>
              </thead>
            <tbody class="add">
                  <tr class="first">
                          <th> </th><th>1</th><td class="r"><ins>// bridge_optim_derivative.sci</ins> </td>
                  </tr><tr>
                          <th> </th><th>2</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>4</th><td class="r"><ins>function y = f(x)</ins> </td>
                  </tr><tr>
                          <th> </th><th>5</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;[t,p,e,A,E,rho,F] = bridge_optim(x);</ins> </td>
                  </tr><tr>
                          <th> </th><th>6</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;[U,P,R]= femtruss(bridge_optim, %F, x);</ins> </td>
                  </tr><tr>
                          <th> </th><th>7</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>8</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// The deck of the bridge is in IndexNodeVarInf</ins> </td>
                  </tr><tr>
                          <th> </th><th>9</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;y = sqrt(sum(U(2*(IndexNodeVarInf-1)+2).^2));</ins> </td>
                  </tr><tr>
                          <th> </th><th>10</th><td class="r"><ins>endfunction</ins> </td>
                  </tr><tr>
                          <th> </th><th>11</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>12</th><td class="r"><ins>function dy = df(x)</ins> </td>
                  </tr><tr>
                          <th> </th><th>13</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;dy = derivative(fobj_truss,x,order=Order)';</ins> </td>
                  </tr><tr>
                          <th> </th><th>14</th><td class="r"><ins>endfunction</ins> </td>
                  </tr><tr>
                          <th> </th><th>15</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>16</th><td class="r"><ins>//function [y, dy, ind] = optim_fobj_truss(x, ind)</ins> </td>
                  </tr><tr>
                          <th> </th><th>17</th><td class="r"><ins>//y&nbsp; = fobj_truss(x);</ins> </td>
                  </tr><tr>
                          <th> </th><th>18</th><td class="r"><ins>//dy = dfobj_truss(x)';</ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>19</th><td class="r"><ins>//endfunction</ins> </td>
                  </tr>
            </tbody>
        </table>
      </li>
      <li class="entry">
        <h2>
          <a>FemTRUSS/init_bridge_optim_derivative.sce</a>
        </h2>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="File FemTRUSS/init_bridge_optim_derivative.sce (rÃ©vision 0)">
                  </th>
                  <th title="File FemTRUSS/init_bridge_optim_derivative.sce (rÃ©vision 0)">
                  </th>
                  <td><em></em> </td>
                </tr>
              </thead>
            <tbody class="add">
                  <tr class="first">
                          <th> </th><th>1</th><td class="r"><ins>lines(0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>2</th><td class="r"><ins>warning_old = warning('query');</ins> </td>
                  </tr><tr>
                          <th> </th><th>3</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>4</th><td class="r"><ins>femtruss_path = get_absolute_file_path('init_bridge_optim_derivative.sce');</ins> </td>
                  </tr><tr>
                          <th> </th><th>5</th><td class="r"><ins>exec(femtruss_path + 'build_long_bridge_2d.sce');</ins> </td>
                  </tr><tr>
                          <th> </th><th>6</th><td class="r"><ins></ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>7</th><td class="r"><ins></ins> </td>
                  </tr>
            </tbody>
        </table>
      </li>
      <li class="entry">
        <h2>
          <a>FemTRUSS/bridge_optim_derivative.sci</a>
        </h2>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="File FemTRUSS/bridge_optim_derivative.sci (rÃ©vision 0)">
                  </th>
                  <th title="File FemTRUSS/bridge_optim_derivative.sci (rÃ©vision 0)">
                  </th>
                  <td><em></em> </td>
                </tr>
              </thead>
            <tbody class="add">
                  <tr class="first">
                          <th> </th><th>1</th><td class="r"><ins>// bridge_optim_derivative.sci</ins> </td>
                  </tr><tr>
                          <th> </th><th>2</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>4</th><td class="r"><ins>function y = f(x)</ins> </td>
                  </tr><tr>
                          <th> </th><th>5</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;[t,p,e,A,E,rho,F] = bridge_optim(x);</ins> </td>
                  </tr><tr>
                          <th> </th><th>6</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;[U,P,R]= femtruss(bridge_optim, %F, x);</ins> </td>
                  </tr><tr>
                          <th> </th><th>7</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>8</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// The deck of the bridge is in IndexNodeVarInf</ins> </td>
                  </tr><tr>
                          <th> </th><th>9</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;y = sqrt(sum(U(2*(IndexNodeVarInf-1)+2).^2));</ins> </td>
                  </tr><tr>
                          <th> </th><th>10</th><td class="r"><ins>endfunction</ins> </td>
                  </tr><tr>
                          <th> </th><th>11</th><td class="r"><ins></ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>12</th><td class="r"><ins></ins> </td>
                  </tr>
            </tbody>
        </table>
      </li>
      <li class="entry">
        <h2>
          <a>FemTRUSS/bridge_optim_3d_derivative.sce</a>
        </h2>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="File FemTRUSS/bridge_optim_3d_derivative.sce (rÃ©vision 0)">
                  </th>
                  <th title="File FemTRUSS/bridge_optim_3d_derivative.sce (rÃ©vision 0)">
                  </th>
                  <td><em></em> </td>
                </tr>
              </thead>
            <tbody class="add">
                  <tr class="first">
                          <th> </th><th>1</th><td class="r"><ins>// Work done by Ms. Ibrahimcha, Nkamani, Hammad.</ins> </td>
                  </tr><tr>
                          <th> </th><th>2</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3</th><td class="r"><ins>lines(0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>4</th><td class="r"><ins>warning_old = warning('query');</ins> </td>
                  </tr><tr>
                          <th> </th><th>5</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>6</th><td class="r"><ins>warning('off');</ins> </td>
                  </tr><tr>
                          <th> </th><th>7</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>8</th><td class="r"><ins>Order = 4; // 1 2 or 4 for derivative</ins> </td>
                  </tr><tr>
                          <th> </th><th>9</th><td class="r"><ins>Debug = %T;</ins> </td>
                  </tr><tr>
                          <th> </th><th>10</th><td class="r"><ins>delta_h = 1e-6;</ins> </td>
                  </tr><tr>
                          <th> </th><th>11</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>12</th><td class="r"><ins>femtruss_path = get_absolute_file_path('bridge_optim_3d_derivative.sce');</ins> </td>
                  </tr><tr>
                          <th> </th><th>13</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>14</th><td class="r"><ins>//exec(femtruss_path + 'build_long_bridge_3d_bad.sce');</ins> </td>
                  </tr><tr>
                          <th> </th><th>15</th><td class="r"><ins>exec(femtruss_path + 'build_long_bridge_3d_good.sce');</ins> </td>
                  </tr><tr>
                          <th> </th><th>16</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>17</th><td class="r"><ins>function y = fobj_truss(x)</ins> </td>
                  </tr><tr>
                          <th> </th><th>18</th><td class="r"><ins>[t,p,e,A,E,rho,F] = bridge_optim_3d(x);</ins> </td>
                  </tr><tr>
                          <th> </th><th>19</th><td class="r"><ins>[U,P,R]= femtruss(bridge_optim_3d, %F, x);</ins> </td>
                  </tr><tr>
                          <th> </th><th>20</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>21</th><td class="r"><ins>// First objective: minimize the deformation at nodes of the deck with respect to y (coordinate 2)</ins> </td>
                  </tr><tr>
                          <th> </th><th>22</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>23</th><td class="r"><ins>// The deck of the bridge</ins> </td>
                  </tr><tr>
                          <th> </th><th>24</th><td class="r"><ins>Pos_deck&nbsp; = localise3d(IndexNodeVarInf);</ins> </td>
                  </tr><tr>
                          <th> </th><th>25</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>26</th><td class="r"><ins>y = sqrt(sum(U(Pos_deck(2:3:$)).^2));</ins> </td>
                  </tr><tr>
                          <th> </th><th>27</th><td class="r"><ins>endfunction</ins> </td>
                  </tr><tr>
                          <th> </th><th>28</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>29</th><td class="r"><ins>function dy=dfobj_truss_diff(x)</ins> </td>
                  </tr><tr>
                          <th> </th><th>30</th><td class="r"><ins>dy = derivative(fobj_truss,x,delta_h,Order)';</ins> </td>
                  </tr><tr>
                          <th> </th><th>31</th><td class="r"><ins>endfunction</ins> </td>
                  </tr><tr>
                          <th> </th><th>32</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>33</th><td class="r"><ins>function [y, dy, ind] = optim_fobj_truss(x, ind)</ins> </td>
                  </tr><tr>
                          <th> </th><th>34</th><td class="r"><ins>y&nbsp; = fobj_truss(x);</ins> </td>
                  </tr><tr>
                          <th> </th><th>35</th><td class="r"><ins>dy = dfobj_truss_diff(x);</ins> </td>
                  </tr><tr>
                          <th> </th><th>36</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>37</th><td class="r"><ins>if Debug then</ins> </td>
                  </tr><tr>
                          <th> </th><th>38</th><td class="r"><ins>&nbsp; printf('y = %f\n', y);</ins> </td>
                  </tr><tr>
                          <th> </th><th>39</th><td class="r"><ins>&nbsp; printf('norm(dy) = %f - abs(dy): max = %f min = %f\n', norm(dy), max(abs(dy)), min(abs(dy)));</ins> </td>
                  </tr><tr>
                          <th> </th><th>40</th><td class="r"><ins>end</ins> </td>
                  </tr><tr>
                          <th> </th><th>41</th><td class="r"><ins>endfunction</ins> </td>
                  </tr><tr>
                          <th> </th><th>42</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>43</th><td class="r"><ins>MaxEvalFunc = 40;</ins> </td>
                  </tr><tr>
                          <th> </th><th>44</th><td class="r"><ins>Algorithm&nbsp; &nbsp;= 'gc'; // 'qn', 'gc', 'nd' -&gt; Ne marche qu'avec 'qn' (quasi-newton). Pour les autres, on obtient rapidement une structure mal</ins> </td>
                  </tr><tr>
                          <th> </th><th>45</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // conditionnee</ins> </td>
                  </tr><tr>
                          <th> </th><th>46</th><td class="r"><ins>Tol = 1e-12;</ins> </td>
                  </tr><tr>
                          <th> </th><th>47</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>48</th><td class="r"><ins>////////////////////////////</ins> </td>
                  </tr><tr>
                          <th> </th><th>49</th><td class="r"><ins>// Start the Optimization //</ins> </td>
                  </tr><tr>
                          <th> </th><th>50</th><td class="r"><ins>////////////////////////////</ins> </td>
                  </tr><tr>
                          <th> </th><th>51</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>52</th><td class="r"><ins>printf('optimization starting, be patient ... \n\n');</ins> </td>
                  </tr><tr>
                          <th> </th><th>53</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>54</th><td class="r"><ins>tic();</ins> </td>
                  </tr><tr>
                          <th> </th><th>55</th><td class="r"><ins>//[f_opt, x_opt] = optim(optim_fobj_truss, 'b',lower, upper, x0, 'gc','ar',1000,1000,1e-6,1e-6);</ins> </td>
                  </tr><tr>
                          <th> </th><th>56</th><td class="r"><ins>//[f_opt, x_opt] = optim(optim_fobj_truss, 'b',lower, upper, x0, 'gc','ar',1000,1000,1e-12,1e-12);</ins> </td>
                  </tr><tr>
                          <th> </th><th>57</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>58</th><td class="r"><ins>// Be careful: the 'gc' algorithm doesn't seems to accept bounds constraint</ins> </td>
                  </tr><tr>
                          <th> </th><th>59</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>60</th><td class="r"><ins>[f_opt, x_opt] = optim(optim_fobj_truss, x0, Algorithm,'ar',MaxEvalFunc,MaxEvalFunc,Tol,Tol);</ins> </td>
                  </tr><tr>
                          <th> </th><th>61</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>62</th><td class="r"><ins>printf('initial solution:'); disp(x0');</ins> </td>
                  </tr><tr>
                          <th> </th><th>63</th><td class="r"><ins>printf('initial objective function value = %f\n',fobj_truss(x0));</ins> </td>
                  </tr><tr>
                          <th> </th><th>64</th><td class="r"><ins>printf('Final solution:'); disp(x_opt');</ins> </td>
                  </tr><tr>
                          <th> </th><th>65</th><td class="r"><ins>printf('Final objective function value = %f\n',fobj_truss(x_opt));</ins> </td>
                  </tr><tr>
                          <th> </th><th>66</th><td class="r"><ins>&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>67</th><td class="r"><ins>t_end=toc();</ins> </td>
                  </tr><tr>
                          <th> </th><th>68</th><td class="r"><ins>printf('computation time = %f\n' , t_end);</ins> </td>
                  </tr><tr>
                          <th> </th><th>69</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>70</th><td class="r"><ins>////////////////////////</ins> </td>
                  </tr><tr>
                          <th> </th><th>71</th><td class="r"><ins>// Plot the solutions //</ins> </td>
                  </tr><tr>
                          <th> </th><th>72</th><td class="r"><ins>////////////////////////</ins> </td>
                  </tr><tr>
                          <th> </th><th>73</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>74</th><td class="r"><ins>scf();</ins> </td>
                  </tr><tr>
                          <th> </th><th>75</th><td class="r"><ins>plot_fobj_truss(x0);</ins> </td>
                  </tr><tr>
                          <th> </th><th>76</th><td class="r"><ins>xtitle('Before optimization','x','y','z');</ins> </td>
                  </tr><tr>
                          <th> </th><th>77</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>78</th><td class="r"><ins>scf();</ins> </td>
                  </tr><tr>
                          <th> </th><th>79</th><td class="r"><ins>plot_fobj_truss(x_opt);</ins> </td>
                  </tr><tr>
                          <th> </th><th>80</th><td class="r"><ins>xtitle('After optimization','x','y','z');</ins> </td>
                  </tr><tr>
                          <th> </th><th>81</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>82</th><td class="r"><ins>warning(warning_old);</ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>83</th><td class="r"><ins></ins> </td>
                  </tr>
            </tbody>
        </table>
      </li>
      <li class="entry">
        <h2>
          <a>FemTRUSS/final_bridge_optim_derivative.sce</a>
        </h2>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="File FemTRUSS/final_bridge_optim_derivative.sce (rÃ©vision 0)">
                  </th>
                  <th title="File FemTRUSS/final_bridge_optim_derivative.sce (rÃ©vision 0)">
                  </th>
                  <td><em></em> </td>
                </tr>
              </thead>
            <tbody class="add">
                  <tr class="first">
                          <th> </th><th>1</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>2</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3</th><td class="r"><ins>scf();</ins> </td>
                  </tr><tr>
                          <th> </th><th>4</th><td class="r"><ins>plot_fobj_truss(x_opt);</ins> </td>
                  </tr><tr>
                          <th> </th><th>5</th><td class="r"><ins>xtitle('After optimization','x','y');</ins> </td>
                  </tr><tr>
                          <th> </th><th>6</th><td class="r"><ins></ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>7</th><td class="r"><ins>warning(warning_old);</ins> </td>
                  </tr>
            </tbody>
        </table>
      </li>
      <li class="entry">
        <h2>
          <a>FemTRUSS/build_long_bridge_2d.sce</a>
        </h2>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="File FemTRUSS/build_long_bridge_2d.sce (rÃ©vision 0)">
                  </th>
                  <th title="File FemTRUSS/build_long_bridge_2d.sce (rÃ©vision 0)">
                  </th>
                  <td><em></em> </td>
                </tr>
              </thead>
            <tbody class="add">
                  <tr class="first">
                          <th> </th><th>1</th><td class="r"><ins>NbBlocs = 8; // The number of blocks for the bridge.</ins> </td>
                  </tr><tr>
                          <th> </th><th>2</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3</th><td class="r"><ins>global IndexNodeVarSup;</ins> </td>
                  </tr><tr>
                          <th> </th><th>4</th><td class="r"><ins>global IndexNodeVarInf;</ins> </td>
                  </tr><tr>
                          <th> </th><th>5</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>6</th><td class="r"><ins>IndexNodeVarSup = [];</ins> </td>
                  </tr><tr>
                          <th> </th><th>7</th><td class="r"><ins>IndexNodeVarInf = [];</ins> </td>
                  </tr><tr>
                          <th> </th><th>8</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>9</th><td class="r"><ins>// Definition of the initial solution. Depends on the number of blocks</ins> </td>
                  </tr><tr>
                          <th> </th><th>10</th><td class="r"><ins>x0 = zeros(2*(NbBlocs+1),1);</ins> </td>
                  </tr><tr>
                          <th> </th><th>11</th><td class="r"><ins>x0(2:2:$) = 1;</ins> </td>
                  </tr><tr>
                          <th> </th><th>12</th><td class="r"><ins>x0(1:2:$) = (1:NbBlocs+1)';</ins> </td>
                  </tr><tr>
                          <th> </th><th>13</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>14</th><td class="r"><ins>function [t,p,e,A,E,rho,F] = bridge_optim(x)</ins> </td>
                  </tr><tr>
                          <th> </th><th>15</th><td class="r"><ins>// t : donnees en lignes regroupees par 2 (connection extremite 1 - connection extremite 2)</ins> </td>
                  </tr><tr>
                          <th> </th><th>16</th><td class="r"><ins>// p : autant de lignes que de noeuds. Sur chaque ligne n on retrouve les coordonnees 2d du noeud n</ins> </td>
                  </tr><tr>
                          <th> </th><th>17</th><td class="r"><ins>// e : liste des noeuds d'appui</ins> </td>
                  </tr><tr>
                          <th> </th><th>18</th><td class="r"><ins>// A : liste des sections des elements. Vecteur contenant autant d'entrees que d'elements</ins> </td>
                  </tr><tr>
                          <th> </th><th>19</th><td class="r"><ins>// E : liste des modules d'elasticite des elements. Vecteur contenant autant d'entrees que d'elements</ins> </td>
                  </tr><tr>
                          <th> </th><th>20</th><td class="r"><ins>// rho : liste des masses volumiques des elements. Vecteur contenant autant d'entrees que d'elements</ins> </td>
                  </tr><tr>
                          <th> </th><th>21</th><td class="r"><ins>// F&nbsp; &nbsp;: liste des forces appliquees aux noeuds. Vecteur colonne comprenant la coordonnes X du noeud 1 en premiere ligne, la coordonnees Y du noeud 1 en seconde </ins> </td>
                  </tr><tr>
                          <th> </th><th>22</th><td class="r"><ins>//&nbsp; &nbsp; &nbsp; &nbsp;ligne, etc ...</ins> </td>
                  </tr><tr>
                          <th> </th><th>23</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>24</th><td class="r"><ins>global IndexNodeVarSup;</ins> </td>
                  </tr><tr>
                          <th> </th><th>25</th><td class="r"><ins>global IndexNodeVarInf;</ins> </td>
                  </tr><tr>
                          <th> </th><th>26</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>27</th><td class="r"><ins>IndexNodeVarSup = [];</ins> </td>
                  </tr><tr>
                          <th> </th><th>28</th><td class="r"><ins>IndexNodeVarInf = [];</ins> </td>
                  </tr><tr>
                          <th> </th><th>29</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>30</th><td class="r"><ins>//&nbsp; &nbsp; &nbsp; 3</ins> </td>
                  </tr><tr>
                          <th> </th><th>31</th><td class="r"><ins>//&nbsp; &nbsp; &nbsp; +</ins> </td>
                  </tr><tr>
                          <th> </th><th>32</th><td class="r"><ins>//&nbsp; &nbsp; &nbsp;/</ins> </td>
                  </tr><tr>
                          <th> </th><th>33</th><td class="r"><ins>//&nbsp; &nbsp; / </ins> </td>
                  </tr><tr>
                          <th> </th><th>34</th><td class="r"><ins>//&nbsp; &nbsp;/&nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>35</th><td class="r"><ins>// -+---+</ins> </td>
                  </tr><tr>
                          <th> </th><th>36</th><td class="r"><ins>//&nbsp; |1&nbsp; 2</ins> </td>
                  </tr><tr>
                          <th> </th><th>37</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>38</th><td class="r"><ins>p = [0 0;</ins> </td>
                  </tr><tr>
                          <th> </th><th>39</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;1 0;</ins> </td>
                  </tr><tr>
                          <th> </th><th>40</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;1 1];</ins> </td>
                  </tr><tr>
                          <th> </th><th>41</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>42</th><td class="r"><ins>t = [1 2;</ins> </td>
                  </tr><tr>
                          <th> </th><th>43</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;1 3];</ins> </td>
                  </tr><tr>
                          <th> </th><th>44</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>45</th><td class="r"><ins>IndexNodeVarSup = 3;</ins> </td>
                  </tr><tr>
                          <th> </th><th>46</th><td class="r"><ins>IndexNodeVarInf = 2;</ins> </td>
                  </tr><tr>
                          <th> </th><th>47</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>48</th><td class="r"><ins>for i=1:NbBlocs</ins> </td>
                  </tr><tr>
                          <th> </th><th>49</th><td class="r"><ins>&nbsp; //&nbsp; 2*i+1 2*i+3&nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>50</th><td class="r"><ins>&nbsp; //&nbsp; +----+</ins> </td>
                  </tr><tr>
                          <th> </th><th>51</th><td class="r"><ins>&nbsp; //&nbsp; |\&nbsp; /</ins> </td>
                  </tr><tr>
                          <th> </th><th>52</th><td class="r"><ins>&nbsp; //&nbsp; | /\ </ins> </td>
                  </tr><tr>
                          <th> </th><th>53</th><td class="r"><ins>&nbsp; //&nbsp; |/&nbsp; \</ins> </td>
                  </tr><tr>
                          <th> </th><th>54</th><td class="r"><ins>&nbsp; //&nbsp; +----+</ins> </td>
                  </tr><tr>
                          <th> </th><th>55</th><td class="r"><ins>&nbsp; //&nbsp; 2*i+0 2*i+2</ins> </td>
                  </tr><tr>
                          <th> </th><th>56</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>57</th><td class="r"><ins>&nbsp; p = [p; </ins> </td>
                  </tr><tr>
                          <th> </th><th>58</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;i+1 0;</ins> </td>
                  </tr><tr>
                          <th> </th><th>59</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;i+1 1];</ins> </td>
                  </tr><tr>
                          <th> </th><th>60</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>61</th><td class="r"><ins>&nbsp; t = [t; </ins> </td>
                  </tr><tr>
                          <th> </th><th>62</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;2*i+0 2*i+1;</ins> </td>
                  </tr><tr>
                          <th> </th><th>63</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;2*i+1 2*i+3;</ins> </td>
                  </tr><tr>
                          <th> </th><th>64</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;2*i+0 2*i+2;</ins> </td>
                  </tr><tr>
                          <th> </th><th>65</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;2*i+0 2*i+3;</ins> </td>
                  </tr><tr>
                          <th> </th><th>66</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;2*i+1 2*i+2];</ins> </td>
                  </tr><tr>
                          <th> </th><th>67</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>68</th><td class="r"><ins>&nbsp; IndexNodeVarSup = [IndexNodeVarSup 2*i+3];</ins> </td>
                  </tr><tr>
                          <th> </th><th>69</th><td class="r"><ins>&nbsp; IndexNodeVarInf = [IndexNodeVarInf 2*i+2];</ins> </td>
                  </tr><tr>
                          <th> </th><th>70</th><td class="r"><ins>end</ins> </td>
                  </tr><tr>
                          <th> </th><th>71</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>72</th><td class="r"><ins>//&nbsp; 2*i+1&nbsp; &nbsp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>73</th><td class="r"><ins>//&nbsp; +&nbsp; &nbsp; &nbsp; &nbsp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>74</th><td class="r"><ins>//&nbsp; &nbsp;\&nbsp; &nbsp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>75</th><td class="r"><ins>//&nbsp; &nbsp; \</ins> </td>
                  </tr><tr>
                          <th> </th><th>76</th><td class="r"><ins>//&nbsp; &nbsp; &nbsp;\ </ins> </td>
                  </tr><tr>
                          <th> </th><th>77</th><td class="r"><ins>// +---+</ins> </td>
                  </tr><tr>
                          <th> </th><th>78</th><td class="r"><ins>// 2*i+0 2*i+2&nbsp; &nbsp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>79</th><td class="r"><ins>p = [p; </ins> </td>
                  </tr><tr>
                          <th> </th><th>80</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;NbBlocs+2 0];</ins> </td>
                  </tr><tr>
                          <th> </th><th>81</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>82</th><td class="r"><ins>t = [t; </ins> </td>
                  </tr><tr>
                          <th> </th><th>83</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;2*(NbBlocs+1)+0 2*(NbBlocs+1)+2;</ins> </td>
                  </tr><tr>
                          <th> </th><th>84</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;2*(NbBlocs+1)+1 2*(NbBlocs+1)+2;</ins> </td>
                  </tr><tr>
                          <th> </th><th>85</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;2*(NbBlocs+1)+0 2*(NbBlocs+1)+1];</ins> </td>
                  </tr><tr>
                          <th> </th><th>86</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>87</th><td class="r"><ins>e = [</ins> </td>
                  </tr><tr>
                          <th> </th><th>88</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;[1, 1] .* localise2d(1) // On localise les positions du noeud 6 dans les matrices et on immobilise les deux degrees de liberte du noeud 5</ins> </td>
                  </tr><tr>
                          <th> </th><th>89</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;[1, 1] .* localise2d(2*(NbBlocs-1)+6) // On localise les positions du noeud 6 dans les matrices et on immobilise les deux degrees de liberte du noeud 2</ins> </td>
                  </tr><tr>
                          <th> </th><th>90</th><td class="r"><ins>&nbsp; &nbsp; ]; </ins> </td>
                  </tr><tr>
                          <th> </th><th>91</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>92</th><td class="r"><ins>A&nbsp; &nbsp;= ones(1,size(t,1)) * 25e-4; // sections des elements</ins> </td>
                  </tr><tr>
                          <th> </th><th>93</th><td class="r"><ins>E&nbsp; &nbsp;= ones(1,size(t,1)) * 210e9; // module d'elasticite des elements </ins> </td>
                  </tr><tr>
                          <th> </th><th>94</th><td class="r"><ins>rho = ones(1,size(t,1)) * 7.8e3; // masse volumique des elements</ins> </td>
                  </tr><tr>
                          <th> </th><th>95</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>96</th><td class="r"><ins>F = zeros(length(p),1);</ins> </td>
                  </tr><tr>
                          <th> </th><th>97</th><td class="r"><ins>F(2*(IndexNodeVarInf-1)+2) = -3.4e5;</ins> </td>
                  </tr><tr>
                          <th> </th><th>98</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>99</th><td class="r"><ins>p(IndexNodeVarSup,1) = x(1:2:$);</ins> </td>
                  </tr><tr>
                          <th> </th><th>100</th><td class="r"><ins>p(IndexNodeVarSup,2) = x(2:2:$);</ins> </td>
                  </tr><tr>
                          <th> </th><th>101</th><td class="r"><ins>endfunction</ins> </td>
                  </tr><tr>
                          <th> </th><th>102</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>103</th><td class="r"><ins>function plot_fobj_truss(x)</ins> </td>
                  </tr><tr>
                          <th> </th><th>104</th><td class="r"><ins>[t,p,e,A,E,rho,F] = bridge_optim(x);</ins> </td>
                  </tr><tr>
                          <th> </th><th>105</th><td class="r"><ins>[U,P,R]= femtruss(bridge_optim, %F, x);</ins> </td>
                  </tr><tr>
                          <th> </th><th>106</th><td class="r"><ins>plotdeforme(U,p,t,10);</ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>107</th><td class="r"><ins>endfunction</ins> </td>
                  </tr>
            </tbody>
        </table>
      </li>
      <li class="entry">
        <h2>
          <a>FemTRUSS/bridge_optim_derivative.in</a>
        </h2>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="File FemTRUSS/bridge_optim_derivative.in (rÃ©vision 0)">
                  </th>
                  <th title="File FemTRUSS/bridge_optim_derivative.in (rÃ©vision 0)">
                  </th>
                  <td><em></em> </td>
                </tr>
              </thead>
            <tbody class="add">
                  <tr class="first">
                          <th> </th><th>1</th><td class="r"><ins># bridge_optim_derivative.in</ins> </td>
                  </tr><tr>
                          <th> </th><th>2</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3</th><td class="r"><ins>method,</ins> </td>
                  </tr><tr>
                          <th> </th><th>4</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; optpp_q_newton</ins> </td>
                  </tr><tr>
                          <th> </th><th>5</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; max_iterations = 40,</ins> </td>
                  </tr><tr>
                          <th> </th><th>6</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; convergence_tolerance = 1.0e-6</ins> </td>
                  </tr><tr>
                          <th> </th><th>7</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>8</th><td class="r"><ins>variables,</ins> </td>
                  </tr><tr>
                          <th> </th><th>9</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; continuous_design = 18</ins> </td>
                  </tr><tr>
                          <th> </th><th>10</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cdv_initial_point&nbsp; 1.&nbsp; 1.&nbsp; 2.&nbsp; 1.&nbsp; 3.&nbsp; 1.&nbsp; 4.&nbsp; 1.&nbsp; 5.&nbsp; 1.&nbsp; 6.&nbsp; 1.&nbsp; 7.&nbsp; 1.&nbsp; 8.&nbsp; 1.&nbsp; 9.&nbsp; 1.</ins> </td>
                  </tr><tr>
                          <th> </th><th>11</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cdv_lower_bounds&nbsp; -10 -10 -10 -10 -10 -10 -10 -10 -10 -10 -10 -10 -10 -10 -10 -10 -10 -10</ins> </td>
                  </tr><tr>
                          <th> </th><th>12</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cdv_upper_bounds&nbsp; &nbsp;10&nbsp; 10&nbsp; 10&nbsp; 10&nbsp; 10&nbsp; 10&nbsp; 10&nbsp; 10&nbsp; 10&nbsp; 10&nbsp; 10&nbsp; 10&nbsp; 10&nbsp; 10&nbsp; 10&nbsp; 10&nbsp; 10&nbsp; 10</ins> </td>
                  </tr><tr>
                          <th> </th><th>13</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cdv_descriptor&nbsp; &nbsp; &nbsp;'x1' 'x2' 'x3' 'x4' 'x5' 'x6' 'x7' 'x8' 'x9' 'x10' 'x11' 'x12' 'x13' 'x14' 'x15' 'x16' 'x17' 'x18' </ins> </td>
                  </tr><tr>
                          <th> </th><th>14</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>15</th><td class="r"><ins>interface,</ins> </td>
                  </tr><tr>
                          <th> </th><th>16</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; fork</ins> </td>
                  </tr><tr>
                          <th> </th><th>17</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; analysis_driver = 'scilab_rosen_bb_simulator.sh',</ins> </td>
                  </tr><tr>
                          <th> </th><th>18</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; parameters_file = 'params.in'</ins> </td>
                  </tr><tr>
                          <th> </th><th>19</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; results_file = 'results.out'</ins> </td>
                  </tr><tr>
                          <th> </th><th>20</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; deactivate active_set_vector</ins> </td>
                  </tr><tr>
                          <th> </th><th>21</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>22</th><td class="r"><ins>responses,</ins> </td>
                  </tr><tr>
                          <th> </th><th>23</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; num_objective_functions = 1</ins> </td>
                  </tr><tr>
                          <th> </th><th>24</th><td class="r"><ins>##&nbsp; &nbsp; &nbsp; analytic_gradients&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #0,#1,#2,#3</ins> </td>
                  </tr><tr>
                          <th> </th><th>25</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; numerical_gradients&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#4</ins> </td>
                  </tr><tr>
                          <th> </th><th>26</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; method_source dakota&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #4</ins> </td>
                  </tr><tr>
                          <th> </th><th>27</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; interval_type central&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#4</ins> </td>
                  </tr><tr>
                          <th> </th><th>28</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fd_gradient_step_size = 1.e-3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#4</ins> </td>
                  </tr><tr>
                          <th> </th><th>29</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; no_hessians</ins> </td>
                  </tr><tr>
                          <th> </th><th>30</th><td class="r"><ins>##&nbsp; &nbsp; &nbsp; analytic_hessians&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#0</ins> </td>
                  </tr><tr>
                          <th> </th><th>31</th><td class="r"><ins>#&nbsp; &nbsp; &nbsp; &nbsp;quasi_hessians damped bfgs&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #1</ins> </td>
                  </tr><tr>
                          <th> </th><th>32</th><td class="r"><ins>#&nbsp; &nbsp; &nbsp; &nbsp;quasi_hessians sr1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #2</ins> </td>
                  </tr><tr>
                          <th> </th><th>33</th><td class="r"><ins>##&nbsp; &nbsp; &nbsp; numerical_hessians&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #3,#4</ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>34</th><td class="r"><ins>##&nbsp; &nbsp; &nbsp; &nbsp; fd_hessian_step_size = 1.e-5&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #3,#4</ins> </td>
                  </tr>
            </tbody>
        </table>
      </li>
      <li class="entry">
        <h2>
          <a>FemTRUSS/scilab_rosen_bb_simulator.sh</a>
        </h2>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="File FemTRUSS/scilab_rosen_bb_simulator.sh (rÃ©vision 0)">
                  </th>
                  <th title="File FemTRUSS/scilab_rosen_bb_simulator.sh (rÃ©vision 0)">
                  </th>
                  <td><em></em> </td>
                </tr>
              </thead>
            <tbody class="add">
                  <tr class="first">
                          <th> </th><th>1</th><td class="r"><ins>#!/bin/bash </ins> </td>
                  </tr><tr>
                          <th> </th><th>2</th><td class="r"><ins># Sample simulator to Dakota system call script -- Scilab example</ins> </td>
                  </tr><tr>
                          <th> </th><th>3</th><td class="r"><ins># See User Manual for instructions</ins> </td>
                  </tr><tr>
                          <th> </th><th>4</th><td class="r"><ins>#</ins> </td>
                  </tr><tr>
                          <th> </th><th>5</th><td class="r"><ins># yc 10/24/01</ins> </td>
                  </tr><tr>
                          <th> </th><th>6</th><td class="r"><ins># Yann Chapalain, 4/05/2011</ins> </td>
                  </tr><tr>
                          <th> </th><th>7</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>8</th><td class="r"><ins># $1 is params.in FROM Dakota</ins> </td>
                  </tr><tr>
                          <th> </th><th>9</th><td class="r"><ins># $2 is results.out returned to Dakota</ins> </td>
                  </tr><tr>
                          <th> </th><th>10</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>11</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>12</th><td class="r"><ins># Assuming Scilab .sci files and any necessary data are in ./</ins> </td>
                  </tr><tr>
                          <th> </th><th>13</th><td class="r"><ins># from which DAKOTA is run</ins> </td>
                  </tr><tr>
                          <th> </th><th>14</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>15</th><td class="r"><ins># NOTE: The workdir could be eliminated since the scilab wrapper</ins> </td>
                  </tr><tr>
                          <th> </th><th>16</th><td class="r"><ins># accepts parameters file names as input, but is included for example</ins> </td>
                  </tr><tr>
                          <th> </th><th>17</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>18</th><td class="r"><ins># ------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>19</th><td class="r"><ins># Set up working directory</ins> </td>
                  </tr><tr>
                          <th> </th><th>20</th><td class="r"><ins># ------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>21</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>22</th><td class="r"><ins># you could simplify this and keep all files in your main directory</ins> </td>
                  </tr><tr>
                          <th> </th><th>23</th><td class="r"><ins># if you are only running one simulation at a time.</ins> </td>
                  </tr><tr>
                          <th> </th><th>24</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>25</th><td class="r"><ins># strip function evaluation number for making working directory</ins> </td>
                  </tr><tr>
                          <th> </th><th>26</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>27</th><td class="r"><ins>mkdir workdir</ins> </td>
                  </tr><tr>
                          <th> </th><th>28</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>29</th><td class="r"><ins>echo "test : p1 = $1"</ins> </td>
                  </tr><tr>
                          <th> </th><th>30</th><td class="r"><ins>echo "test : p2 = $2"</ins> </td>
                  </tr><tr>
                          <th> </th><th>31</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>32</th><td class="r"><ins># copy parameters file from DAKOTA into working directory</ins> </td>
                  </tr><tr>
                          <th> </th><th>33</th><td class="r"><ins>cp $1 workdir/params.in</ins> </td>
                  </tr><tr>
                          <th> </th><th>34</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>35</th><td class="r"><ins># copy any necessary .sci files and data files into workdir</ins> </td>
                  </tr><tr>
                          <th> </th><th>36</th><td class="r"><ins>#cp init_bridge_optim_derivative.sce final_bridge_optim_derivative.sce f.sci fp.sci scilab_rosen_wrapper.sci build_long_bridge_2d.sce workdir</ins> </td>
                  </tr><tr>
                          <th> </th><th>37</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>38</th><td class="r"><ins>cp *sci *sce workdir</ins> </td>
                  </tr><tr>
                          <th> </th><th>39</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>40</th><td class="r"><ins># -------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>41</th><td class="r"><ins># RUN the simulation from workdir</ins> </td>
                  </tr><tr>
                          <th> </th><th>42</th><td class="r"><ins># -------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>43</th><td class="r"><ins># launch Scilab with command mode (-r)</ins> </td>
                  </tr><tr>
                          <th> </th><th>44</th><td class="r"><ins># scilab_rosen_wrapper.sci will call the actual analysis file</ins> </td>
                  </tr><tr>
                          <th> </th><th>45</th><td class="r"><ins># rosenbrock.sci</ins> </td>
                  </tr><tr>
                          <th> </th><th>46</th><td class="r"><ins>cd workdir</ins> </td>
                  </tr><tr>
                          <th> </th><th>47</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>48</th><td class="r"><ins>echo scilab -nwni -e "exec init_bridge_optim_derivative.sce; exec scilab_rosen_wrapper.sci; scilab_rosen_wrapper('params.in', 'results.out'); final_bridge_optim_derivative.sce; exit"</ins> </td>
                  </tr><tr>
                          <th> </th><th>49</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>50</th><td class="r"><ins>/home/yann/Programmes/scilab-5.3.1/bin/scilab&nbsp; -e "exec init_bridge_optim_derivative.sce; exec scilab_rosen_wrapper.sci; scilab_rosen_wrapper('params.in', 'results.out'); exec final_bridge_optim_derivative.sce; exit"</ins> </td>
                  </tr><tr>
                          <th> </th><th>51</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>52</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>53</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>54</th><td class="r"><ins># *** --&gt; The 'exit' command is crucial so Scilab will exit after running</ins> </td>
                  </tr><tr>
                          <th> </th><th>55</th><td class="r"><ins>#&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;the analysis!</ins> </td>
                  </tr><tr>
                          <th> </th><th>56</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>57</th><td class="r"><ins># -------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>58</th><td class="r"><ins># write results.out and cleanup</ins> </td>
                  </tr><tr>
                          <th> </th><th>59</th><td class="r"><ins># -------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>60</th><td class="r"><ins>mv results.out ../$2 </ins> </td>
                  </tr><tr>
                          <th> </th><th>61</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>62</th><td class="r"><ins>cd ..</ins> </td>
                  </tr><tr>
                          <th> </th><th>63</th><td class="r"><ins>\rm -rf workdir</ins> </td>
                  </tr><tr>
                          <th> </th><th>64</th><td class="r"><ins></ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>65</th><td class="r"><ins></ins> </td>
                  </tr>
            </tbody>
        </table>
      </li>
      <li class="entry">
        <h2>
          <a>readme_scilab</a>
        </h2>
        <pre>
Modification de propriÃ©tÃ©s sur FemTRUSS/scilab_rosen_bb_simulator.sh
___________________________________________________________________
AjoutÃ©Â : svn:executable
   + *
</pre>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="File readme_scilab (rÃ©vision 0)">
                  </th>
                  <th title="File readme_scilab (rÃ©vision 0)">
                  </th>
                  <td><em></em> </td>
                </tr>
              </thead>
            <tbody class="add">
                  <tr class="first">
                          <th> </th><th>1</th><td class="r"><ins>DAKOTA/Scilab script interface</ins> </td>
                  </tr><tr>
                          <th> </th><th>2</th><td class="r"><ins>Yann Chapalain</ins> </td>
                  </tr><tr>
                          <th> </th><th>3</th><td class="r"><ins>07/20/2011;</ins> </td>
                  </tr><tr>
                          <th> </th><th>4</th><td class="r"><ins>==============================</ins> </td>
                  </tr><tr>
                          <th> </th><th>5</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>6</th><td class="r"><ins>FILES:</ins> </td>
                  </tr><tr>
                          <th> </th><th>7</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>8</th><td class="r"><ins>First example : Rosenbrock function</ins> </td>
                  </tr><tr>
                          <th> </th><th>9</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>10</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; dakota_scilab_rosenbrock.in&nbsp; &nbsp; &nbsp;DAKOTA input file</ins> </td>
                  </tr><tr>
                          <th> </th><th>11</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>12</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; scilab_rosen_bb_simulator.sh&nbsp; &nbsp; analysis driver script called by DAKOTA</ins> </td>
                  </tr><tr>
                          <th> </th><th>13</th><td class="r"><ins>&nbsp; &nbsp; &nbsp;OR scilab_rosen_bb_simulator.bat</ins> </td>
                  </tr><tr>
                          <th> </th><th>14</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>15</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; scilab_rosen_wrapper.sci&nbsp; &nbsp; &nbsp; &nbsp; scilab wrapper called by script</ins> </td>
                  </tr><tr>
                          <th> </th><th>16</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; rosenbrock.sci&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; objective function</ins> </td>
                  </tr><tr>
                          <th> </th><th>17</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>18</th><td class="r"><ins>Second example : PID</ins> </td>
                  </tr><tr>
                          <th> </th><th>19</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>20</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;pid.in&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;DAKOTA input file</ins> </td>
                  </tr><tr>
                          <th> </th><th>21</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>22</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;scilab_rosen_bb_simulator.sh&nbsp; &nbsp; &nbsp;analysis driver script called by DAKOTA</ins> </td>
                  </tr><tr>
                          <th> </th><th>23</th><td class="r"><ins>&nbsp; &nbsp; OR scilab_rosen_bb_simulator.bat</ins> </td>
                  </tr><tr>
                          <th> </th><th>24</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>25</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;init_test_automatic.sce&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; init xcos script called by shell script</ins> </td>
                  </tr><tr>
                          <th> </th><th>26</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;visualize_solution.sce&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;script to visualize xcos solution</ins> </td>
                  </tr><tr>
                          <th> </th><th>27</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; called by shell script</ins> </td>
                  </tr><tr>
                          <th> </th><th>28</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;scilab_rosen_wrapper.sci scilab&nbsp; wrapper called by shell script</ins> </td>
                  </tr><tr>
                          <th> </th><th>29</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;f_pid.sci&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; objective function</ins> </td>
                  </tr><tr>
                          <th> </th><th>30</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;</ins> </td>
                  </tr><tr>
                          <th> </th><th>31</th><td class="r"><ins>Third example : Bridge FemTRUSS</ins> </td>
                  </tr><tr>
                          <th> </th><th>32</th><td class="r"><ins>FemTRUSS is a Truss finite element code for scilab.</ins> </td>
                  </tr><tr>
                          <th> </th><th>33</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>34</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;bridge_optim_derivative.in&nbsp; &nbsp; &nbsp; &nbsp;DAKOTA input file</ins> </td>
                  </tr><tr>
                          <th> </th><th>35</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>36</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;scilab_rosen_bb_simulator.sh&nbsp; &nbsp; &nbsp;analysis driver script called by DAKOTA</ins> </td>
                  </tr><tr>
                          <th> </th><th>37</th><td class="r"><ins>&nbsp; &nbsp; OR scilab_rosen_bb_simulator.bat</ins> </td>
                  </tr><tr>
                          <th> </th><th>38</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>39</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;init_bridge_optim_derivative.sce&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;init FemTRUSS script called by shell script</ins> </td>
                  </tr><tr>
                          <th> </th><th>40</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;final_bridge_optim_derivative.sce&nbsp; &nbsp; &nbsp; &nbsp; script to visualize FemTRUSS solution</ins> </td>
                  </tr><tr>
                          <th> </th><th>41</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; called by shell script</ins> </td>
                  </tr><tr>
                          <th> </th><th>42</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;scilab_rosen_wrapper.sci scilab&nbsp; wrapper called by shell script</ins> </td>
                  </tr><tr>
                          <th> </th><th>43</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;f.sci&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; objective function</ins> </td>
                  </tr><tr>
                          <th> </th><th>44</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp;fp.sci&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;gradient</ins> </td>
                  </tr><tr>
                          <th> </th><th>45</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>46</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; </ins> </td>
                  </tr><tr>
                          <th> </th><th>47</th><td class="r"><ins>EXECUTION:</ins> </td>
                  </tr><tr>
                          <th> </th><th>48</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>49</th><td class="r"><ins>This example presumes the Scilab executable is on the path.&nbsp; If not,</ins> </td>
                  </tr><tr>
                          <th> </th><th>50</th><td class="r"><ins>you'll need to modify the scilab_rosen_bb_simulator.* of the specific</ins> </td>
                  </tr><tr>
                          <th> </th><th>51</th><td class="r"><ins>example include the explicit path to it.</ins> </td>
                  </tr><tr>
                          <th> </th><th>52</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>53</th><td class="r"><ins>To run the Rosenbrockexample (minimize rosenbrock function using CONMIN's FRCG alg.):</ins> </td>
                  </tr><tr>
                          <th> </th><th>54</th><td class="r"><ins></ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>55</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; dakota -i dakota_scilab_rosenbrock.in</ins> </td>
                  </tr>
            </tbody>
        </table>
      </li>
      <li class="entry">
        <h2>
          <a>PID/visualize_solution.sce</a>
        </h2>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="File PID/visualize_solution.sce (rÃ©vision 0)">
                  </th>
                  <th title="File PID/visualize_solution.sce (rÃ©vision 0)">
                  </th>
                  <td><em></em> </td>
                </tr>
              </thead>
            <tbody class="add">
                  <tr class="first">
                          <th> </th><th>1</th><td class="r"><ins>loadXcosLibs();</ins> </td>
                  </tr><tr>
                          <th> </th><th>2</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3</th><td class="r"><ins>importXcosDiagram('automatic_test.xcos');</ins> </td>
                  </tr><tr>
                          <th> </th><th>4</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>5</th><td class="r"><ins>// We find a good solution, but it doesn't take into account the stability of the system.</ins> </td>
                  </tr><tr>
                          <th> </th><th>6</th><td class="r"><ins>w0 = 2*%pi*100;</ins> </td>
                  </tr><tr>
                          <th> </th><th>7</th><td class="r"><ins>m&nbsp; = 0.5;</ins> </td>
                  </tr><tr>
                          <th> </th><th>8</th><td class="r"><ins>K0 = 0.1;</ins> </td>
                  </tr><tr>
                          <th> </th><th>9</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>10</th><td class="r"><ins>context = [];</ins> </td>
                  </tr><tr>
                          <th> </th><th>11</th><td class="r"><ins>context.w0 = w0; ...</ins> </td>
                  </tr><tr>
                          <th> </th><th>12</th><td class="r"><ins>context.m&nbsp; = m; ...</ins> </td>
                  </tr><tr>
                          <th> </th><th>13</th><td class="r"><ins>context.K0 = K0; ...</ins> </td>
                  </tr><tr>
                          <th> </th><th>14</th><td class="r"><ins>context.P = 233;</ins> </td>
                  </tr><tr>
                          <th> </th><th>15</th><td class="r"><ins>context.I = 0.59;</ins> </td>
                  </tr><tr>
                          <th> </th><th>16</th><td class="r"><ins></ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>17</th><td class="r"><ins>Info = scicos_simulate(scs_m,list(),context);</ins> </td>
                  </tr>
            </tbody>
        </table>
      </li>
      <li class="entry">
        <h2>
          <a>PID/scilab_rosen_wrapper.sci</a>
        </h2>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="File PID/scilab_rosen_wrapper.sci (rÃ©vision 0)">
                  </th>
                  <th title="File PID/scilab_rosen_wrapper.sci (rÃ©vision 0)">
                  </th>
                  <td><em></em> </td>
                </tr>
              </thead>
            <tbody class="add">
                  <tr class="first">
                          <th> </th><th>1</th><td class="r"><ins>// scilab_rosen_wrapper.sci</ins> </td>
                  </tr><tr>
                          <th> </th><th>2</th><td class="r"><ins>function scilab_rosen_wrapper(params,results)</ins> </td>
                  </tr><tr>
                          <th> </th><th>3</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>4</th><td class="r"><ins>exec('f_pid.sci');</ins> </td>
                  </tr><tr>
                          <th> </th><th>5</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>6</th><td class="r"><ins>//--------------------------------------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>7</th><td class="r"><ins>// Set any fixed/default values needed for your analysis .sci code</ins> </td>
                  </tr><tr>
                          <th> </th><th>8</th><td class="r"><ins>//--------------------------------------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>9</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>10</th><td class="r"><ins>//alpha = 100;</ins> </td>
                  </tr><tr>
                          <th> </th><th>11</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>12</th><td class="r"><ins>//------------------------------------------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>13</th><td class="r"><ins>// READ params.in (or params.in.num) from DAKOTA and set Scilab variables</ins> </td>
                  </tr><tr>
                          <th> </th><th>14</th><td class="r"><ins>//</ins> </td>
                  </tr><tr>
                          <th> </th><th>15</th><td class="r"><ins>// read params.in (no aprepro) -- just one param per line</ins> </td>
                  </tr><tr>
                          <th> </th><th>16</th><td class="r"><ins>//------------------------------------------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>17</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>18</th><td class="r"><ins>fid = mopen(params,'r');</ins> </td>
                  </tr><tr>
                          <th> </th><th>19</th><td class="r"><ins>C = mgetl(fid,-1);</ins> </td>
                  </tr><tr>
                          <th> </th><th>20</th><td class="r"><ins>mclose(fid);</ins> </td>
                  </tr><tr>
                          <th> </th><th>21</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>22</th><td class="r"><ins>// set design variables -- could use vector notation</ins> </td>
                  </tr><tr>
                          <th> </th><th>23</th><td class="r"><ins>// rosenbrock x1, x2</ins> </td>
                  </tr><tr>
                          <th> </th><th>24</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>25</th><td class="r"><ins>Line = tokens(C(2),' '); x(1) = eval(Line(1)); disp(x(1));</ins> </td>
                  </tr><tr>
                          <th> </th><th>26</th><td class="r"><ins>Line = tokens(C(3),' '); x(2) = eval(Line(1)); disp(x(2));</ins> </td>
                  </tr><tr>
                          <th> </th><th>27</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>28</th><td class="r"><ins>//------------------------------------------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>29</th><td class="r"><ins>// CALL your analysis code to get the function value</ins> </td>
                  </tr><tr>
                          <th> </th><th>30</th><td class="r"><ins>//------------------------------------------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>31</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>32</th><td class="r"><ins>f = f(x);</ins> </td>
                  </tr><tr>
                          <th> </th><th>33</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>34</th><td class="r"><ins>//------------------------------------------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>35</th><td class="r"><ins>// WRITE results.out</ins> </td>
                  </tr><tr>
                          <th> </th><th>36</th><td class="r"><ins>//------------------------------------------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>37</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>38</th><td class="r"><ins>fid = mopen(results,'w');</ins> </td>
                  </tr><tr>
                          <th> </th><th>39</th><td class="r"><ins>mfprintf(fid,'%20.10e&nbsp; &nbsp; &nbsp;f\n', f);</ins> </td>
                  </tr><tr>
                          <th> </th><th>40</th><td class="r"><ins>mclose(fid);</ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>41</th><td class="r"><ins>endfunction</ins> </td>
                  </tr>
            </tbody>
        </table>
      </li>
      <li class="entry">
        <h2>
          <a>PID/pid.in</a>
        </h2>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="File PID/pid.in (rÃ©vision 0)">
                  </th>
                  <th title="File PID/pid.in (rÃ©vision 0)">
                  </th>
                  <td><em></em> </td>
                </tr>
              </thead>
            <tbody class="add">
                  <tr class="first">
                          <th> </th><th>1</th><td class="r"><ins># pid.in</ins> </td>
                  </tr><tr>
                          <th> </th><th>2</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3</th><td class="r"><ins>method,</ins> </td>
                  </tr><tr>
                          <th> </th><th>4</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; optpp_q_newton</ins> </td>
                  </tr><tr>
                          <th> </th><th>5</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; max_iterations = 40,</ins> </td>
                  </tr><tr>
                          <th> </th><th>6</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; convergence_tolerance = 1e-3</ins> </td>
                  </tr><tr>
                          <th> </th><th>7</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>8</th><td class="r"><ins>variables,</ins> </td>
                  </tr><tr>
                          <th> </th><th>9</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; continuous_design = 2</ins> </td>
                  </tr><tr>
                          <th> </th><th>10</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cdv_initial_point&nbsp; &nbsp; 1&nbsp; &nbsp; &nbsp; 1</ins> </td>
                  </tr><tr>
                          <th> </th><th>11</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cdv_lower_bounds&nbsp; &nbsp; &nbsp;0.01&nbsp; &nbsp;0.01</ins> </td>
                  </tr><tr>
                          <th> </th><th>12</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cdv_upper_bounds&nbsp; &nbsp; &nbsp;1000&nbsp; &nbsp;2.0</ins> </td>
                  </tr><tr>
                          <th> </th><th>13</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cdv_descriptor&nbsp; &nbsp; &nbsp; &nbsp;'P'&nbsp; &nbsp;'I'</ins> </td>
                  </tr><tr>
                          <th> </th><th>14</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>15</th><td class="r"><ins>interface,</ins> </td>
                  </tr><tr>
                          <th> </th><th>16</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; fork</ins> </td>
                  </tr><tr>
                          <th> </th><th>17</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; analysis_driver = 'scilab_rosen_bb_simulator.sh'</ins> </td>
                  </tr><tr>
                          <th> </th><th>18</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; parameters_file = 'params.in'</ins> </td>
                  </tr><tr>
                          <th> </th><th>19</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; results_file = 'results.out'</ins> </td>
                  </tr><tr>
                          <th> </th><th>20</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; deactivate active_set_vector</ins> </td>
                  </tr><tr>
                          <th> </th><th>21</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>22</th><td class="r"><ins>responses,</ins> </td>
                  </tr><tr>
                          <th> </th><th>23</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; num_objective_functions = 1</ins> </td>
                  </tr><tr>
                          <th> </th><th>24</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; numerical_gradients&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#4</ins> </td>
                  </tr><tr>
                          <th> </th><th>25</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; method_source dakota&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #4</ins> </td>
                  </tr><tr>
                          <th> </th><th>26</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; interval_type central&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#4</ins> </td>
                  </tr><tr>
                          <th> </th><th>27</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fd_gradient_step_size = 1.e-3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#4</ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>28</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; no_hessians</ins> </td>
                  </tr>
            </tbody>
        </table>
      </li>
      <li class="entry">
        <h2>
          <a>PID/init_test_automatic.sce</a>
        </h2>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="File PID/init_test_automatic.sce (rÃ©vision 0)">
                  </th>
                  <th title="File PID/init_test_automatic.sce (rÃ©vision 0)">
                  </th>
                  <td><em></em> </td>
                </tr>
              </thead>
            <tbody class="add">
                  <tr class="first">
                          <th> </th><th>1</th><td class="r"><ins>loadXcosLibs();</ins> </td>
                  </tr><tr>
                          <th> </th><th>2</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3</th><td class="r"><ins>importXcosDiagram('automatic_test.xcos');</ins> </td>
                  </tr><tr>
                          <th> </th><th>4</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>5</th><td class="r"><ins>w0 = 2*%pi*100;</ins> </td>
                  </tr><tr>
                          <th> </th><th>6</th><td class="r"><ins>m&nbsp; = 0.5;</ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>7</th><td class="r"><ins>K0 = 0.1;</ins> </td>
                  </tr>
            </tbody>
        </table>
      </li>
      <li class="entry">
        <h2>
          <a>PID/scilab_rosen_bb_simulator.sh</a>
        </h2>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="File PID/scilab_rosen_bb_simulator.sh (rÃ©vision 0)">
                  </th>
                  <th title="File PID/scilab_rosen_bb_simulator.sh (rÃ©vision 0)">
                  </th>
                  <td><em></em> </td>
                </tr>
              </thead>
            <tbody class="add">
                  <tr class="first">
                          <th> </th><th>1</th><td class="r"><ins>#!/bin/bash </ins> </td>
                  </tr><tr>
                          <th> </th><th>2</th><td class="r"><ins># Sample simulator to Dakota system call script -- Scilab example</ins> </td>
                  </tr><tr>
                          <th> </th><th>3</th><td class="r"><ins># See User Manual for instructions</ins> </td>
                  </tr><tr>
                          <th> </th><th>4</th><td class="r"><ins>#</ins> </td>
                  </tr><tr>
                          <th> </th><th>5</th><td class="r"><ins># yc 10/24/01</ins> </td>
                  </tr><tr>
                          <th> </th><th>6</th><td class="r"><ins># Yann Chapalain, 4/05/2011</ins> </td>
                  </tr><tr>
                          <th> </th><th>7</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>8</th><td class="r"><ins># $1 is params.in FROM Dakota</ins> </td>
                  </tr><tr>
                          <th> </th><th>9</th><td class="r"><ins># $2 is results.out returned to Dakota</ins> </td>
                  </tr><tr>
                          <th> </th><th>10</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>11</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>12</th><td class="r"><ins># Assuming Scilab .sci files and any necessary data are in ./</ins> </td>
                  </tr><tr>
                          <th> </th><th>13</th><td class="r"><ins># from which DAKOTA is run</ins> </td>
                  </tr><tr>
                          <th> </th><th>14</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>15</th><td class="r"><ins># NOTE: The workdir could be eliminated since the scilab wrapper</ins> </td>
                  </tr><tr>
                          <th> </th><th>16</th><td class="r"><ins># accepts parameters file names as input, but is included for example</ins> </td>
                  </tr><tr>
                          <th> </th><th>17</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>18</th><td class="r"><ins># ------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>19</th><td class="r"><ins># Set up working directory</ins> </td>
                  </tr><tr>
                          <th> </th><th>20</th><td class="r"><ins># ------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>21</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>22</th><td class="r"><ins># you could simplify this and keep all files in your main directory</ins> </td>
                  </tr><tr>
                          <th> </th><th>23</th><td class="r"><ins># if you are only running one simulation at a time.</ins> </td>
                  </tr><tr>
                          <th> </th><th>24</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>25</th><td class="r"><ins># strip function evaluation number for making working directory</ins> </td>
                  </tr><tr>
                          <th> </th><th>26</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>27</th><td class="r"><ins>mkdir workdir</ins> </td>
                  </tr><tr>
                          <th> </th><th>28</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>29</th><td class="r"><ins>echo "test : p1 = $1"</ins> </td>
                  </tr><tr>
                          <th> </th><th>30</th><td class="r"><ins>echo "test : p2 = $2"</ins> </td>
                  </tr><tr>
                          <th> </th><th>31</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>32</th><td class="r"><ins># copy parameters file from DAKOTA into working directory</ins> </td>
                  </tr><tr>
                          <th> </th><th>33</th><td class="r"><ins>cp $1 workdir/params.in</ins> </td>
                  </tr><tr>
                          <th> </th><th>34</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>35</th><td class="r"><ins># copy any necessary .sci files and data files into workdir</ins> </td>
                  </tr><tr>
                          <th> </th><th>36</th><td class="r"><ins>cp automatic_test.xcos init_test_automatic.sce visualize_solution.sce f_pid.sci scilab_rosen_wrapper.sci workdir</ins> </td>
                  </tr><tr>
                          <th> </th><th>37</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>38</th><td class="r"><ins># -------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>39</th><td class="r"><ins># RUN the simulation from workdir</ins> </td>
                  </tr><tr>
                          <th> </th><th>40</th><td class="r"><ins># -------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>41</th><td class="r"><ins># launch Scilab with command mode (-r)</ins> </td>
                  </tr><tr>
                          <th> </th><th>42</th><td class="r"><ins># scilab_rosen_wrapper.sci will call the actual analysis file</ins> </td>
                  </tr><tr>
                          <th> </th><th>43</th><td class="r"><ins># rosenbrock.sci</ins> </td>
                  </tr><tr>
                          <th> </th><th>44</th><td class="r"><ins>cd workdir</ins> </td>
                  </tr><tr>
                          <th> </th><th>45</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>46</th><td class="r"><ins>echo scilab -nwni -e "exec init_test_automatic.sce; exec scilab_rosen_wrapper.sci; scilab_rosen_wrapper('params.in', 'results.out'); exec visualize_solution.sce; exit"</ins> </td>
                  </tr><tr>
                          <th> </th><th>47</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>48</th><td class="r"><ins>/home/yann/Programmes/scilab-5.3.1/bin/scilab&nbsp; -e "exec init_test_automatic.sce; exec scilab_rosen_wrapper.sci; scilab_rosen_wrapper('params.in', 'results.out'); exit"</ins> </td>
                  </tr><tr>
                          <th> </th><th>49</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>50</th><td class="r"><ins># *** --&gt; The 'exit' command is crucial so Scilab will exit after running</ins> </td>
                  </tr><tr>
                          <th> </th><th>51</th><td class="r"><ins>#&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;the analysis!</ins> </td>
                  </tr><tr>
                          <th> </th><th>52</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>53</th><td class="r"><ins># -------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>54</th><td class="r"><ins># write results.out and cleanup</ins> </td>
                  </tr><tr>
                          <th> </th><th>55</th><td class="r"><ins># -------------------------------</ins> </td>
                  </tr><tr>
                          <th> </th><th>56</th><td class="r"><ins>mv results.out ../$2 </ins> </td>
                  </tr><tr>
                          <th> </th><th>57</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>58</th><td class="r"><ins>cd ..</ins> </td>
                  </tr><tr>
                          <th> </th><th>59</th><td class="r"><ins>\rm -rf workdir</ins> </td>
                  </tr><tr>
                          <th> </th><th>60</th><td class="r"><ins></ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>61</th><td class="r"><ins></ins> </td>
                  </tr>
            </tbody>
        </table>
      </li>
      <li class="entry">
        <h2>
          <a>PID/f_pid.sci</a>
        </h2>
        <pre>
Modification de propriÃ©tÃ©s sur PID/scilab_rosen_bb_simulator.sh
___________________________________________________________________
AjoutÃ©Â : svn:executable
   + *
</pre>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="File PID/f_pid.sci (rÃ©vision 0)">
                  </th>
                  <th title="File PID/f_pid.sci (rÃ©vision 0)">
                  </th>
                  <td><em></em> </td>
                </tr>
              </thead>
            <tbody class="add">
                  <tr class="first">
                          <th> </th><th>1</th><td class="r"><ins>// Definition of the objective function</ins> </td>
                  </tr><tr>
                          <th> </th><th>2</th><td class="r"><ins></ins> </td>
                  </tr><tr>
                          <th> </th><th>3</th><td class="r"><ins>function y = f(x)</ins> </td>
                  </tr><tr>
                          <th> </th><th>4</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; context.w0 = w0;</ins> </td>
                  </tr><tr>
                          <th> </th><th>5</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; context.m&nbsp; = m;</ins> </td>
                  </tr><tr>
                          <th> </th><th>6</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; context.K0 = K0;</ins> </td>
                  </tr><tr>
                          <th> </th><th>7</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; context.P&nbsp; = x(1);</ins> </td>
                  </tr><tr>
                          <th> </th><th>8</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; context.I&nbsp; = x(2);</ins> </td>
                  </tr><tr>
                          <th> </th><th>9</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; Info = scicos_simulate(scs_m,list(),context,flag='nw');</ins> </td>
                  </tr><tr>
                          <th> </th><th>10</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; y_error = mean(abs((block_output('values')(:,1) -&nbsp; block_output('values')(:,2))));</ins> </td>
                  </tr><tr>
                          <th> </th><th>11</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; y_diff&nbsp; = mean(abs(diff(block_output('values')(:,2))));</ins> </td>
                  </tr><tr>
                          <th> </th><th>12</th><td class="r"><ins>&nbsp; &nbsp; &nbsp; &nbsp; y = 0.5*y_error + 0.5*1*y_diff; ...</ins> </td>
                  </tr><tr class="last">
                          <th> </th><th>13</th><td class="r"><ins>endfunction</ins> </td>
                  </tr>
            </tbody>
        </table>
      </li>
  </ul>
</div>

        </div>
    </div>
    <div id="altlinks">
      <h3>Download in other formats:</h3>
      <ul>
        <li class="last first">
          <a rel="nofollow" href="/trac/dakota/raw-attachment/ticket/4069/dakota_scilab_script.patch">Original Format</a>
        </li>
      </ul>
    </div>
    </div>
  <div id="footer" lang="en" xml:lang="en">
    <a id="traclogo" href="http://trac.edgewall.org/"><img src="/trac/dakota/chrome/common/trac_logo_mini.png" alt="Trac Powered" /></a>
    <a id="snllogo" href="http://www.sandia.gov/"><img src="/trac/dakota/chrome/shared/sandia_logo.png" alt="Sandia National Laboratories" /></a>
    <p align="center">
      ©2010 Sandia Corporation <br />
      <a href="http://www.sandia.gov/general/privacy-security/index.html">Privacy and Security</a> |
        <a href="mailto:briadam@sandia.gov">Site Contact</a>
    </p>
  </div>
</body>
</html>