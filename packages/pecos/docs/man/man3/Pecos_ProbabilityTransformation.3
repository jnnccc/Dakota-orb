.TH "ProbabilityTransformation" 3 "Wed Dec 27 2017" "Version Version 1.0" "PECOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ProbabilityTransformation \- Base class for all nonlinear distribution transformations\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherited by \fBNatafTransformation\fP, and \fBRosenblattTransformation\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBProbabilityTransformation\fP ()"
.br
.RI "\fIdefault constructor \fP"
.ti -1c
.RI "\fBProbabilityTransformation\fP (const String &prob_trans_type)"
.br
.RI "\fIstandard constructor for envelope \fP"
.ti -1c
.RI "\fBProbabilityTransformation\fP (const \fBProbabilityTransformation\fP &prob_trans)"
.br
.RI "\fIcopy constructor \fP"
.ti -1c
.RI "virtual \fB~ProbabilityTransformation\fP ()"
.br
.RI "\fIdestructor \fP"
.ti -1c
.RI "\fBProbabilityTransformation\fP \fBoperator=\fP (const \fBProbabilityTransformation\fP &prob_trans)"
.br
.RI "\fIassignment operator \fP"
.ti -1c
.RI "virtual void \fBtrans_U_to_X\fP (const RealVector &u_vars, RealVector &x_vars)"
.br
.RI "\fITransformation routine from u-space of uncorrelated standard normal variables to x-space of correlated random variables\&. \fP"
.ti -1c
.RI "virtual void \fBtrans_X_to_U\fP (const RealVector &x_vars, RealVector &u_vars)"
.br
.RI "\fITransformation routine from x-space of correlated random variables to u-space of uncorrelated standard normal variables\&. \fP"
.ti -1c
.RI "virtual void \fBtransform_correlations\fP ()"
.br
.RI "\fIAs part of the Nataf distribution model (Der Kiureghian & Liu, 1986), this procedure modifies the user-specified correlation matrix (corrMatrixX) to account for correlation warping from the nonlinear X->Z transformation and performs a Cholesky factorization to create corrCholeskyFactorZ\&. \fP"
.ti -1c
.RI "virtual void \fBtrans_grad_X_to_U\fP (const RealVector &fn_grad_x, RealVector &fn_grad_u, const RealVector &x_vars, const SizetArray &x_dvv, SizetMultiArrayConstView cv_ids)"
.br
.RI "\fITransformation routine for gradient vector from x-space to u-space\&. \fP"
.ti -1c
.RI "virtual void \fBtrans_grad_X_to_U\fP (const RealVector &fn_grad_x, RealVector &fn_grad_u, const RealMatrix &jacobian_xu, const SizetArray &x_dvv, SizetMultiArrayConstView cv_ids)"
.br
.RI "\fITransformation routine for gradient vector from x-space to u-space\&. \fP"
.ti -1c
.RI "virtual void \fBtrans_grad_X_to_S\fP (const RealVector &fn_grad_x, RealVector &fn_grad_s, const RealVector &x_vars, const SizetArray &x_dvv, SizetMultiArrayConstView cv_ids, SizetMultiArrayConstView acv_ids, const SizetArray &acv_map1_indices, const ShortArray &acv_map2_targets)"
.br
.RI "\fITransformation routine from x-space gradient vector to design space\&. \fP"
.ti -1c
.RI "virtual void \fBtrans_grad_X_to_S\fP (const RealVector &fn_grad_x, RealVector &fn_grad_s, const RealMatrix &jacobian_xs, const SizetArray &x_dvv, SizetMultiArrayConstView cv_ids, SizetMultiArrayConstView acv_ids, const SizetArray &acv_map1_indices, const ShortArray &acv_map2_targets)"
.br
.RI "\fITransformation routine from x-space gradient vector to design space\&. \fP"
.ti -1c
.RI "virtual void \fBtrans_grad_U_to_X\fP (const RealVector &fn_grad_u, RealVector &fn_grad_x, const RealVector &x_vars, const SizetArray &x_dvv, SizetMultiArrayConstView cv_ids)"
.br
.RI "\fITransformation routine for gradient vector from u-space to x-space\&. \fP"
.ti -1c
.RI "virtual void \fBtrans_grad_U_to_X\fP (const RealVector &fn_grad_u, RealVector &fn_grad_x, const RealMatrix &jacobian_ux, const SizetArray &x_dvv, SizetMultiArrayConstView cv_ids)"
.br
.RI "\fITransformation routine for gradient vector from u-space to x-space\&. \fP"
.ti -1c
.RI "virtual void \fBtrans_hess_X_to_U\fP (const RealSymMatrix &fn_hess_x, RealSymMatrix &fn_hess_u, const RealVector &x_vars, const RealVector &fn_grad_x, const SizetArray &x_dvv, SizetMultiArrayConstView cv_ids)"
.br
.RI "\fITransformation routine for Hessian matrix from x-space to u-space\&. \fP"
.ti -1c
.RI "virtual void \fBtrans_hess_X_to_U\fP (const RealSymMatrix &fn_hess_x, RealSymMatrix &fn_hess_u, const RealMatrix &jacobian_xu, const RealSymMatrixArray &hessian_xu, const RealVector &fn_grad_x, const SizetArray &x_dvv, SizetMultiArrayConstView cv_ids)"
.br
.RI "\fITransformation routine for Hessian matrix from x-space to u-space\&. \fP"
.ti -1c
.RI "virtual void \fBjacobian_dX_dU\fP (const RealVector &x_vars, RealMatrix &jacobian_xu)"
.br
.RI "\fIJacobian of x(u) mapping obtained from dX/dZ dZ/dU\&. \fP"
.ti -1c
.RI "virtual void \fBjacobian_dU_dX\fP (const RealVector &x_vars, RealMatrix &jacobian_ux)"
.br
.RI "\fIJacobian of u(x) mapping obtained from dU/dZ dZ/dX\&. \fP"
.ti -1c
.RI "virtual void \fBjacobian_dX_dS\fP (const RealVector &x_vars, RealMatrix &jacobian_xs, SizetMultiArrayConstView cv_ids, SizetMultiArrayConstView acv_ids, const SizetArray &acv_map1_indices, const ShortArray &acv_map2_targets)"
.br
.RI "\fIDesign Jacobian of x(u,s) mapping obtained from differentiation of \fBtrans_U_to_X()\fP with respect to distribution parameters S\&. \fP"
.ti -1c
.RI "virtual void \fBhessian_d2X_dU2\fP (const RealVector &x_vars, RealSymMatrixArray &hessian_xu)"
.br
.RI "\fIHessian of x(u) mapping obtained from dZ/dU^T d^2X/dZ^2 dZ/dU\&. \fP"
.ti -1c
.RI "void \fBcopy\fP (const \fBProbabilityTransformation\fP &prob_trans)"
.br
.RI "\fIperform a deep copy of incoming prob_trans \fP"
.ti -1c
.RI "void \fBinitialize_random_variable_types\fP (const ShortArray &x_types)"
.br
.RI "\fIinitializes randomVarsX (no transformation: u-space not needed) \fP"
.ti -1c
.RI "void \fBinitialize_random_variable_types\fP (const ShortArray &x_types, const ShortArray &\fBu_types\fP)"
.br
.RI "\fIinitializes randomVarsX and ranVarTypesU \fP"
.ti -1c
.RI "void \fBinitialize_random_variable_parameters\fP (const RealVector &cd_l_bnds, const RealVector &cd_u_bnds, const \fBAleatoryDistParams\fP &adp, const \fBEpistemicDistParams\fP &edp, const RealVector &cs_l_bnds, const RealVector &cs_u_bnds)"
.br
.RI "\fIupdates parameters within randomVarsX \fP"
.ti -1c
.RI "void \fBinitialize_random_variable_correlations\fP (const RealSymMatrix &x_corr)"
.br
.RI "\fIinitializes corrMatrixX and correlationFlagX \fP"
.ti -1c
.RI "void \fBreshape_correlation_matrix\fP (size_t num_leading_vars, size_t num_probabilistic_vars, size_t num_trailing_vars)"
.br
.RI "\fIreshape corrMatrixX for an all_variables specification \fP"
.ti -1c
.RI "const std::vector< \fBRandomVariable\fP > & \fBx_random_variables\fP () const "
.br
.RI "\fIreturn randomVarsX \fP"
.ti -1c
.RI "RealRealPairArray \fBx_moments\fP () const "
.br
.RI "\fIassemble means and standard deviations in original space from \fBRandomVariable::moments()\fP \fP"
.ti -1c
.RI "RealRealPairArray \fBu_moments\fP () const "
.br
.RI "\fIassemble means and standard deviations in transformed space combining data from ranVarTypesU with \fBRandomVariable::moments()\fP \fP"
.ti -1c
.RI "RealVector \fBx_means\fP () const "
.br
.RI "\fIassemble means in original space from \fBRandomVariable::mean()\fP \fP"
.ti -1c
.RI "RealVector \fBx_std_deviations\fP () const "
.br
.RI "\fIassemble standard deviations in original space from \fBRandomVariable::standard_deviation()\fP \fP"
.ti -1c
.RI "RealRealPairArray \fBx_bounds\fP () const "
.br
.RI "\fIassemble lower and upper bounds from \fBRandomVariable::bounds()\fP \fP"
.ti -1c
.RI "RealRealPairArray \fBu_bounds\fP () const "
.br
.RI "\fIassemble lower and upper bounds in transformed space combining data from ranVarTypesU with \fBRandomVariable::bounds()\fP \fP"
.ti -1c
.RI "RealVector \fBx_lower_bounds\fP () const "
.br
.RI "\fIassemble lower bounds from \fBRandomVariable::bounds()\fP \fP"
.ti -1c
.RI "RealVector \fBx_upper_bounds\fP () const "
.br
.RI "\fIassemble upper bounds from \fBRandomVariable::bounds()\fP \fP"
.ti -1c
.RI "Real \fBx_pdf\fP (Real x_val, size_t i) const "
.br
.RI "\fIreturn the univariate PDF value for an x-space random variable \fP"
.ti -1c
.RI "Real \fBx_log_pdf\fP (Real x_val, size_t i) const "
.br
.RI "\fIreturn the univariate log PDF value for an x-space random variable \fP"
.ti -1c
.RI "Real \fBx_log_pdf_gradient\fP (Real x_val, size_t i) const "
.br
.RI "\fIreturn the gradient of the univariate log PDF for an x-space random variable \fP"
.ti -1c
.RI "Real \fBx_log_pdf_hessian\fP (Real x_val, size_t i) const "
.br
.RI "\fIreturn the Hessian of the univariate log PDF for an x-space random variable \fP"
.ti -1c
.RI "Real \fBu_pdf\fP (Real u_val, size_t i) const "
.br
.RI "\fIreturn the univariate PDF value for a u-space random variable \fP"
.ti -1c
.RI "Real \fBu_log_pdf\fP (Real u_val, size_t i) const "
.br
.RI "\fIreturn the univariate log PDF value for a u-space random variable \fP"
.ti -1c
.RI "Real \fBu_log_pdf_gradient\fP (Real u_val, size_t i) const "
.br
.RI "\fIreturn the gradient of the univariate log PDF for a u-space random variable \fP"
.ti -1c
.RI "Real \fBu_log_pdf_hessian\fP (Real u_val, size_t i) const "
.br
.RI "\fIreturn the Hessian of the univariate log PDF for a u-space random variable \fP"
.ti -1c
.RI "Real \fBx_pdf\fP (const RealVector &x_pt) const "
.br
.RI "\fIreturn the multivariate PDF value for x-space random variables \fP"
.ti -1c
.RI "Real \fBx_log_pdf\fP (const RealVector &x_pt) const "
.br
.RI "\fIreturn the multivariate log PDF value for x-space random variables \fP"
.ti -1c
.RI "Real \fBu_pdf\fP (const RealVector &u_pt) const "
.br
.RI "\fIreturn the multivariate PDF value for u-space random variables \fP"
.ti -1c
.RI "Real \fBu_log_pdf\fP (const RealVector &u_pt) const "
.br
.RI "\fIreturn the multivariate log PDF value for u-space random variables \fP"
.ti -1c
.RI "template<typename Engine > Real \fBdraw_x_sample\fP (size_t i, Engine &rng) const "
.br
.RI "\fIdraw a sample from an x-space random variable \fP"
.ti -1c
.RI "template<typename Engine > Real \fBdraw_u_sample\fP (size_t i, Engine &rng) const "
.br
.RI "\fIdraw a sample from a u-space random variable \fP"
.ti -1c
.RI "const ShortArray & \fBu_types\fP () const "
.br
.RI "\fIreturn ranVarTypesU \fP"
.ti -1c
.RI "void \fBu_types\fP (const ShortArray &types)"
.br
.RI "\fIset ranVarTypesU \fP"
.ti -1c
.RI "void \fBu_type\fP (short type, size_t i)"
.br
.RI "\fIset ranVarTypesU[i] \fP"
.ti -1c
.RI "void \fBcheck_x_type\fP (size_t i, short x_type) const "
.br
.RI "\fIverify that randomVarsX[i]\&.type() equals x_type \fP"
.ti -1c
.RI "bool \fBx_correlation\fP () const "
.br
.RI "\fIreturn correlationFlagX \fP"
.ti -1c
.RI "const RealSymMatrix & \fBx_correlation_matrix\fP () const "
.br
.RI "\fIreturn corrMatrixX \fP"
.ti -1c
.RI "const RealMatrix & \fBz_correlation_factor\fP () const "
.br
.RI "\fIreturn corrCholeskyFactorZ \fP"
.ti -1c
.RI "bool \fBis_null\fP () const "
.br
.RI "\fIfunction to check modelRep (does this envelope contain a letter) \fP"
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBProbabilityTransformation\fP (\fBBaseConstructor\fP)"
.br
.RI "\fIconstructor initializes the base class part of letter classes (\fBBaseConstructor\fP overloading avoids infinite recursion in the derived class constructors - Coplien, p\&. 139) \fP"
.ti -1c
.RI "void \fBnumerical_design_jacobian\fP (const RealVector &x_vars, bool xs, RealMatrix &num_jacobian_xs, bool zs, RealMatrix &num_jacobian_zs, SizetMultiArrayConstView cv_ids, SizetMultiArrayConstView acv_ids, const SizetArray &acv_map1_indices, const ShortArray &acv_map2_targets)"
.br
.RI "\fIComputes numerical dx/ds and dz/ds Jacobians as requested by xs and zs booleans\&. \fP"
.ti -1c
.RI "void \fBverify_trans_jacobian_hessian\fP (const RealVector &v0)"
.br
.RI "\fIroutine for verification of transformation Jacobian/Hessian terms \fP"
.ti -1c
.RI "void \fBverify_design_jacobian\fP (const RealVector &u0)"
.br
.RI "\fIroutine for verification of design Jacobian terms \fP"
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "std::vector< \fBRandomVariable\fP > \fBrandomVarsX\fP"
.br
.RI "\fIvector of random variables encapsulating distribution parameters and statistical functions (pdf, cdf, etc\&.) \fP"
.ti -1c
.RI "ShortArray \fBranVarTypesU\fP"
.br
.RI "\fIvector of types of each u-space standardized uncertain variable to which each x-space variable is transformed \fP"
.ti -1c
.RI "bool \fBcorrelationFlagX\fP"
.br
.RI "\fIflag for indicating if correlation exists among the x-space uncertain variables \fP"
.ti -1c
.RI "RealSymMatrix \fBcorrMatrixX\fP"
.br
.RI "\fImatrix of random variable correlation coefficients \fP"
.ti -1c
.RI "RealMatrix \fBcorrCholeskyFactorZ\fP"
.br
.RI "\fIcholesky factor of a modified correlation matrix (\fBcorrMatrixX\fP is modified in \fBtransform_correlations()\fP for use in z-space) \fP"
.in -1c
.SS "Static Private Member Functions"

.in +1c
.ti -1c
.RI "static \fBProbabilityTransformation\fP * \fBget_prob_trans\fP (const String &prob_trans_type)"
.br
.RI "\fIUsed only by the standard envelope constructor to initialize probTransRep to the appropriate derived type\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBProbabilityTransformation\fP * \fBprobTransRep\fP"
.br
.RI "\fIpointer to the letter (initialized only for the envelope) \fP"
.ti -1c
.RI "int \fBreferenceCount\fP"
.br
.RI "\fInumber of objects sharing probTransRep \fP"
.in -1c
.SH "Detailed Description"
.PP 
Base class for all nonlinear distribution transformations\&. 

The base class for nonlinear distribution transformations, including Nataf, Rosenblatt, et al\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBProbabilityTransformation\fP ()"

.PP
default constructor The default constructor: probTransRep is NULL in this case\&. This makes it necessary to check for NULL in the copy constructor, assignment operator, and destructor\&. 
.PP
Referenced by ProbabilityTransformation::get_prob_trans()\&.
.SS "\fBProbabilityTransformation\fP (const String & prob_trans_type)"

.PP
standard constructor for envelope Envelope constructor only needs to extract enough data to properly execute get_prob_trans, since \fBProbabilityTransformation(BaseConstructor)\fP builds the actual base class data for the derived transformations\&. 
.PP
References ProbabilityTransformation::get_prob_trans(), and ProbabilityTransformation::probTransRep\&.
.SS "\fBProbabilityTransformation\fP (const \fBProbabilityTransformation\fP & prob_trans)"

.PP
copy constructor Copy constructor manages sharing of probTransRep and incrementing of referenceCount\&. 
.PP
References ProbabilityTransformation::operator=(), ProbabilityTransformation::probTransRep, and ProbabilityTransformation::referenceCount\&.
.SS "~\fBProbabilityTransformation\fP ()\fC [virtual]\fP"

.PP
destructor Destructor decrements referenceCount and only deletes probTransRep when referenceCount reaches zero\&. 
.PP
References ProbabilityTransformation::copy(), ProbabilityTransformation::probTransRep, and ProbabilityTransformation::referenceCount\&.
.SS "\fBProbabilityTransformation\fP (\fBBaseConstructor\fP)\fC [protected]\fP"

.PP
constructor initializes the base class part of letter classes (\fBBaseConstructor\fP overloading avoids infinite recursion in the derived class constructors - Coplien, p\&. 139) This constructor is the one which must build the base class data for all derived classes\&. \fBget_prob_trans()\fP instantiates a derived class letter and the derived constructor selects this base class constructor in its initialization list (to avoid recursion in the base class constructor calling \fBget_prob_trans()\fP again)\&. Since the letter IS the representation, its rep pointer is set to NULL (an uninitialized pointer causes problems in ~ProbabilityTransformation)\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBProbabilityTransformation\fP operator= (const \fBProbabilityTransformation\fP & prob_trans)"

.PP
assignment operator Assignment operator decrements referenceCount for old probTransRep, assigns new probTransRep, and increments referenceCount for new probTransRep\&. 
.PP
References ProbabilityTransformation::probTransRep, and ProbabilityTransformation::referenceCount\&.
.PP
Referenced by ProbabilityTransformation::ProbabilityTransformation()\&.
.SS "void copy (const \fBProbabilityTransformation\fP & prob_trans)"

.PP
perform a deep copy of incoming prob_trans This function provides a deep copy (the copy constructor supports shallow copies with shared reps) and is commonly used to publish tranformation data when the Model variables are in a transformed space (e\&.g\&., u-space) and x-space data may not be generated directly\&. This allows for the use of inverse transformations to return the transformed space variables to their original states\&. 
.PP
References ProbabilityTransformation::copy(), ProbabilityTransformation::corrCholeskyFactorZ, ProbabilityTransformation::correlationFlagX, ProbabilityTransformation::corrMatrixX, ProbabilityTransformation::initialize_random_variable_types(), ProbabilityTransformation::probTransRep, ProbabilityTransformation::randomVarsX, and ProbabilityTransformation::ranVarTypesU\&.
.PP
Referenced by ProbabilityTransformation::copy(), and ProbabilityTransformation::~ProbabilityTransformation()\&.
.SS "void numerical_design_jacobian (const RealVector & x_vars, bool xs, RealMatrix & num_jacobian_xs, bool zs, RealMatrix & num_jacobian_zs, SizetMultiArrayConstView cv_ids, SizetMultiArrayConstView acv_ids, const SizetArray & acv_map1_indices, const ShortArray & acv_map2_targets)\fC [protected]\fP"

.PP
Computes numerical dx/ds and dz/ds Jacobians as requested by xs and zs booleans\&. This procedure computes numerical derivatives of x and/or z with respect to distribution parameters s, and is used by \fBjacobian_dX_dS()\fP to provide data that is not available analytically\&. Numerical dz/ds involves dL/ds (z(s) = L(s) u and dz/ds = dL/ds u) and is needed to evaluate dx/ds semi-analytically for correlated variables\&. Numerical dx/ds is needed for distributions lacking simple closed-form CDF expressions (beta and gamma distributions)\&. 
.PP
References ProbabilityTransformation::corrCholeskyFactorZ, ProbabilityTransformation::randomVarsX, ProbabilityTransformation::trans_U_to_X(), ProbabilityTransformation::trans_X_to_U(), ProbabilityTransformation::transform_correlations(), and ProbabilityTransformation::verify_trans_jacobian_hessian()\&.
.PP
Referenced by ProbabilityTransformation::hessian_d2X_dU2(), NatafTransformation::jacobian_dX_dS(), and ProbabilityTransformation::verify_design_jacobian()\&.
.SS "\fBProbabilityTransformation\fP * get_prob_trans (const String & prob_trans_type)\fC [static]\fP, \fC [private]\fP"

.PP
Used only by the standard envelope constructor to initialize probTransRep to the appropriate derived type\&. Used only by the envelope constructor to initialize probTransRep to the appropriate derived type\&. 
.PP
References ProbabilityTransformation::ProbabilityTransformation()\&.
.PP
Referenced by ProbabilityTransformation::ProbabilityTransformation()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for PECOS from the source code\&.
