.TH "JacobiOrthogPolynomial" 3 "Wed Dec 27 2017" "Version Version 1.0" "PECOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
JacobiOrthogPolynomial \- Derived orthogonal polynomial class for Jacobi polynomials\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBOrthogonalPolynomial\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBJacobiOrthogPolynomial\fP ()"
.br
.RI "\fIdefault constructor \fP"
.ti -1c
.RI "\fBJacobiOrthogPolynomial\fP (Real \fBalpha_stat\fP, Real \fBbeta_stat\fP)"
.br
.RI "\fIstandard constructor \fP"
.ti -1c
.RI "\fB~JacobiOrthogPolynomial\fP ()"
.br
.RI "\fIdestructor \fP"
.ti -1c
.RI "Real \fBweight_factor\fP ()"
.br
.RI "\fIcalculate and return wtFactor based on alphaPoly and betaPoly \fP"
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "Real \fBtype1_value\fP (Real x, unsigned short order)"
.br
.RI "\fIretrieve the value of the n_th type 1 polynomial for a given parameter x using traditional characteristic polynomial formulation \fP"
.ti -1c
.RI "Real \fBtype1_gradient\fP (Real x, unsigned short order)"
.br
.RI "\fIretrieve the gradient of the n_th type 1 polynomial for a given parameter x using traditional characteristic polynomial formulation \fP"
.ti -1c
.RI "Real \fBtype1_hessian\fP (Real x, unsigned short order)"
.br
.RI "\fIretrieve the Hessian of the n_th type 1 polynomial for a given parameter x using traditional characteristic polynomial formulation \fP"
.ti -1c
.RI "Real \fBnorm_squared\fP (unsigned short order)"
.br
.RI "\fIreturns the norm-squared of the n_th order polynomial defined by the inner product <Poly_n, Poly_n> = ||Poly_n||^2 \fP"
.ti -1c
.RI "const RealArray & \fBcollocation_points\fP (unsigned short order)"
.br
.RI "\fIreturn collocation points corresponding to orthogonal polynomial order n \fP"
.ti -1c
.RI "const RealArray & \fBtype1_collocation_weights\fP (unsigned short order)"
.br
.RI "\fIreturn the type 1 collocation weights corresponding to a point set of size order \fP"
.ti -1c
.RI "Real \fBalpha_polynomial\fP () const "
.br
.RI "\fIreturn alphaPoly \fP"
.ti -1c
.RI "Real \fBbeta_polynomial\fP () const "
.br
.RI "\fIreturn betaPoly \fP"
.ti -1c
.RI "void \fBalpha_stat\fP (Real alpha)"
.br
.RI "\fIset betaPoly using the conversion betaPoly = alpha_stat - 1\&. \fP"
.ti -1c
.RI "void \fBbeta_stat\fP (Real beta)"
.br
.RI "\fIset alphaPoly using the conversion alphaPoly = beta_stat - 1\&. \fP"
.ti -1c
.RI "bool \fBparameterized\fP () const "
.br
.RI "\fIoverride default definition (false) since Jacobi is parameterized \fP"
.ti -1c
.RI "Real \fBlength_scale\fP () const "
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "Real \fBalphaPoly\fP"
.br
.RI "\fIthe alpha parameter for the Jacobi polynomial as defined by Abramowitz and Stegun (differs from statistical PDF notation) \fP"
.ti -1c
.RI "Real \fBbetaPoly\fP"
.br
.RI "\fIthe beta parameter for the Jacobi polynomial as defined by Abramowitz and Stegun (differs from statistical PDF notation) \fP"
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Derived orthogonal polynomial class for Jacobi polynomials\&. 

The \fBJacobiOrthogPolynomial\fP class evaluates a univariate Jacobi polynomial P^(alpha,beta)_n of a particular order\&. These polynomials are orthogonal with respect to the weight function (1-x)^alpha (1+x)^beta when integrated over the support range of [-1,+1]\&. This corresponds to the probability density function f(x) = (1-x)^alpha (1+x)^beta / (2^(alpha+beta+1) B(alpha+1,beta+1)) for the beta distribution for [L,U]=[-1,1], where common statistical PDF notation conventions (see, e\&.g\&., the uncertain variables section in the DAKOTA Reference Manual) and the Abramowiz and Stegun orthogonal polynomial conventions are inverted and require conversion in this case (alpha_poly = beta_stat - 1; beta_poly = alpha_stat - 1 with the poly definitions used in both cases above)\&. It enables (mixed) multidimensional orthogonal polynomial basis functions within \fBOrthogPolyApproximation\fP\&. A special case is the \fBLegendreOrthogPolynomial\fP (implemented separately), for which alpha_poly = beta_poly = 0\&. 
.SH "Member Function Documentation"
.PP 
.SS "Real type1_value (Real x, unsigned short n)\fC [protected]\fP, \fC [virtual]\fP"

.PP
retrieve the value of the n_th type 1 polynomial for a given parameter x using traditional characteristic polynomial formulation For orthogonal polynomials, n specifies the order of the polynomial, whereas for interpolation polynomials, it identifies the interpolant for the n-th point\&. 
.PP
Reimplemented from \fBBasisPolynomial\fP\&.
.PP
References JacobiOrthogPolynomial::alphaPoly, JacobiOrthogPolynomial::betaPoly, and BasisPolynomial::pochhammer()\&.
.PP
Referenced by JacobiOrthogPolynomial::type1_collocation_weights(), and JacobiOrthogPolynomial::type1_gradient()\&.
.SS "Real type1_gradient (Real x, unsigned short n)\fC [protected]\fP, \fC [virtual]\fP"

.PP
retrieve the gradient of the n_th type 1 polynomial for a given parameter x using traditional characteristic polynomial formulation For orthogonal polynomials, n specifies the order of the polynomial, whereas for interpolation polynomials, it identifies the interpolant for the n-th point\&. 
.PP
Reimplemented from \fBBasisPolynomial\fP\&.
.PP
References JacobiOrthogPolynomial::alphaPoly, JacobiOrthogPolynomial::betaPoly, BasisPolynomial::pochhammer(), and JacobiOrthogPolynomial::type1_value()\&.
.PP
Referenced by JacobiOrthogPolynomial::type1_collocation_weights(), and JacobiOrthogPolynomial::type1_hessian()\&.
.SS "Real type1_hessian (Real x, unsigned short n)\fC [protected]\fP, \fC [virtual]\fP"

.PP
retrieve the Hessian of the n_th type 1 polynomial for a given parameter x using traditional characteristic polynomial formulation For orthogonal polynomials, n specifies the order of the polynomial, whereas for interpolation polynomials, it identifies the interpolant for the n-th point\&. 
.PP
Reimplemented from \fBBasisPolynomial\fP\&.
.PP
References JacobiOrthogPolynomial::alphaPoly, JacobiOrthogPolynomial::betaPoly, BasisPolynomial::pochhammer(), and JacobiOrthogPolynomial::type1_gradient()\&.
.SS "Real norm_squared (unsigned short n)\fC [protected]\fP, \fC [virtual]\fP"

.PP
returns the norm-squared of the n_th order polynomial defined by the inner product <Poly_n, Poly_n> = ||Poly_n||^2 This is defined only for orthogonal polynomials\&. 
.PP
Reimplemented from \fBBasisPolynomial\fP\&.
.PP
References JacobiOrthogPolynomial::alphaPoly, JacobiOrthogPolynomial::betaPoly, JacobiOrthogPolynomial::collocation_points(), BasisPolynomial::factorial(), and BasisPolynomial::pochhammer()\&.
.PP
Referenced by JacobiOrthogPolynomial::type1_collocation_weights()\&.
.SS "const RealArray & collocation_points (unsigned short n)\fC [protected]\fP, \fC [virtual]\fP"

.PP
return collocation points corresponding to orthogonal polynomial order n This is defined for orthogonal and piecewise interpolation polynomials\&. 
.PP
Reimplemented from \fBBasisPolynomial\fP\&.
.PP
References JacobiOrthogPolynomial::alphaPoly, JacobiOrthogPolynomial::betaPoly, OrthogonalPolynomial::collocPoints, OrthogonalPolynomial::collocWeights, JacobiOrthogPolynomial::type1_collocation_weights(), and JacobiOrthogPolynomial::weight_factor()\&.
.PP
Referenced by JacobiOrthogPolynomial::norm_squared(), and JacobiOrthogPolynomial::type1_collocation_weights()\&.
.SS "const RealArray & type1_collocation_weights (unsigned short order)\fC [protected]\fP, \fC [virtual]\fP"

.PP
return the type 1 collocation weights corresponding to a point set of size order This is defined for orthogonal and piecewise interpolation polynomials\&. 
.PP
Reimplemented from \fBBasisPolynomial\fP\&.
.PP
References JacobiOrthogPolynomial::alphaPoly, JacobiOrthogPolynomial::betaPoly, JacobiOrthogPolynomial::collocation_points(), OrthogonalPolynomial::collocPoints, OrthogonalPolynomial::collocWeights, JacobiOrthogPolynomial::norm_squared(), JacobiOrthogPolynomial::type1_gradient(), JacobiOrthogPolynomial::type1_value(), and JacobiOrthogPolynomial::weight_factor()\&.
.PP
Referenced by JacobiOrthogPolynomial::collocation_points()\&.
.SS "Real length_scale () const\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP"
return max(mean, stdev) on [-1,1]\&. 
.PP
Reimplemented from \fBBasisPolynomial\fP\&.
.PP
References JacobiOrthogPolynomial::alphaPoly, and JacobiOrthogPolynomial::betaPoly\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for PECOS from the source code\&.
