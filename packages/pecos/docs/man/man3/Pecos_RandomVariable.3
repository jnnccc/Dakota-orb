.TH "RandomVariable" 3 "Wed Dec 27 2017" "Version Version 1.0" "PECOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
RandomVariable \- base class for random variable hierarchy  

.SH SYNOPSIS
.br
.PP
.PP
Inherited by \fBBinomialRandomVariable\fP, \fBExponentialRandomVariable\fP, \fBFrechetRandomVariable\fP, \fBGeometricRandomVariable\fP, \fBGumbelRandomVariable\fP, \fBHistogramBinRandomVariable\fP, \fBHistogramPtRandomVariable\fP, \fBHypergeometricRandomVariable\fP, \fBLognormalRandomVariable\fP, \fBNegBinomialRandomVariable\fP, \fBNormalRandomVariable\fP, \fBPoissonRandomVariable\fP, \fBUniformRandomVariable\fP, and \fBWeibullRandomVariable\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBRandomVariable\fP ()"
.br
.RI "\fIdefault constructor \fP"
.ti -1c
.RI "\fBRandomVariable\fP (short ran_var_type)"
.br
.RI "\fIstandard constructor for envelope \fP"
.ti -1c
.RI "\fBRandomVariable\fP (const \fBRandomVariable\fP &ran_var)"
.br
.RI "\fIcopy constructor \fP"
.ti -1c
.RI "virtual \fB~RandomVariable\fP ()"
.br
.RI "\fIdestructor \fP"
.ti -1c
.RI "\fBRandomVariable\fP \fBoperator=\fP (const \fBRandomVariable\fP &ran_var)"
.br
.RI "\fIassignment operator \fP"
.ti -1c
.RI "virtual Real \fBcdf\fP (Real x) const "
.br
.RI "\fIreturn the cumulative distribution function value of the random variable at x \fP"
.ti -1c
.RI "virtual Real \fBinverse_cdf\fP (Real p_cdf) const "
.br
.RI "\fIreturn the x value corresponding to a cumulative probability \fP"
.ti -1c
.RI "virtual Real \fBccdf\fP (Real x) const "
.br
.RI "\fIreturn the complementary cumulative distribution function value of the random variable at x \fP"
.ti -1c
.RI "virtual Real \fBinverse_ccdf\fP (Real p_ccdf) const "
.br
.RI "\fIreturn the x value corresponding to a complementary cumulative probability \fP"
.ti -1c
.RI "virtual Real \fBpdf\fP (Real x) const "
.br
.RI "\fIreturn the value of the random variable's probability density function at x \fP"
.ti -1c
.RI "virtual Real \fBpdf_gradient\fP (Real x) const "
.br
.RI "\fIreturn the gradient of the random variable's probability density function at x \fP"
.ti -1c
.RI "virtual Real \fBpdf_hessian\fP (Real x) const "
.br
.RI "\fIreturn the hessian of the random variable's probability density function at x \fP"
.ti -1c
.RI "virtual Real \fBlog_pdf\fP (Real x) const "
.br
.RI "\fIreturn the value of the natural log of the random variable's probability density function at x (useful for calculations of log density in Bayesian methods) \fP"
.ti -1c
.RI "virtual Real \fBlog_pdf_gradient\fP (Real x) const "
.br
.RI "\fIreturn the gradient of the natural log of the random variable's probability density function at x (useful for defining MCMC proposal distributions in Bayesian methods) \fP"
.ti -1c
.RI "virtual Real \fBlog_pdf_hessian\fP (Real x) const "
.br
.RI "\fIreturn the Hessian of the natural log of the random variable's probability density function at x (useful for defining MCMC proposal distributions in Bayesian methods) \fP"
.ti -1c
.RI "virtual Real \fBinverse_standard_cdf\fP (Real p_cdf) const "
.br
.RI "\fIreturn the x value for a standardized probability distribution corresponding to a cumulative probability \fP"
.ti -1c
.RI "virtual Real \fBstandard_pdf\fP (Real z) const "
.br
.RI "\fIreturn the value of a standardized random variable's probability density function at x \fP"
.ti -1c
.RI "virtual Real \fBlog_standard_pdf\fP (Real z) const "
.br
.RI "\fIreturn the natural log of a standardized random variable's probability density function at x (useful for calculations of log density in Bayesian methods) \fP"
.ti -1c
.RI "virtual Real \fBlog_standard_pdf_gradient\fP (Real z) const "
.br
.RI "\fIreturn the gradient of the natural log of a standardized random variable's probability density function at x (useful for calculations of log density in Bayesian methods) \fP"
.ti -1c
.RI "virtual Real \fBlog_standard_pdf_hessian\fP (Real z) const "
.br
.RI "\fIreturn the Hessian of the natural log of a standardized random variable's probability density function at x (useful for calculations of log density in Bayesian methods) \fP"
.ti -1c
.RI "virtual Real \fBto_standard\fP (Real x) const "
.br
.RI "\fIscale variable value x from current to standardized distribution \fP"
.ti -1c
.RI "virtual Real \fBfrom_standard\fP (Real z) const "
.br
.RI "\fIscale variable value z from standardized to current distribution \fP"
.ti -1c
.RI "virtual Real \fBparameter\fP (short dist_param) const "
.br
.RI "\fIreturn the value of the named distribution parameter \fP"
.ti -1c
.RI "virtual void \fBparameter\fP (short dist_param, Real val)"
.br
.RI "\fIupdate the value of the named distribution parameter \fP"
.ti -1c
.RI "virtual Real \fBmean\fP () const "
.br
.RI "\fIreturn the distribution mean \fP"
.ti -1c
.RI "virtual Real \fBmedian\fP () const "
.br
.RI "\fIreturn the distribution mode \fP"
.ti -1c
.RI "virtual Real \fBmode\fP () const "
.br
.RI "\fIreturn the distribution mode \fP"
.ti -1c
.RI "virtual Real \fBstandard_deviation\fP () const "
.br
.RI "\fIreturn the distribution variance \fP"
.ti -1c
.RI "virtual Real \fBvariance\fP () const "
.br
.RI "\fIreturn the distribution variance \fP"
.ti -1c
.RI "virtual RealRealPair \fBmoments\fP () const "
.br
.RI "\fIreturn the distribution mean and standard deviation as a pair \fP"
.ti -1c
.RI "virtual RealRealPair \fBbounds\fP () const "
.br
.RI "\fIreturn the distribution lower and upper bounds as a pair \fP"
.ti -1c
.RI "virtual Real \fBcoefficient_of_variation\fP () const "
.br
.RI "\fIcompute the coefficient of variation (used to compute selected correlation warping factors); defined for semi-infinite distributions with nonzero mean (lognormal, exponential, gamma, frechet, weibull) \fP"
.ti -1c
.RI "virtual Real \fBcorrelation_warping_factor\fP (const \fBRandomVariable\fP &rv, Real corr) const "
.br
.RI "\fIcompute the warping factor for correlation between the current variable and the one passed in (used in \fBNatafTransformation\fP) \fP"
.ti -1c
.RI "virtual Real \fBdx_ds\fP (short dist_param, short u_type, Real x, Real z) const "
.br
.RI "\fIcompute the design Jacobian from differentiating the X->Z mapping with respect to the distibution parameter s \fP"
.ti -1c
.RI "virtual Real \fBdz_ds_factor\fP (short u_type, Real x, Real z) const "
.br
.RI "\fIcompute the mapping-specific factor that is multiplied by dz/ds for contributions to the dx/ds design Jacobian in the case of correlated random variables (dz/ds is evaluated numerically and multiplied by this analytic factor) \fP"
.ti -1c
.RI "template<typename Engine > Real \fBdraw_sample\fP (Engine &rng) const "
.br
.RI "\fIDraw a sample from the distribution using inverse_cdf on uniform[0,1]\&. \fP"
.ti -1c
.RI "template<typename Engine > Real \fBdraw_standard_sample\fP (Engine &rng) const "
.br
.RI "\fIDraw a sample from the distribution using inverse_cdf on uniform[0,1]\&. \fP"
.ti -1c
.RI "void \fBtype\fP (short ran_var_type)"
.br
.RI "\fIset ranVarType \fP"
.ti -1c
.RI "short \fBtype\fP () const "
.br
.RI "\fIget ranVarType \fP"
.ti -1c
.RI "\fBRandomVariable\fP * \fBrandom_variable_rep\fP () const "
.br
.RI "\fIreturns ranVarRep for access to derived class member functions that are not mapped to the base level \fP"
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBRandomVariable\fP (\fBBaseConstructor\fP)"
.br
.RI "\fIconstructor initializes the base class part of letter classes (\fBBaseConstructor\fP overloading avoids infinite recursion in the derived class constructors - Coplien, p\&. 139) \fP"
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "short \fBranVarType\fP"
.br
.RI "\fIenumeration value indicating type of random variable \fP"
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBRandomVariable\fP * \fBget_random_variable\fP (short ran_var_type)"
.br
.RI "\fIUsed only by the standard envelope constructor to initialize ranVarRep to the appropriate derived type\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "boost::uniform_real< Real > \fBuniformSampler\fP"
.br
.RI "\fIdraws real samples on [0,1] \fP"
.ti -1c
.RI "\fBRandomVariable\fP * \fBranVarRep\fP"
.br
.RI "\fIpointer to the letter (initialized only for the envelope) \fP"
.ti -1c
.RI "int \fBreferenceCount\fP"
.br
.RI "\fInumber of objects sharing ranVarRep \fP"
.in -1c
.SH "Detailed Description"
.PP 
base class for random variable hierarchy 

This class enables \fBcdf()\fP, \fBccdf()\fP, \fBinverse_cdf()\fP, \fBinverse_ccdf()\fP, \fBpdf()\fP, \fBpdf_gradient()\fP, \fBpdf_hessian()\fP, and related random variable utilities from contained distribution parameters\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBRandomVariable\fP ()"

.PP
default constructor The default constructor: ranVarRep is NULL in this case\&. This makes it necessary to check for NULL in the copy constructor, assignment operator, and destructor\&. 
.SS "\fBRandomVariable\fP (short ran_var_type)"

.PP
standard constructor for envelope Envelope constructor only needs to extract enough data to properly execute get_random_variable, since \fBRandomVariable(BaseConstructor)\fP builds the actual base class data for the derived basis functions\&. 
.PP
References RandomVariable::get_random_variable(), and RandomVariable::ranVarRep\&.
.SS "\fBRandomVariable\fP (const \fBRandomVariable\fP & ran_var)"

.PP
copy constructor Copy constructor manages sharing of ranVarRep and incrementing of referenceCount\&. 
.PP
References RandomVariable::ranVarRep, and RandomVariable::referenceCount\&.
.SS "~\fBRandomVariable\fP ()\fC [virtual]\fP"

.PP
destructor Destructor decrements referenceCount and only deletes ranVarRep when referenceCount reaches zero\&. 
.PP
References RandomVariable::ranVarRep, and RandomVariable::referenceCount\&.
.SS "\fBRandomVariable\fP (\fBBaseConstructor\fP)\fC [protected]\fP"

.PP
constructor initializes the base class part of letter classes (\fBBaseConstructor\fP overloading avoids infinite recursion in the derived class constructors - Coplien, p\&. 139) This constructor is the one which must build the base class data for all derived classes\&. \fBget_random_variable()\fP instantiates a derived class letter and the derived constructor selects this base class constructor in its initialization list (to avoid recursion in the base class constructor calling \fBget_random_variable()\fP again)\&. Since the letter IS the representation, its rep pointer is set to NULL (an uninitialized pointer causes problems in ~RandomVariable)\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBRandomVariable\fP operator= (const \fBRandomVariable\fP & ran_var)"

.PP
assignment operator Assignment operator decrements referenceCount for old ranVarRep, assigns new ranVarRep, and increments referenceCount for new ranVarRep\&. 
.PP
References RandomVariable::ranVarRep, and RandomVariable::referenceCount\&.
.SS "RealRealPair moments () const\fC [virtual]\fP"

.PP
return the distribution mean and standard deviation as a pair default is only overridden when more efficient to compute together 
.PP
Reimplemented in \fBBoundedLognormalRandomVariable\fP, \fBBoundedNormalRandomVariable\fP, \fBHistogramBinRandomVariable\fP, and \fBHistogramPtRandomVariable\fP\&.
.PP
References RandomVariable::mean(), RandomVariable::moments(), RandomVariable::ranVarRep, and RandomVariable::standard_deviation()\&.
.PP
Referenced by RandomVariable::moments()\&.
.SS "Real coefficient_of_variation () const\fC [virtual]\fP"

.PP
compute the coefficient of variation (used to compute selected correlation warping factors); defined for semi-infinite distributions with nonzero mean (lognormal, exponential, gamma, frechet, weibull) default is only overridden when more efficient to compute together 
.PP
Reimplemented in \fBExponentialRandomVariable\fP, \fBBoundedLognormalRandomVariable\fP, \fBBoundedNormalRandomVariable\fP, \fBLognormalRandomVariable\fP, \fBHistogramBinRandomVariable\fP, and \fBHistogramPtRandomVariable\fP\&.
.PP
References RandomVariable::coefficient_of_variation(), RandomVariable::correlation_warping_factor(), RandomVariable::mean(), RandomVariable::ranVarRep, and RandomVariable::standard_deviation()\&.
.PP
Referenced by RandomVariable::coefficient_of_variation(), WeibullRandomVariable::correlation_warping_factor(), FrechetRandomVariable::correlation_warping_factor(), GumbelRandomVariable::correlation_warping_factor(), LognormalRandomVariable::correlation_warping_factor(), UniformRandomVariable::correlation_warping_factor(), NormalRandomVariable::correlation_warping_factor(), GammaRandomVariable::correlation_warping_factor(), and ExponentialRandomVariable::correlation_warping_factor()\&.
.SS "\fBRandomVariable\fP * get_random_variable (short ran_var_type)\fC [private]\fP"

.PP
Used only by the standard envelope constructor to initialize ranVarRep to the appropriate derived type\&. Used only by the envelope constructor to initialize ranVarRep to the appropriate derived type\&. 
.PP
References RandomVariable::ranVarType\&.
.PP
Referenced by RandomVariable::RandomVariable()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for PECOS from the source code\&.
