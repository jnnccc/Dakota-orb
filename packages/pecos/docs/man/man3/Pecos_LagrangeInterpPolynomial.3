.TH "LagrangeInterpPolynomial" 3 "Wed Dec 27 2017" "Version Version 1.0" "PECOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
LagrangeInterpPolynomial \- Derived basis polynomial class for 1-D Lagrange interpolation polynomials\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBInterpolationPolynomial\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBLagrangeInterpPolynomial\fP ()"
.br
.RI "\fIdefault constructor \fP"
.ti -1c
.RI "\fBLagrangeInterpPolynomial\fP (const RealArray &interp_pts)"
.br
.RI "\fIstandard constructor \fP"
.ti -1c
.RI "\fB~LagrangeInterpPolynomial\fP ()"
.br
.RI "\fIdestructor \fP"
.ti -1c
.RI "Real \fBtype1_value\fP (unsigned short i)"
.br
.RI "\fIretrieve the value of the i_th Lagrange polynomial for a given parameter x using barycentric formulation \fP"
.ti -1c
.RI "Real \fBtype1_value\fP (Real x, unsigned short i)"
.br
.RI "\fIretrieve the value of the i_th Lagrange polynomial for a given parameter x using traditional characteristic polynomial formulation \fP"
.ti -1c
.RI "Real \fBtype1_gradient\fP (unsigned short i)"
.br
.RI "\fIretrieve the gradient of the i_th Lagrange polynomial for a given parameter x using barycentric formulation \fP"
.ti -1c
.RI "Real \fBtype1_gradient\fP (Real x, unsigned short i)"
.br
.RI "\fIretrieve the gradient of the i_th Lagrange polynomial for a given parameter x using traditional characteristic polynomial formulation \fP"
.ti -1c
.RI "void \fBset_new_point\fP (Real x, short request_order)"
.br
.ti -1c
.RI "void \fBset_new_point\fP (Real x, short request_order, const UShortArray &delta_key)"
.br
.ti -1c
.RI "size_t \fBexact_index\fP () const "
.br
.RI "\fIreturns the index of a collocation point that is an exact match with the point to be interpolated (from \fBset_new_point()\fP) if detected (_NPOS if not) \fP"
.ti -1c
.RI "size_t \fBexact_delta_index\fP () const "
.br
.RI "\fIreturns the index of a hierarchical increment to the interpolation points that is an exact match with the point to be interpolated (from \fBset_new_point()\fP) if detected (_NPOS if not) \fP"
.ti -1c
.RI "const RealVector & \fBbarycentric_value_factors\fP () const "
.br
.RI "\fIreturn the barycentric value factors \fP"
.ti -1c
.RI "const RealVector & \fBbarycentric_gradient_factors\fP () const "
.br
.RI "\fIreturn the barycentric gradient factors \fP"
.ti -1c
.RI "Real \fBbarycentric_value_factor\fP (unsigned short i) const "
.br
.RI "\fIreturn a particular barycentric value factor \fP"
.ti -1c
.RI "Real \fBbarycentric_gradient_factor\fP (unsigned short i) const "
.br
.RI "\fIreturn a particular barycentric gradient factor \fP"
.ti -1c
.RI "Real \fBbarycentric_value_factor_sum\fP () const "
.br
.RI "\fIreturn the sum of all barycentric value factors for use in computing the barycentric interpolant denominator \fP"
.ti -1c
.RI "Real \fBbarycentric_difference_product\fP () const "
.br
.RI "\fIreturn the product of all differences between the interpolation points and a current point \fP"
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBprecompute_data\fP ()"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBinit_new_point\fP (Real x, short request_order, short &compute_order)"
.br
.RI "\fIdefine compute order from request order and newPoint match \fP"
.ti -1c
.RI "void \fBallocate_factors\fP (short compute_order)"
.br
.RI "\fIbased on compute order, size barycentric value/gradient factors \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "RealVector \fBbcWeights\fP"
.br
.RI "\fIset of denominator products calculated from interpPts in \fBprecompute_data()\fP; in barycentric formulations, these are the weights \fP"
.ti -1c
.RI "Real \fBnewPoint\fP"
.br
.RI "\fIthe parameter value for evaluation of the interpolant \fP"
.ti -1c
.RI "short \fBnewPtOrder\fP"
.br
.RI "\fIorder of data that has been precomputed at newPoint \fP"
.ti -1c
.RI "size_t \fBexactIndex\fP"
.br
.RI "\fIindex of interpolation point that exactly matches the interpolated value x \fP"
.ti -1c
.RI "size_t \fBexactDeltaIndex\fP"
.br
.RI "\fIindex within a hierarchical increment to the interpolation points that exactly matches the interpolated value x \fP"
.ti -1c
.RI "Real \fBdiffProduct\fP"
.br
.RI "\fIproduct of point differences (x-x_j) for a particular newPoint x and interpPts x_j \fP"
.ti -1c
.RI "RealVector \fBbcValueFactors\fP"
.br
.RI "\fIterms bcWeights[j]/(x-x[j]) from barycentric formulation \fP"
.ti -1c
.RI "Real \fBbcValueFactorSum\fP"
.br
.RI "\fIsum of bcValueFactors used for evaluating barycentric interpolant denominator term \fP"
.ti -1c
.RI "RealVector \fBbcGradFactors\fP"
.br
.RI "\fIterms for gradients of barycentric interpolants \fP"
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Derived basis polynomial class for 1-D Lagrange interpolation polynomials\&. 

The \fBLagrangeInterpPolynomial\fP class evaluates a univariate Lagrange interpolation polynomial\&. The order of the polynomial is dictated by the number of interpolation points (order = N_p - 1)\&. It enables multidimensional interpolants within \fBInterpPolyApproximation\fP\&. This class supports both the traditional characteristic polynomial form of Lagrange interpolation as well as barycentric Lagrange interpolation (the second form from Berrut and Trefethen, 2004)\&. The former is used for actual evaluation of 1D polynomial values (when needed), whereas the latter allows alternative interpolant evaluations with additional precomputation that improve efficiency from O(n^2) evaluations to O(n)\&. 
.SH "Member Function Documentation"
.PP 
.SS "Real type1_value (unsigned short i)\fC [virtual]\fP"

.PP
retrieve the value of the i_th Lagrange polynomial for a given parameter x using barycentric formulation Compute value of the Lagrange polynomial (1st barycentric form) corresponding to interpolation point i using data from previous call to \fBset_new_point()\fP\&. 
.PP
Reimplemented from \fBBasisPolynomial\fP\&.
.PP
References LagrangeInterpPolynomial::bcValueFactors, LagrangeInterpPolynomial::diffProduct, and LagrangeInterpPolynomial::exactIndex\&.
.SS "Real type1_value (Real x, unsigned short i)\fC [virtual]\fP"

.PP
retrieve the value of the i_th Lagrange polynomial for a given parameter x using traditional characteristic polynomial formulation Compute value of the Lagrange polynomial (traditional characteristic polynomial form) corresponding to interpolation point i\&. 
.PP
Reimplemented from \fBBasisPolynomial\fP\&.
.PP
References LagrangeInterpPolynomial::bcWeights, and InterpolationPolynomial::interpPts\&.
.SS "Real type1_gradient (unsigned short i)\fC [virtual]\fP"

.PP
retrieve the gradient of the i_th Lagrange polynomial for a given parameter x using barycentric formulation Compute derivative with respect to x of the Lagrange polynomial (1st barycentric form) corresponding to interpolation point i using data from previous call to \fBset_new_point()\fP\&. 
.PP
Reimplemented from \fBBasisPolynomial\fP\&.
.PP
References LagrangeInterpPolynomial::bcGradFactors, LagrangeInterpPolynomial::diffProduct, and LagrangeInterpPolynomial::exactIndex\&.
.SS "Real type1_gradient (Real x, unsigned short i)\fC [virtual]\fP"

.PP
retrieve the gradient of the i_th Lagrange polynomial for a given parameter x using traditional characteristic polynomial formulation Compute derivative with respect to x of the Lagrange polynomial (traditional characteristic polynomial form) corresponding to interpolation point i\&. 
.PP
Reimplemented from \fBBasisPolynomial\fP\&.
.PP
References LagrangeInterpPolynomial::bcWeights, InterpolationPolynomial::interpPts, and Pecos::sum()\&.
.SS "void set_new_point (Real x, short request_order)\fC [virtual]\fP"
Define the bcValueFactors (and exactIndex if needed) corresponding to x\&. 
.PP
Reimplemented from \fBBasisPolynomial\fP\&.
.PP
References LagrangeInterpPolynomial::allocate_factors(), LagrangeInterpPolynomial::bcGradFactors, LagrangeInterpPolynomial::bcValueFactors, LagrangeInterpPolynomial::bcValueFactorSum, LagrangeInterpPolynomial::bcWeights, LagrangeInterpPolynomial::diffProduct, LagrangeInterpPolynomial::exactDeltaIndex, LagrangeInterpPolynomial::exactIndex, LagrangeInterpPolynomial::init_new_point(), InterpolationPolynomial::interpPts, and LagrangeInterpPolynomial::newPoint\&.
.SS "void set_new_point (Real x, short request_order, const UShortArray & delta_key)\fC [virtual]\fP"
Define the bcValueFactors (and exactIndex if needed) corresponding to x\&. 
.PP
Reimplemented from \fBBasisPolynomial\fP\&.
.PP
References LagrangeInterpPolynomial::allocate_factors(), LagrangeInterpPolynomial::bcGradFactors, LagrangeInterpPolynomial::bcValueFactors, LagrangeInterpPolynomial::bcValueFactorSum, LagrangeInterpPolynomial::bcWeights, LagrangeInterpPolynomial::diffProduct, LagrangeInterpPolynomial::exactDeltaIndex, LagrangeInterpPolynomial::exactIndex, LagrangeInterpPolynomial::init_new_point(), InterpolationPolynomial::interpPts, and LagrangeInterpPolynomial::newPoint\&.
.SS "void precompute_data ()\fC [protected]\fP, \fC [virtual]\fP"
Pre-compute denominator products that are only a function of the interpolation points\&. 
.PP
Reimplemented from \fBInterpolationPolynomial\fP\&.
.PP
References LagrangeInterpPolynomial::bcWeights, LagrangeInterpPolynomial::init_new_point(), and InterpolationPolynomial::interpPts\&.
.SS "void init_new_point (Real x, short request_order, short & compute_order)\fC [private]\fP"

.PP
define compute order from request order and newPoint match Shared initialization code\&. 
.PP
References LagrangeInterpPolynomial::exactDeltaIndex, LagrangeInterpPolynomial::exactIndex, LagrangeInterpPolynomial::newPoint, and LagrangeInterpPolynomial::newPtOrder\&.
.PP
Referenced by LagrangeInterpPolynomial::precompute_data(), and LagrangeInterpPolynomial::set_new_point()\&.
.SS "void allocate_factors (short compute_order)\fC [inline]\fP, \fC [private]\fP"

.PP
based on compute order, size barycentric value/gradient factors Shared initialization code\&. 
.PP
References LagrangeInterpPolynomial::bcGradFactors, LagrangeInterpPolynomial::bcValueFactors, LagrangeInterpPolynomial::bcWeights, and InterpolationPolynomial::interpPts\&.
.PP
Referenced by LagrangeInterpPolynomial::set_new_point()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for PECOS from the source code\&.
