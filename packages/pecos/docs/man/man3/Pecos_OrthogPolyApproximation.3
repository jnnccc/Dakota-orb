.TH "OrthogPolyApproximation" 3 "Wed Dec 27 2017" "Version Version 1.0" "PECOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
OrthogPolyApproximation \- Derived approximation class for orthogonal polynomials (global approximation)\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBPolynomialApproximation\fP\&.
.PP
Inherited by \fBProjectOrthogPolyApproximation\fP, and \fBRegressOrthogPolyApproximation\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBOrthogPolyApproximation\fP (const \fBSharedBasisApproxData\fP &shared_data)"
.br
.RI "\fIdefault constructor \fP"
.ti -1c
.RI "\fB~OrthogPolyApproximation\fP ()"
.br
.RI "\fIdestructor \fP"
.ti -1c
.RI "virtual size_t \fBexpansion_terms\fP () const "
.br
.RI "\fIretrieve number of terms in the orthogonal polynomial expansion \fP"
.ti -1c
.RI "virtual const RealVector & \fBdimension_decay_rates\fP ()"
.br
.RI "\fIestimate chaos expansion coefficient decay rates for each random variable dimension using linear least squares in semilog space \fP"
.ti -1c
.RI "void \fBbasis_matrix\fP (const RealMatrix &x, RealMatrix &basis_values)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static void \fBbasis_value\fP (const RealVector &x, std::vector< \fBBasisPolynomial\fP > &polynomial_basis, const UShort2DArray &multi_index, RealVector &basis_values)"
.br
.RI "\fIevaluate all pce basis functions at a single point \fP"
.ti -1c
.RI "static void \fBbasis_matrix\fP (const RealMatrix &x, std::vector< \fBBasisPolynomial\fP > &polynomial_basis, const UShort2DArray &multi_index, RealMatrix &basis_values)"
.br
.RI "\fIevaluate all pce basis functions at a set of points \fP"
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "int \fBmin_coefficients\fP () const "
.br
.RI "\fIreturn the minimum number of samples (unknowns) required to build the derived class approximation type in numVars dimensions \fP"
.ti -1c
.RI "void \fBstore_coefficients\fP (size_t index=_NPOS)"
.br
.RI "\fIstore the current coefficients for later combination \fP"
.ti -1c
.RI "void \fBrestore_coefficients\fP (size_t index=_NPOS)"
.br
.RI "\fIrestore a previously stored coefficient state \fP"
.ti -1c
.RI "void \fBswap_coefficients\fP (size_t maximal_index)"
.br
.RI "\fIswap the current coefficients with a previously stored set \fP"
.ti -1c
.RI "void \fBremove_stored_coefficients\fP (size_t index=_NPOS)"
.br
.RI "\fIremove a redundant stored entry prior to combine_coefficients (default is pop_back) \fP"
.ti -1c
.RI "void \fBclear_stored\fP ()"
.br
.RI "\fIclear stored approximation data \fP"
.ti -1c
.RI "void \fBcombine_coefficients\fP (size_t swap_index)"
.br
.RI "\fIcombine the current coefficients with a previously stored set \fP"
.ti -1c
.RI "void \fBprint_coefficients\fP (std::ostream &s, bool normalized)"
.br
.RI "\fIprint the coefficient array computed in \fBcompute_coefficients()\fP \fP"
.ti -1c
.RI "RealVector \fBapproximation_coefficients\fP (bool normalized) const "
.br
.RI "\fIretrieve or form a set of dense coefficients that correspond to \fBSharedOrthogPolyApproxData::multiIndex\fP \fP"
.ti -1c
.RI "void \fBapproximation_coefficients\fP (const RealVector &approx_coeffs, bool normalized)"
.br
.RI "\fIset an array of dense coefficients corresponding to \fBSharedOrthogPolyApproxData::multiIndex\fP \fP"
.ti -1c
.RI "void \fBcoefficient_labels\fP (std::vector< std::string > &all_coeff_tags) const "
.br
.RI "\fIretrieve a vector of coefficient label strings, one per expansion term \fP"
.ti -1c
.RI "void \fBallocate_arrays\fP ()"
.br
.RI "\fIinitialize multiIndex, expansionCoeffs, et al\&. \fP"
.ti -1c
.RI "void \fBcompute_component_sobol\fP ()"
.br
.RI "\fIPerforms global sensitivity analysis via variance-based decomposition; computes component (main and interaction) Sobol' indices\&. \fP"
.ti -1c
.RI "void \fBcompute_total_sobol\fP ()"
.br
.RI "\fIPerforms global sensitivity analysis via variance-based decomposition; computes total Sobol' indices\&. \fP"
.ti -1c
.RI "Real \fBvalue\fP (const RealVector &x)"
.br
.RI "\fIretrieve the approximate function value for a given parameter vector \fP"
.ti -1c
.RI "const RealVector & \fBgradient_basis_variables\fP (const RealVector &x)"
.br
.RI "\fIretrieve the gradient for a response expansion with respect to all variables included in the polynomial bases using the given parameter vector and default DVV \fP"
.ti -1c
.RI "const RealVector & \fBgradient_basis_variables\fP (const RealVector &x, const SizetArray &dvv)"
.br
.RI "\fIretrieve the gradient for a response expansion with respect to variables included in the polynomial basis for a given parameter vector and a given DVV subset \fP"
.ti -1c
.RI "const RealVector & \fBgradient_nonbasis_variables\fP (const RealVector &x)"
.br
.RI "\fIretrieve the gradient for a response expansion with respect to all variables not included in the polynomial bases (nonprobabilistic variables such as design or epistemic when not in 'all' mode) using the given parameter vector and default DVV \fP"
.ti -1c
.RI "const RealSymMatrix & \fBhessian_basis_variables\fP (const RealVector &x)"
.br
.RI "\fIretrieve the Hessian of the response expansion with respect to all variables included in the polynomial basis (e\&.g\&., probabilistic variables) for a given parameter vector \fP"
.ti -1c
.RI "Real \fBstored_value\fP (const RealVector &x, size_t index)"
.br
.RI "\fIretrieve the response value for a stored expansion using the given parameter vector \fP"
.ti -1c
.RI "const RealVector & \fBstored_gradient_basis_variables\fP (const RealVector &x, size_t index)"
.br
.RI "\fIretrieve the response gradient for a stored expansion with respect to all variables included in the polynomial bases; evaluate for the given parameter vector\&. \fP"
.ti -1c
.RI "const RealVector & \fBstored_gradient_nonbasis_variables\fP (const RealVector &x, size_t index)"
.br
.RI "\fIretrieve the response gradient for a stored expansion with respect to all variables not included in the polynomial bases; evaluate for the given parameter vector\&. \fP"
.ti -1c
.RI "Real \fBmean\fP ()"
.br
.ti -1c
.RI "Real \fBmean\fP (const RealVector &x)"
.br
.ti -1c
.RI "const RealVector & \fBmean_gradient\fP ()"
.br
.ti -1c
.RI "const RealVector & \fBmean_gradient\fP (const RealVector &x, const SizetArray &dvv)"
.br
.ti -1c
.RI "Real \fBvariance\fP ()"
.br
.ti -1c
.RI "Real \fBvariance\fP (const RealVector &x)"
.br
.ti -1c
.RI "const RealVector & \fBvariance_gradient\fP ()"
.br
.ti -1c
.RI "const RealVector & \fBvariance_gradient\fP (const RealVector &x, const SizetArray &dvv)"
.br
.ti -1c
.RI "Real \fBcovariance\fP (\fBPolynomialApproximation\fP *poly_approx_2)"
.br
.RI "\fIreturn the covariance between two response expansions, treating all variables as random \fP"
.ti -1c
.RI "Real \fBcovariance\fP (const RealVector &x, \fBPolynomialApproximation\fP *poly_approx_2)"
.br
.RI "\fIreturn the covariance between two response expansions for a given parameter vector, treating a subset of the variables as random \fP"
.ti -1c
.RI "void \fBcompute_moments\fP (bool full_stats=true)"
.br
.RI "\fIcompute expansion moments to order 2 \fP"
.ti -1c
.RI "void \fBcompute_moments\fP (const RealVector &x, bool full_stats=true)"
.br
.RI "\fIcompute expansion moments in all-variables mode to order 2 \fP"
.ti -1c
.RI "void \fBsize_expansion\fP ()"
.br
.RI "\fIsize expansion{Coeffs,CoeffGrads} based on multiIndex \fP"
.ti -1c
.RI "void \fBsize_expansion\fP (size_t num_exp_terms)"
.br
.RI "\fIsize expansion{Coeffs,CoeffGrads} based on multiIndex \fP"
.ti -1c
.RI "void \fBresize_expansion\fP ()"
.br
.RI "\fIsynchronize expansion{Coeffs,CoeffGrads} with an updated multiIndex \fP"
.ti -1c
.RI "void \fBresize_expansion\fP (size_t num_exp_terms)"
.br
.RI "\fIsynchronize expansion{Coeffs,CoeffGrads} with an updated multiIndex \fP"
.ti -1c
.RI "void \fBoverlay_expansion\fP (const SizetArray &multi_index_map, const RealVector &exp_coeffs, const RealMatrix &exp_grads, int coeff)"
.br
.RI "\fIoverlay the passed expansion with the aggregate expansion{Coeffs,CoeffGrads} as managed by the multi_index_map \fP"
.ti -1c
.RI "void \fBmultiply_expansion\fP (const UShort2DArray &multi_index_b, const RealVector &exp_coeffs_b, const RealMatrix &exp_grads_b, const UShort2DArray &multi_index_c)"
.br
.RI "\fImultiply current expansion ('a') with incoming expansion ('b') and store in product expansion ('c') \fP"
.ti -1c
.RI "void \fBfail_booleans\fP (SizetShortMap::const_iterator &fit, size_t j, bool &add_val, bool &add_grad)"
.br
.RI "\fIupdate add_val and add_gradient based on surrData's failure map \fP"
.ti -1c
.RI "void \fBintegration_checks\fP ()"
.br
.RI "\fIperform sanity checks prior to numerical integration \fP"
.ti -1c
.RI "void \fBsolve_decay_rates\fP (RealVectorArray &A_vectors, RealVectorArray &b_vectors, UShortArray &max_orders)"
.br
.RI "\fIutility function for solving the least squares estimation of decay rates \fP"
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "RealVector \fBexpansionCoeffs\fP"
.br
.RI "\fIthe coefficients of the expansion \fP"
.ti -1c
.RI "RealMatrix \fBexpansionCoeffGrads\fP"
.br
.RI "\fIthe gradients of the expansion coefficients \fP"
.ti -1c
.RI "RealVectorArray \fBstoredExpCoeffs\fP"
.br
.RI "\fIcopies of expansionCoeffs stored in \fBstore_coefficients()\fP for use in \fBcombine_coefficients()\fP \fP"
.ti -1c
.RI "RealMatrixArray \fBstoredExpCoeffGrads\fP"
.br
.RI "\fIcopies of expansionCoeffGrads stored in \fBstore_coefficients()\fP for use in \fBcombine_coefficients()\fP \fP"
.ti -1c
.RI "RealVector \fBdecayRates\fP"
.br
.RI "\fIspectral coefficient decay rates estimated by LLS on log of univariate expansion coefficients \fP"
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBnormalize\fP (const RealVector &std_coeffs, RealVector &normalized_coeffs) const "
.br
.ti -1c
.RI "void \fBdenormalize\fP (const RealVector &normalized_coeffs, RealVector &std_coeffs) const "
.br
.in -1c
.SH "Detailed Description"
.PP 
Derived approximation class for orthogonal polynomials (global approximation)\&. 

The \fBOrthogPolyApproximation\fP class provides a global approximation based on orthogonal polynomials\&. It is used primarily for polynomial chaos expansions (for stochastic finite element approaches to uncertainty quantification)\&. 
.SH "Member Function Documentation"
.PP 
.SS "size_t expansion_terms () const\fC [inline]\fP, \fC [virtual]\fP"

.PP
retrieve number of terms in the orthogonal polynomial expansion default implementation if no sparsity (overridden in \fBRegressOrthogPolyApproximation\fP for CS) 
.PP
Reimplemented in \fBRegressOrthogPolyApproximation\fP\&.
.PP
References SharedOrthogPolyApproxData::multiIndex, and BasisApproximation::sharedDataRep\&.
.PP
Referenced by RegressOrthogPolyApproximation::expansion_terms(), OrthogPolyApproximation::resize_expansion(), and OrthogPolyApproximation::size_expansion()\&.
.SS "Real mean ()\fC [protected]\fP, \fC [virtual]\fP"
In this case, all expansion variables are random variables and the mean of the expansion is simply the first chaos coefficient\&. 
.PP
Implements \fBPolynomialApproximation\fP\&.
.PP
References PolynomialApproximation::computedMean, PolynomialApproximation::expansionCoeffFlag, OrthogPolyApproximation::expansionCoeffs, PolynomialApproximation::expansionMoments, SharedPolyApproxData::nonRandomIndices, and BasisApproximation::sharedDataRep\&.
.PP
Referenced by ProjectOrthogPolyApproximation::compute_moments(), OrthogPolyApproximation::compute_moments(), ProjectOrthogPolyApproximation::expectation(), RegressOrthogPolyApproximation::mean(), and OrthogPolyApproximation::mean()\&.
.SS "Real mean (const RealVector & x)\fC [protected]\fP, \fC [virtual]\fP"
In this case, a subset of the expansion variables are random variables and the mean of the expansion involves evaluating the expectation over this subset\&. 
.PP
Implements \fBPolynomialApproximation\fP\&.
.PP
Reimplemented in \fBRegressOrthogPolyApproximation\fP\&.
.PP
References PolynomialApproximation::computedMean, PolynomialApproximation::expansionCoeffFlag, OrthogPolyApproximation::expansionCoeffs, PolynomialApproximation::expansionMoments, SharedPolyApproxData::match_nonrandom_vars(), OrthogPolyApproximation::mean(), SharedOrthogPolyApproxData::multiIndex, SharedOrthogPolyApproxData::multivariate_polynomial(), SharedPolyApproxData::nonRandomIndices, BasisApproximation::sharedDataRep, PolynomialApproximation::xPrevMean, and SharedOrthogPolyApproxData::zero_random()\&.
.SS "const RealVector & mean_gradient ()\fC [protected]\fP, \fC [virtual]\fP"
In this function, all expansion variables are random variables and any design/state variables are omitted from the expansion\&. In this case, the derivative of the expectation is the expectation of the derivative\&. The mixed derivative case (some design variables are inserted and some are augmented) requires no special treatment\&. 
.PP
Implements \fBPolynomialApproximation\fP\&.
.PP
References PolynomialApproximation::computedMean, PolynomialApproximation::expansionCoeffGradFlag, OrthogPolyApproximation::expansionCoeffGrads, PolynomialApproximation::meanGradient, SharedPolyApproxData::nonRandomIndices, and BasisApproximation::sharedDataRep\&.
.PP
Referenced by RegressOrthogPolyApproximation::mean(), and RegressOrthogPolyApproximation::mean_gradient()\&.
.SS "const RealVector & mean_gradient (const RealVector & x, const SizetArray & dvv)\fC [protected]\fP, \fC [virtual]\fP"
In this function, a subset of the expansion variables are random variables and any augmented design/state variables (i\&.e\&., not inserted as random variable distribution parameters) are included in the expansion\&. In this case, the mean of the expansion is the expectation over the random subset and the derivative of the mean is the derivative of the remaining expansion over the non-random subset\&. This function must handle the mixed case, where some design/state variables are augmented (and are part of the expansion: derivatives are evaluated as described above) and some are inserted (derivatives are obtained from expansionCoeffGrads)\&. 
.PP
Implements \fBPolynomialApproximation\fP\&.
.PP
Reimplemented in \fBRegressOrthogPolyApproximation\fP\&.
.PP
References PolynomialApproximation::computedMean, OrthogPolyApproximation::covariance(), PolynomialApproximation::expansionCoeffFlag, PolynomialApproximation::expansionCoeffGradFlag, OrthogPolyApproximation::expansionCoeffGrads, OrthogPolyApproximation::expansionCoeffs, SharedPolyApproxData::match_nonrandom_vars(), PolynomialApproximation::meanGradient, SharedOrthogPolyApproxData::multiIndex, SharedOrthogPolyApproxData::multivariate_polynomial(), SharedOrthogPolyApproxData::multivariate_polynomial_gradient(), SharedPolyApproxData::nonRandomIndices, SharedPolyApproxData::randomVarsKey, BasisApproximation::sharedDataRep, PolynomialApproximation::xPrevMeanGrad, and SharedOrthogPolyApproxData::zero_random()\&.
.SS "Real variance ()\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP"
In this case, all expansion variables are random variables and the variance of the expansion is the sum over all but the first term of the coefficients squared times the polynomial norms squared\&. 
.PP
Implements \fBPolynomialApproximation\fP\&.
.PP
References OrthogPolyApproximation::covariance()\&.
.PP
Referenced by ProjectOrthogPolyApproximation::compute_moments(), and OrthogPolyApproximation::compute_moments()\&.
.SS "Real variance (const RealVector & x)\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP"
In this case, a subset of the expansion variables are random variables and the variance of the expansion involves summations over this subset\&. 
.PP
Implements \fBPolynomialApproximation\fP\&.
.PP
References OrthogPolyApproximation::approximation_coefficients(), OrthogPolyApproximation::covariance(), SharedOrthogPolyApproxData::multiIndex, SharedOrthogPolyApproxData::norm_squared(), and BasisApproximation::sharedDataRep\&.
.SS "const RealVector & variance_gradient ()\fC [protected]\fP, \fC [virtual]\fP"
In this function, all expansion variables are random variables and any design/state variables are omitted from the expansion\&. The mixed derivative case (some design variables are inserted and some are augmented) requires no special treatment\&. 
.PP
Implements \fBPolynomialApproximation\fP\&.
.PP
Reimplemented in \fBRegressOrthogPolyApproximation\fP\&.
.PP
References PolynomialApproximation::computedVariance, PolynomialApproximation::expansionCoeffFlag, PolynomialApproximation::expansionCoeffGradFlag, OrthogPolyApproximation::expansionCoeffGrads, OrthogPolyApproximation::expansionCoeffs, SharedOrthogPolyApproxData::multiIndex, SharedPolyApproxData::nonRandomIndices, SharedOrthogPolyApproxData::norm_squared(), BasisApproximation::sharedDataRep, and PolynomialApproximation::varianceGradient\&.
.PP
Referenced by RegressOrthogPolyApproximation::variance_gradient()\&.
.SS "const RealVector & variance_gradient (const RealVector & x, const SizetArray & dvv)\fC [protected]\fP, \fC [virtual]\fP"
In this function, a subset of the expansion variables are random variables and any augmented design/state variables (i\&.e\&., not inserted as random variable distribution parameters) are included in the expansion\&. This function must handle the mixed case, where some design/state variables are augmented (and are part of the expansion) and some are inserted (derivatives are obtained from expansionCoeffGrads)\&. 
.PP
Implements \fBPolynomialApproximation\fP\&.
.PP
Reimplemented in \fBRegressOrthogPolyApproximation\fP\&.
.PP
References PolynomialApproximation::computedVariance, PolynomialApproximation::expansionCoeffFlag, PolynomialApproximation::expansionCoeffGradFlag, OrthogPolyApproximation::expansionCoeffGrads, OrthogPolyApproximation::expansionCoeffs, SharedPolyApproxData::match_nonrandom_vars(), SharedPolyApproxData::match_random_key(), SharedOrthogPolyApproxData::multiIndex, SharedOrthogPolyApproxData::multivariate_polynomial(), SharedOrthogPolyApproxData::multivariate_polynomial_gradient(), SharedPolyApproxData::nonRandomIndices, SharedOrthogPolyApproxData::norm_squared(), SharedPolyApproxData::randomIndices, SharedPolyApproxData::randomVarsKey, BasisApproximation::sharedDataRep, PolynomialApproximation::varianceGradient, PolynomialApproximation::xPrevVarGrad, and SharedOrthogPolyApproxData::zero_random()\&.
.SH "Member Data Documentation"
.PP 
.SS "RealMatrix expansionCoeffGrads\fC [protected]\fP"

.PP
the gradients of the expansion coefficients may be interpreted as either the gradients of the expansion coefficients or the coefficients of expansions for the response gradients\&. This array is used when sensitivities of moments are needed with respect to variables that do not appear in the expansion (e\&.g\&., with respect to design or epistemic variables for an expansion only over probabilistic variables)\&. 
.PP
Referenced by RegressOrthogPolyApproximation::adapt_regression(), ProjectOrthogPolyApproximation::append_tensor_expansions(), RegressOrthogPolyApproximation::compressed_sensing(), ProjectOrthogPolyApproximation::compute_coefficients(), ProjectOrthogPolyApproximation::decrement_coefficients(), ProjectOrthogPolyApproximation::expectation(), RegressOrthogPolyApproximation::gradient_nonbasis_variables(), OrthogPolyApproximation::gradient_nonbasis_variables(), RegressOrthogPolyApproximation::mean_gradient(), OrthogPolyApproximation::mean_gradient(), OrthogPolyApproximation::multiply_expansion(), RegressOrthogPolyApproximation::multiply_expansion(), OrthogPolyApproximation::overlay_expansion(), RegressOrthogPolyApproximation::overlay_expansion(), OrthogPolyApproximation::resize_expansion(), OrthogPolyApproximation::restore_coefficients(), OrthogPolyApproximation::size_expansion(), OrthogPolyApproximation::store_coefficients(), OrthogPolyApproximation::swap_coefficients(), RegressOrthogPolyApproximation::variance_gradient(), and OrthogPolyApproximation::variance_gradient()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for PECOS from the source code\&.
