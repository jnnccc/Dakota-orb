.TH "CubatureDriver" 3 "Wed Dec 27 2017" "Version Version 1.0" "PECOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CubatureDriver \- Generates N-dimensional cubature grids for numerical evaluation of expectation integrals over independent standard random variables\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBIntegrationDriver\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCubatureDriver\fP ()"
.br
.RI "\fIdefault constructor \fP"
.ti -1c
.RI "\fBCubatureDriver\fP (unsigned short \fBintegrand_order\fP)"
.br
.RI "\fIconstructor \fP"
.ti -1c
.RI "\fB~CubatureDriver\fP ()"
.br
.RI "\fIdestructor \fP"
.ti -1c
.RI "void \fBinitialize_grid\fP (const ShortArray &u_types, unsigned short order, unsigned short rule)"
.br
.RI "\fIinitialize cubature settings except for distribution params \fP"
.ti -1c
.RI "void \fBinitialize_grid\fP (const std::vector< \fBBasisPolynomial\fP > &poly_basis)"
.br
.RI "\fIinitialize all cubature settings (distribution params already set within poly_basis) \fP"
.ti -1c
.RI "void \fBinitialize_grid_parameters\fP (const ShortArray &u_types, const \fBAleatoryDistParams\fP &dp)"
.br
.RI "\fIinitialize settings for parameterized cubature rules \fP"
.ti -1c
.RI "void \fBintegrand_order\fP (unsigned short order)"
.br
.RI "\fIset integrandOrder \fP"
.ti -1c
.RI "unsigned short \fBintegrand_order\fP () const "
.br
.RI "\fIget integrandOrder \fP"
.ti -1c
.RI "const RealVector & \fBtype1_weight_sets\fP () const "
.br
.RI "\fIreturn type1WeightSets \fP"
.ti -1c
.RI "int \fBgrid_size\fP ()"
.br
.RI "\fInumber of collocation points with duplicates removed \fP"
.ti -1c
.RI "void \fBcompute_grid\fP (RealMatrix &variable_sets)"
.br
.RI "\fIcompute scaled variable and weight sets for the cubature grid \fP"
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "bool \fBverify_homogeneity\fP (const RealVector &params) const "
.br
.RI "\fIverify that all values within params are identical \fP"
.ti -1c
.RI "bool \fBverify_homogeneity\fP (const RealRealMapArray &params) const "
.br
.RI "\fIverify that all vectors within params are identical \fP"
.ti -1c
.RI "void \fBcollocation_rule\fP (unsigned short rule)"
.br
.RI "\fIsize collocRules and set first entry \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "unsigned short \fBintegrandOrder\fP"
.br
.RI "\fIintegrand order \fP"
.ti -1c
.RI "int \fBnumPts\fP"
.br
.RI "\fIthe current number of unique points in the grid \fP"
.ti -1c
.RI "bool \fBupdateGridSize\fP"
.br
.RI "\fIflag indicating when numPts needs to be recomputed due to an update to the cubature settings \fP"
.ti -1c
.RI "RealVector \fBtype1WeightSets\fP"
.br
.RI "\fIthe set of type1 weights (for integration of value interpolants) associated with each point in the {TPQ,SSG,Cub} grid \fP"
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Generates N-dimensional cubature grids for numerical evaluation of expectation integrals over independent standard random variables\&. 

Includes Stroud rules and extensions\&. This class is used by Dakota::NonDCubature, but could also be used for general numerical integration of moments\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for PECOS from the source code\&.
