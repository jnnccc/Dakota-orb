.TH "LHSDriver" 3 "Wed Dec 27 2017" "Version Version 1.0" "PECOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
LHSDriver \- Driver class for Latin Hypercube Sampling (LHS)  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBLHSDriver\fP ()"
.br
.RI "\fIdefault constructor \fP"
.ti -1c
.RI "\fBLHSDriver\fP (const String &sample_type, short sample_ranks_mode=IGNORE_RANKS, bool reports=true)"
.br
.RI "\fIconstructor \fP"
.ti -1c
.RI "\fB~LHSDriver\fP ()"
.br
.RI "\fIdestructor \fP"
.ti -1c
.RI "void \fBinitialize\fP (const String &sample_type, short sample_ranks_mode=IGNORE_RANKS, bool reports=true)"
.br
.RI "\fIpopulate data when not passed through ctor \fP"
.ti -1c
.RI "void \fBseed\fP (int seed)"
.br
.RI "\fIset randomSeed \fP"
.ti -1c
.RI "int \fBseed\fP () const "
.br
.RI "\fIreturn randomSeed \fP"
.ti -1c
.RI "void \fBrng\fP (String unif_gen)"
.br
.RI "\fIset random number generator, passing the name of the uniform generator: rnum2 or mt19937 (default)\&. Passed value is superceded by environment variable DAKOTA_LHS_UNIFGEN, if present \fP"
.ti -1c
.RI "void \fBadvance_seed_sequence\fP ()"
.br
.RI "\fIreseed using a deterministic sequence \fP"
.ti -1c
.RI "void \fBgenerate_samples\fP (const RealVector &cd_l_bnds, const RealVector &cd_u_bnds, const IntVector &ddr_l_bnds, const IntVector &ddr_u_bnds, const IntSetArray &ddsi_values, const StringSetArray &ddss_values, const RealSetArray &ddsr_values, const RealVector &cs_l_bnds, const RealVector &cs_u_bnds, const IntVector &dsr_l_bnds, const IntVector &dsr_u_bnds, const IntSetArray &dssi_values, const StringSetArray &dsss_values, const RealSetArray &dssr_values, const \fBAleatoryDistParams\fP &adp, const \fBEpistemicDistParams\fP &edp, int num_samples, RealMatrix &samples_array, RealMatrix &rank_array)"
.br
.RI "\fIgenerates the desired set of parameter samples from within general user-specified probabilistic distributions (\fBAleatoryDistParams\fP and \fBEpistemicDistParams\fP instances augmented with design and state variables) \fP"
.ti -1c
.RI "void \fBgenerate_samples\fP (const \fBAleatoryDistParams\fP &adp, const \fBEpistemicDistParams\fP &edp, int num_samples, RealMatrix &samples_array, bool backfill_flag=false)"
.br
.RI "\fIgenerates the desired set of parameter samples from within \fBAleatoryDistParams\fP and \fBEpistemicDistParams\fP specifications \fP"
.ti -1c
.RI "void \fBgenerate_samples\fP (const \fBAleatoryDistParams\fP &adp, int num_samples, RealMatrix &samples_array, bool backfill_flag=false)"
.br
.RI "\fIgenerates the desired set of parameter samples from within an \fBAleatoryDistParams\fP specification \fP"
.ti -1c
.RI "void \fBgenerate_samples\fP (const \fBEpistemicDistParams\fP &edp, int num_samples, RealMatrix &samples_array, bool backfill_flag=false)"
.br
.RI "\fIgenerates the desired set of parameter samples from within a \fBEpistemicDistParams\fP specification \fP"
.ti -1c
.RI "void \fBgenerate_normal_samples\fP (const RealVector &n_means, const RealVector &n_std_devs, const RealVector &n_l_bnds, const RealVector &n_u_bnds, int num_samples, RealSymMatrix &correl_matrix, RealMatrix &samples_array)"
.br
.RI "\fIgenerates the desired set of parameter samples from within uncorrelated normal distributions \fP"
.ti -1c
.RI "void \fBgenerate_uniform_samples\fP (const RealVector &u_l_bnds, const RealVector &u_u_bnds, int num_samples, RealMatrix &samples_array, bool backfill_flag=false)"
.br
.RI "\fIgenerates the desired set of parameter samples from within uncorrelated uniform distributions \fP"
.ti -1c
.RI "void \fBgenerate_uniform_index_samples\fP (const IntVector &index_l_bnds, const IntVector &index_u_bnds, int num_samples, IntMatrix &index_samples)"
.br
.RI "\fIgenerates integer index samples from within uncorrelated uniform distributions \fP"
.ti -1c
.RI "void \fBgenerate_unique_index_samples\fP (const IntVector &index_l_bnds, const IntVector &index_u_bnds, int num_samples, IntMatrix &sorted_samples)"
.br
.RI "\fIgenerates unique integer index samples from within uncorrelated uniform distributions (more expensive than non-unique case) \fP"
.ti -1c
.RI "void \fBgenerate_unique_samples\fP (const RealVector &cd_l_bnds, const RealVector &cd_u_bnds, const IntVector &ddri_l_bnds, const IntVector &ddri_u_bnds, const IntSetArray &ddsi_values, const StringSetArray &ddss_values, const RealSetArray &ddsr_values, const RealVector &cs_l_bnds, const RealVector &cs_u_bnds, const IntVector &dsri_l_bnds, const IntVector &dsri_u_bnds, const IntSetArray &dssi_values, const StringSetArray &dsss_values, const RealSetArray &dssr_values, const \fBAleatoryDistParams\fP &adp, const \fBEpistemicDistParams\fP &edp, int num_samples, RealMatrix &samples, RealMatrix &sample_ranks)"
.br
.RI "\fISimilar to generate_samples but this function ensures that all discrete samples are unique\&. \fP"
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBcheck_error\fP (int err_code, const char *err_source) const "
.br
.RI "\fIchecks the return codes from LHS routines and aborts if an error is returned \fP"
.in -1c
.SS "Static Private Member Functions"

.in +1c
.ti -1c
.RI "static void \fBabort_if_no_lhs\fP ()"
.br
.RI "\fIchecks whether LHS is enabled in the build and aborts if not \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "String \fBsampleType\fP"
.br
.RI "\fItype of sampling: random, lhs, incremental_lhs, or incremental_random \fP"
.ti -1c
.RI "int \fBrandomSeed\fP"
.br
.RI "\fIthe current random number seed \fP"
.ti -1c
.RI "short \fBsampleRanksMode\fP"
.br
.RI "\fImode of sample ranks I/O: IGNORE_RANKS, SET_RANKS, GET_RANKS, or SET_GET_RANKS \fP"
.ti -1c
.RI "bool \fBreportFlag\fP"
.br
.RI "\fIflag for generating LHS report output \fP"
.ti -1c
.RI "short \fBallowSeedAdvance\fP"
.br
.RI "\fIfor honoring \fBadvance_seed_sequence()\fP calls \fP"
.in -1c
.SH "Detailed Description"
.PP 
Driver class for Latin Hypercube Sampling (LHS) 

This class provides common code for sampling methods which employ the Latin Hypercube Sampling (LHS) package from Sandia Albuquerque's Risk and Reliability organization\&. 
.SH "Member Function Documentation"
.PP 
.SS "void advance_seed_sequence ()\fC [inline]\fP"

.PP
reseed using a deterministic sequence It would be preferable to call srand() only once and then call rand() for each LHS execution (the intended usage model), but possible interaction with other uses of rand() in other contexts is a concern\&. E\&.g\&., an srand(clock()) executed elsewhere would ruin the repeatability of the \fBLHSDriver\fP seed sequence\&. The only way to insure isolation is to reseed each time\&. Any induced correlation should be inconsequential for the intended use\&. 
.PP
References LHSDriver::allowSeedAdvance, LHSDriver::generate_samples(), LHSDriver::randomSeed, and LHSDriver::seed()\&.
.PP
Referenced by FourierInverseTransformation::compute_sample_grigoriu(), and FourierInverseTransformation::compute_sample_shinozuka_deodatis()\&.
.SS "void generate_samples (const RealVector & cd_l_bnds, const RealVector & cd_u_bnds, const IntVector & ddri_l_bnds, const IntVector & ddri_u_bnds, const IntSetArray & ddsi_values, const StringSetArray & ddss_values, const RealSetArray & ddsr_values, const RealVector & cs_l_bnds, const RealVector & cs_u_bnds, const IntVector & dsri_l_bnds, const IntVector & dsri_u_bnds, const IntSetArray & dssi_values, const StringSetArray & dsss_values, const RealSetArray & dssr_values, const \fBAleatoryDistParams\fP & adp, const \fBEpistemicDistParams\fP & edp, int num_samples, RealMatrix & samples, RealMatrix & sample_ranks)"

.PP
generates the desired set of parameter samples from within general user-specified probabilistic distributions (\fBAleatoryDistParams\fP and \fBEpistemicDistParams\fP instances augmented with design and state variables) While it would be desirable in some cases to carve this function into smaller parts and allow multiple invocations of LHS_RUN following a single initialization of types and arrays, the LHS code does not currently allow this: it will return an error if LHS_INIT/LHS_INIT_MEM, at least one distribution call (i\&.e\&., LHS_DIST, LHS_UDIST or LHS_SDIST), and LHS_PREP are not called prior to each invocation of LHS_RUN\&. Since LHS_INIT/LHS_INIT_MEM require input of a seed, the approach to computing multiple distinct sample sets must employ \fBadvance_seed_sequence()\fP to re-seed multiple \fBgenerate_samples()\fP calls, rather than continuing an existing random number sequence\&. 
.PP
References AleatoryDistParams::beta_alphas(), AleatoryDistParams::beta_betas(), AleatoryDistParams::beta_lower_bounds(), AleatoryDistParams::beta_upper_bounds(), AleatoryDistParams::binomial_num_trials(), AleatoryDistParams::binomial_probability_per_trial(), LHSDriver::check_error(), EpistemicDistParams::continuous_interval_basic_probabilities(), EpistemicDistParams::discrete_interval_basic_probabilities(), EpistemicDistParams::discrete_set_int_values_probabilities(), EpistemicDistParams::discrete_set_real_values_probabilities(), EpistemicDistParams::discrete_set_string_values_probabilities(), AleatoryDistParams::exponential_betas(), AleatoryDistParams::frechet_alphas(), AleatoryDistParams::frechet_betas(), AleatoryDistParams::gamma_alphas(), AleatoryDistParams::gamma_betas(), LHSDriver::generate_unique_samples(), AleatoryDistParams::geometric_probability_per_trial(), AleatoryDistParams::gumbel_alphas(), AleatoryDistParams::gumbel_betas(), AleatoryDistParams::histogram_bin_pairs(), AleatoryDistParams::histogram_point_int_pairs(), AleatoryDistParams::histogram_point_real_pairs(), AleatoryDistParams::histogram_point_string_pairs(), AleatoryDistParams::hypergeometric_num_drawn(), AleatoryDistParams::hypergeometric_selected_population(), AleatoryDistParams::hypergeometric_total_population(), AleatoryDistParams::lognormal_error_factors(), AleatoryDistParams::lognormal_lambdas(), AleatoryDistParams::lognormal_lower_bounds(), AleatoryDistParams::lognormal_means(), AleatoryDistParams::lognormal_std_deviations(), AleatoryDistParams::lognormal_upper_bounds(), AleatoryDistParams::lognormal_zetas(), AleatoryDistParams::loguniform_lower_bounds(), AleatoryDistParams::loguniform_upper_bounds(), AleatoryDistParams::negative_binomial_num_trials(), AleatoryDistParams::negative_binomial_probability_per_trial(), AleatoryDistParams::normal_lower_bounds(), AleatoryDistParams::normal_means(), AleatoryDistParams::normal_std_deviations(), AleatoryDistParams::normal_upper_bounds(), AleatoryDistParams::poisson_lambdas(), LHSDriver::randomSeed, LHSDriver::reportFlag, LHSDriver::sampleRanksMode, LHSDriver::sampleType, AleatoryDistParams::triangular_lower_bounds(), AleatoryDistParams::triangular_modes(), AleatoryDistParams::triangular_upper_bounds(), AleatoryDistParams::uncertain_correlations(), AleatoryDistParams::uniform_lower_bounds(), AleatoryDistParams::uniform_upper_bounds(), AleatoryDistParams::weibull_alphas(), and AleatoryDistParams::weibull_betas()\&.
.PP
Referenced by LHSDriver::abort_if_no_lhs(), LHSDriver::advance_seed_sequence(), LHSDriver::generate_normal_samples(), LHSDriver::generate_samples(), LHSDriver::generate_uniform_index_samples(), LHSDriver::generate_uniform_samples(), and LHSDriver::generate_unique_samples()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for PECOS from the source code\&.
