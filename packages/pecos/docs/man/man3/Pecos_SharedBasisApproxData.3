.TH "SharedBasisApproxData" 3 "Wed Dec 27 2017" "Version Version 1.0" "PECOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SharedBasisApproxData \- Base class for multivariate basis approximations used for projection of random variables through time or space\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherited by \fBSharedPolyApproxData\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSharedBasisApproxData\fP ()"
.br
.RI "\fIdefault constructor \fP"
.ti -1c
.RI "\fBSharedBasisApproxData\fP (short basis_type, const UShortArray &approx_order, size_t num_vars)"
.br
.RI "\fIstandard constructor for envelope \fP"
.ti -1c
.RI "\fBSharedBasisApproxData\fP (short basis_type, const UShortArray &approx_order, size_t num_vars, const \fBExpansionConfigOptions\fP &ec_options, const \fBBasisConfigOptions\fP &bc_options, const \fBRegressionConfigOptions\fP &rc_options)"
.br
.RI "\fIalternate constructor for envelope \fP"
.ti -1c
.RI "\fBSharedBasisApproxData\fP (const \fBSharedBasisApproxData\fP &shared_data)"
.br
.RI "\fIcopy constructor \fP"
.ti -1c
.RI "virtual \fB~SharedBasisApproxData\fP ()"
.br
.RI "\fIdestructor \fP"
.ti -1c
.RI "\fBSharedBasisApproxData\fP \fBoperator=\fP (const \fBSharedBasisApproxData\fP &shared_data)"
.br
.RI "\fIassignment operator \fP"
.ti -1c
.RI "void \fBassign_rep\fP (\fBSharedBasisApproxData\fP *\fBdata_rep\fP, bool ref_count_incr)"
.br
.RI "\fIassign letter or replace existing letter with a new one \fP"
.ti -1c
.RI "\fBSharedBasisApproxData\fP * \fBdata_rep\fP () const "
.br
.RI "\fIreturns dataRep for access to derived class member functions that are not mapped to the top Approximation level \fP"
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBSharedBasisApproxData\fP (\fBBaseConstructor\fP, short basis_type, size_t num_vars)"
.br
.RI "\fIconstructor initializes the base class part of letter classes (\fBBaseConstructor\fP overloading avoids infinite recursion in the derived class constructors - Coplien, p\&. 139) \fP"
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "short \fBbasisType\fP"
.br
.RI "\fItype of derived instance as well as sub-type for interpolation \fP"
.ti -1c
.RI "size_t \fBnumVars\fP"
.br
.RI "\fInumber of variables used in the approximation \fP"
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBSharedBasisApproxData\fP * \fBget_shared_data\fP (short basis_type, const UShortArray &approx_order, size_t num_vars)"
.br
.RI "\fIused by the standard envelope constructor to initialize dataRep to the appropriate derived type \fP"
.ti -1c
.RI "\fBSharedBasisApproxData\fP * \fBget_shared_data\fP (short basis_type, const UShortArray &approx_order, size_t num_vars, const \fBExpansionConfigOptions\fP &ec_options, const \fBBasisConfigOptions\fP &bc_options, const \fBRegressionConfigOptions\fP &rc_options)"
.br
.RI "\fIused by the alternate envelope constructor to initialize dataRep to the appropriate derived type \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBSharedBasisApproxData\fP * \fBdataRep\fP"
.br
.RI "\fIpointer to the letter (initialized only for the envelope) \fP"
.ti -1c
.RI "int \fBreferenceCount\fP"
.br
.RI "\fInumber of objects sharing dataRep \fP"
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBBasisApproximation\fP"
.br
.ti -1c
.RI "class \fBPolynomialApproximation\fP"
.br
.ti -1c
.RI "class \fBInterpPolyApproximation\fP"
.br
.ti -1c
.RI "class \fBNodalInterpPolyApproximation\fP"
.br
.ti -1c
.RI "class \fBHierarchInterpPolyApproximation\fP"
.br
.ti -1c
.RI "class \fBOrthogPolyApproximation\fP"
.br
.ti -1c
.RI "class \fBProjectOrthogPolyApproximation\fP"
.br
.ti -1c
.RI "class \fBRegressOrthogPolyApproximation\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Base class for multivariate basis approximations used for projection of random variables through time or space\&. 

The base class for basis approximations defined from Fourier functions, eigenfunctions, or polynomial functions\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBSharedBasisApproxData\fP ()"

.PP
default constructor The default constructor: dataRep is NULL in this case\&. This makes it necessary to check for NULL in the copy constructor, assignment operator, and destructor\&. 
.PP
Referenced by SharedBasisApproxData::get_shared_data()\&.
.SS "\fBSharedBasisApproxData\fP (short basis_type, const UShortArray & approx_order, size_t num_vars)"

.PP
standard constructor for envelope Envelope constructor only needs to extract enough data to properly execute get_shared_data, since SharedBasisApproxData(BaseConstructor) builds the actual base class data for the derived basis functions\&. 
.PP
References SharedBasisApproxData::dataRep, and SharedBasisApproxData::get_shared_data()\&.
.SS "\fBSharedBasisApproxData\fP (short basis_type, const UShortArray & approx_order, size_t num_vars, const \fBExpansionConfigOptions\fP & ec_options, const \fBBasisConfigOptions\fP & bc_options, const \fBRegressionConfigOptions\fP & rc_options)"

.PP
alternate constructor for envelope Envelope constructor only needs to extract enough data to properly execute get_shared_data, since SharedBasisApproxData(BaseConstructor) builds the actual base class data for the derived basis functions\&. 
.PP
References SharedBasisApproxData::dataRep, and SharedBasisApproxData::get_shared_data()\&.
.SS "\fBSharedBasisApproxData\fP (const \fBSharedBasisApproxData\fP & shared_data)"

.PP
copy constructor Copy constructor manages sharing of dataRep and incrementing of referenceCount\&. 
.PP
References SharedBasisApproxData::dataRep, SharedBasisApproxData::operator=(), and SharedBasisApproxData::referenceCount\&.
.SS "~\fBSharedBasisApproxData\fP ()\fC [virtual]\fP"

.PP
destructor Destructor decrements referenceCount and only deletes dataRep when referenceCount reaches zero\&. 
.PP
References SharedBasisApproxData::assign_rep(), SharedBasisApproxData::dataRep, and SharedBasisApproxData::referenceCount\&.
.SS "\fBSharedBasisApproxData\fP (\fBBaseConstructor\fP, short basis_type, size_t num_vars)\fC [protected]\fP"

.PP
constructor initializes the base class part of letter classes (\fBBaseConstructor\fP overloading avoids infinite recursion in the derived class constructors - Coplien, p\&. 139) This constructor is the one which must build the base class data for all derived classes\&. \fBget_shared_data()\fP instantiates a derived class letter and the derived constructor selects this base class constructor in its initialization list (to avoid recursion in the base class constructor calling \fBget_shared_data()\fP again)\&. Since the letter IS the representation, its rep pointer is set to NULL (an uninitialized pointer causes problems in ~SharedBasisApproxData)\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBSharedBasisApproxData\fP operator= (const \fBSharedBasisApproxData\fP & shared_data)"

.PP
assignment operator Assignment operator decrements referenceCount for old dataRep, assigns new dataRep, and increments referenceCount for new dataRep\&. 
.PP
References SharedBasisApproxData::dataRep, and SharedBasisApproxData::referenceCount\&.
.PP
Referenced by SharedBasisApproxData::SharedBasisApproxData()\&.
.SS "\fBSharedBasisApproxData\fP * get_shared_data (short basis_type, const UShortArray & approx_order, size_t num_vars)\fC [private]\fP"

.PP
used by the standard envelope constructor to initialize dataRep to the appropriate derived type Used only by the envelope constructor to initialize dataRep to the appropriate derived type\&. 
.PP
References SharedBasisApproxData::SharedBasisApproxData()\&.
.PP
Referenced by SharedBasisApproxData::SharedBasisApproxData()\&.
.SS "\fBSharedBasisApproxData\fP * get_shared_data (short basis_type, const UShortArray & approx_order, size_t num_vars, const \fBExpansionConfigOptions\fP & ec_options, const \fBBasisConfigOptions\fP & bc_options, const \fBRegressionConfigOptions\fP & rc_options)\fC [private]\fP"

.PP
used by the alternate envelope constructor to initialize dataRep to the appropriate derived type Used only by the envelope constructor to initialize dataRep to the appropriate derived type\&. 
.PP
References SharedBasisApproxData::SharedBasisApproxData()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for PECOS from the source code\&.
