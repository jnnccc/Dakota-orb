.TH "SharedHierarchInterpPolyApproxData" 3 "Wed Dec 27 2017" "Version Version 1.0" "PECOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SharedHierarchInterpPolyApproxData \- Derived approximation class for hierarchical interpolation polynomials (interpolating values and potentially gradients at collocation points)\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBSharedInterpPolyApproxData\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSharedHierarchInterpPolyApproxData\fP (short basis_type, size_t num_vars)"
.br
.RI "\fIlightweight constructor \fP"
.ti -1c
.RI "\fBSharedHierarchInterpPolyApproxData\fP (short basis_type, size_t num_vars, const \fBExpansionConfigOptions\fP &ec_options, const \fBBasisConfigOptions\fP &bc_options)"
.br
.RI "\fIfull constructor \fP"
.ti -1c
.RI "\fB~SharedHierarchInterpPolyApproxData\fP ()"
.br
.RI "\fIdestructor \fP"
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBallocate_component_sobol\fP ()"
.br
.RI "\fIallocate sobolIndexMap based on collocation keys \fP"
.ti -1c
.RI "void \fBincrement_component_sobol\fP ()"
.br
.RI "\fIupdate sobolIndexMap based on a refinement increment \fP"
.ti -1c
.RI "void \fBset_new_point\fP (const RealVector &x, const UShortArray &basis_index, short order)"
.br
.RI "\fIset point values within 1D basis polynomials for purposes of barycentric precomputation \fP"
.ti -1c
.RI "void \fBset_new_point\fP (const RealVector &x, const UShortArray &basis_index, const SizetList &subset_indices, short order)"
.br
.RI "\fIset point values within subset of 1D basis polynomials for purposes of barycentric precomputation \fP"
.ti -1c
.RI "size_t \fBbarycentric_exact_index\fP (const UShortArray &basis_index)"
.br
.RI "\fIfor an exact point match in all dimensions, return the tensor-product index of the matching point \fP"
.ti -1c
.RI "size_t \fBbarycentric_exact_index\fP (const UShortArray &basis_index, const SizetList &subset_indices)"
.br
.RI "\fIfor an exact point match in all dimensions within subset_indices, return the tensor-product index of the matching point \fP"
.ti -1c
.RI "unsigned short \fBtensor_product_num_key\fP (size_t i, unsigned short level_i)"
.br
.RI "\fIreturn the number of collocation keys for i^{th} variable and level_i index set \fP"
.ti -1c
.RI "unsigned short \fBtensor_product_max_key\fP (size_t i, unsigned short level_i)"
.br
.RI "\fIreturn the maximum collocation key value for i^{th} variable and level_i index set \fP"
.ti -1c
.RI "void \fBprecompute_keys\fP (const UShortArray &basis_index)"
.br
.RI "\fIif needed for efficiency, precompute the count and max values for the collocation keys \fP"
.ti -1c
.RI "void \fBprecompute_keys\fP (const UShortArray &basis_index, const SizetList &subset_indices)"
.br
.RI "\fIif needed for efficiency, precompute the count and max values for the collocation keys within the subset \fP"
.ti -1c
.RI "void \fBprecompute_max_keys\fP (const UShortArray &basis_index)"
.br
.RI "\fIif needed for efficiency, precompute the max values for the collocation keys \fP"
.ti -1c
.RI "void \fBprecompute_max_keys\fP (const UShortArray &basis_index, const SizetList &subset_indices)"
.br
.RI "\fIif needed for efficiency, precompute the max values for the collocation keys within the subset \fP"
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBHierarchSparseGridDriver\fP * \fBhsg_driver\fP ()"
.br
.RI "\fIreturn driverRep cast to requested derived type \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "short \fBpolyType\fP"
.br
.RI "\fIPecos:PIECEWISE_INTERP_POLYNOMIAL or Pecos:PIECEWISE_CUBIC_INTERP\&. \fP"
.ti -1c
.RI "UShortArray \fBtpNumKeys\fP"
.br
.RI "\fIused for precomputation of the number of hierarchical keys for a particular basis_index \fP"
.ti -1c
.RI "UShortArray \fBtpMaxKeys\fP"
.br
.RI "\fIused for precomputation of the maximum hierarchical key index for a particular basis_index \fP"
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBHierarchInterpPolyApproximation\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Derived approximation class for hierarchical interpolation polynomials (interpolating values and potentially gradients at collocation points)\&. 

The \fBSharedHierarchInterpPolyApproxData\fP class provides a polynomial approximation based on hierarchical interpolation\&. Both local and global hierarchical basis functions are available\&. It is used primarily for stochastic collocation approaches to uncertainty quantification\&. 
.SH "Member Function Documentation"
.PP 
.SS "unsigned short tensor_product_num_key (size_t i, unsigned short level_i)\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
return the number of collocation keys for i^{th} variable and level_i index set Default implementation; overridden by HierarchInterpPolyApproxData\&. 
.PP
Reimplemented from \fBSharedInterpPolyApproxData\fP\&.
.PP
References SharedHierarchInterpPolyApproxData::tensor_product_max_key(), and SharedHierarchInterpPolyApproxData::tpNumKeys\&.
.PP
Referenced by SharedHierarchInterpPolyApproxData::set_new_point()\&.
.SS "unsigned short tensor_product_max_key (size_t i, unsigned short level_i)\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
return the maximum collocation key value for i^{th} variable and level_i index set Default implementation; overridden by HierarchInterpPolyApproxData\&. 
.PP
Reimplemented from \fBSharedInterpPolyApproxData\fP\&.
.PP
References SharedHierarchInterpPolyApproxData::precompute_keys(), and SharedHierarchInterpPolyApproxData::tpMaxKeys\&.
.PP
Referenced by SharedHierarchInterpPolyApproxData::tensor_product_num_key()\&.
.SS "void precompute_keys (const UShortArray & basis_index)\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
if needed for efficiency, precompute the count and max values for the collocation keys Default implementation; overridden by HierarchInterpPolyApproxData\&. 
.PP
Reimplemented from \fBSharedInterpPolyApproxData\fP\&.
.PP
References SharedPolyApproxData::driverRep, SharedHierarchInterpPolyApproxData::hsg_driver(), SharedBasisApproxData::numVars, SharedHierarchInterpPolyApproxData::tpMaxKeys, and SharedHierarchInterpPolyApproxData::tpNumKeys\&.
.PP
Referenced by SharedHierarchInterpPolyApproxData::tensor_product_max_key()\&.
.SS "void precompute_keys (const UShortArray & basis_index, const SizetList & subset_indices)\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
if needed for efficiency, precompute the count and max values for the collocation keys within the subset Default implementation; overridden by HierarchInterpPolyApproxData\&. 
.PP
Reimplemented from \fBSharedInterpPolyApproxData\fP\&.
.PP
References SharedPolyApproxData::driverRep, SharedHierarchInterpPolyApproxData::hsg_driver(), SharedBasisApproxData::numVars, SharedHierarchInterpPolyApproxData::precompute_max_keys(), SharedHierarchInterpPolyApproxData::tpMaxKeys, and SharedHierarchInterpPolyApproxData::tpNumKeys\&.
.SS "void precompute_max_keys (const UShortArray & basis_index)\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
if needed for efficiency, precompute the max values for the collocation keys Default implementation; overridden by HierarchInterpPolyApproxData\&. 
.PP
Reimplemented from \fBSharedInterpPolyApproxData\fP\&.
.PP
References SharedPolyApproxData::driverRep, SharedHierarchInterpPolyApproxData::hsg_driver(), SharedBasisApproxData::numVars, and SharedHierarchInterpPolyApproxData::tpMaxKeys\&.
.PP
Referenced by SharedHierarchInterpPolyApproxData::precompute_keys()\&.
.SS "void precompute_max_keys (const UShortArray & basis_index, const SizetList & subset_indices)\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
if needed for efficiency, precompute the max values for the collocation keys within the subset Default implementation; overridden by HierarchInterpPolyApproxData\&. 
.PP
Reimplemented from \fBSharedInterpPolyApproxData\fP\&.
.PP
References SharedPolyApproxData::driverRep, SharedHierarchInterpPolyApproxData::hsg_driver(), SharedBasisApproxData::numVars, and SharedHierarchInterpPolyApproxData::tpMaxKeys\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for PECOS from the source code\&.
