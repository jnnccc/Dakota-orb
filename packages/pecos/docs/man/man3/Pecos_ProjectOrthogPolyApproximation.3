.TH "ProjectOrthogPolyApproximation" 3 "Wed Dec 27 2017" "Version Version 1.0" "PECOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ProjectOrthogPolyApproximation \- Derived approximation class for multivariate orthogonal polynomial approximation with coefficient estimation via numerical integration\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBOrthogPolyApproximation\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBProjectOrthogPolyApproximation\fP (const \fBSharedBasisApproxData\fP &shared_data)"
.br
.RI "\fIdefault constructor \fP"
.ti -1c
.RI "\fB~ProjectOrthogPolyApproximation\fP ()"
.br
.RI "\fIdestructor \fP"
.ti -1c
.RI "void \fBcompute_coefficients\fP (size_t index=_NPOS)"
.br
.RI "\fIcalculate the approximation coefficients using a set of surrogate data \fP"
.ti -1c
.RI "void \fBpush_coefficients\fP ()"
.br
.RI "\fIrestore the approximation coefficients to a previously incremented state as identified by the current data increment \fP"
.ti -1c
.RI "void \fBincrement_coefficients\fP (size_t index=_NPOS)"
.br
.RI "\fIrecalculate approximation coefficients following a surrogate data update \fP"
.ti -1c
.RI "void \fBdecrement_coefficients\fP (bool save_data)"
.br
.RI "\fIrestore the approximation coefficients to the state preceding the last increment \fP"
.ti -1c
.RI "void \fBfinalize_coefficients\fP ()"
.br
.RI "\fIfinalize the coefficients by applying all previously evaluated increments \fP"
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "int \fBmin_coefficients\fP () const "
.br
.RI "\fIreturn the minimum number of samples (unknowns) required to build the derived class approximation type in numVars dimensions \fP"
.ti -1c
.RI "void \fBallocate_arrays\fP ()"
.br
.RI "\fIinitialize polynomialBasis, multiIndex, et al\&. \fP"
.ti -1c
.RI "Real \fBvalue\fP (const RealVector &x)"
.br
.RI "\fIretrieve the approximate function value for a given parameter vector \fP"
.ti -1c
.RI "Real \fBstored_value\fP (const RealVector &x, size_t index)"
.br
.RI "\fIretrieve the response value for a stored expansion using the given parameter vector \fP"
.ti -1c
.RI "void \fBcompute_moments\fP (bool full_stats=true)"
.br
.RI "\fIcompute numerical moments to order 4 and expansion moments to order 2 \fP"
.ti -1c
.RI "void \fBcompute_moments\fP (const RealVector &x, bool full_stats=true)"
.br
.RI "\fIcompute expansion moments in all-variables mode to order 2 \fP"
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBsparse_grid_multi_index\fP (UShort2DArray &multi_index)"
.br
.RI "\fIinitialize multi_index using a sparse grid expansion \fP"
.ti -1c
.RI "void \fBintegration_data\fP (size_t tp_index, SDVArray &tp_data_vars, SDRArray &tp_data_resp, RealVector &tp_weights)"
.br
.RI "\fIextract tp_data_points from surrData and tp_weights from driverRep->type1CollocWts1D \fP"
.ti -1c
.RI "void \fBintegrate_expansion\fP (const UShort2DArray &multi_index, const SDVArray &data_vars, const SDRArray &data_resp, const RealVector &wt_sets, RealVector &exp_coeffs, RealMatrix &exp_coeff_grads)"
.br
.RI "\fIcomputes the chaosCoeffs via numerical integration (expCoeffsSolnApproach can be QUADRATURE, CUBATURE, or COMBINED_SPARSE_GRID) \fP"
.ti -1c
.RI "void \fBexpectation\fP ()"
.br
.RI "\fIcomputes the chaosCoeffs via averaging of samples (expCoeffsSolnApproach is SAMPLING) \fP"
.ti -1c
.RI "void \fBappend_tensor_expansions\fP (size_t start_index)"
.br
.RI "\fIupdate expansion{Coeffs,CoeffGrads} by adding one or more tensor-product expansions and updating all Smolyak coefficients \fP"
.ti -1c
.RI "void \fBintegrate_response_moments\fP (size_t num_moments)"
.br
.RI "\fIupdate numericalMoments using numerical integration applied directly to surrData \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "RealVector \fBprevExpCoeffs\fP"
.br
.RI "\fIprevious expansionCoeffs (aggregated total, not tensor-product contributions) prior to \fBappend_tensor_expansions()\fP \fP"
.ti -1c
.RI "RealMatrix \fBprevExpCoeffGrads\fP"
.br
.RI "\fIprevious expansionCoeffGrads (aggregated total, not tensor-product contributions) prior to \fBappend_tensor_expansions()\fP \fP"
.ti -1c
.RI "RealVectorArray \fBtpExpansionCoeffs\fP"
.br
.RI "\fIthe set of tensor-product contributions to expansionCoeffs \fP"
.ti -1c
.RI "RealMatrixArray \fBtpExpansionCoeffGrads\fP"
.br
.RI "\fIthe set of tensor-product contributions to expansionCoeffGrads \fP"
.ti -1c
.RI "std::deque< RealVector > \fBpoppedTPExpCoeffs\fP"
.br
.RI "\fIpopped instances of tpExpansionCoeffs that were computed but not selected \fP"
.ti -1c
.RI "std::deque< RealMatrix > \fBpoppedTPExpCoeffGrads\fP"
.br
.RI "\fIpopped tpExpansionCoeffGrads instances that were computed but not selected \fP"
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Derived approximation class for multivariate orthogonal polynomial approximation with coefficient estimation via numerical integration\&. 

The \fBProjectOrthogPolyApproximation\fP class provides a global approximation based on multivariate orthogonal polynomials, where the coefficients are computed using numerical integration approaches such as quadrature, cubature, sparse grids, and random sampling\&. It is used primarily for polynomial chaos expansion aproaches to UQ\&. 
.SH "Member Function Documentation"
.PP 
.SS "void integrate_expansion (const UShort2DArray & multi_index, const SDVArray & data_vars, const SDRArray & data_resp, const RealVector & wt_sets, RealVector & exp_coeffs, RealMatrix & exp_coeff_grads)\fC [private]\fP"

.PP
computes the chaosCoeffs via numerical integration (expCoeffsSolnApproach can be QUADRATURE, CUBATURE, or COMBINED_SPARSE_GRID) The coefficients of the PCE for the response are calculated using a spectral projection of the response against each multivariate orthogonal polynomial basis fn using the inner product ratio <f,Psi>/<Psi^2>, where inner product <a,b> is the n-dimensional integral of a*b*weighting over the support range of the n-dimensional (composite) weighting function\&. 1-D quadrature rules are defined for specific 1-D weighting functions and support ranges and approximate the integral of f*weighting as the Sum_i of w_i f_i\&. To extend this to n-dimensions, a tensor product quadrature rule, cubature, or Smolyak sparse grid rule is applied\&. It is not necessary to approximate the integral for the denominator numerically, since this is available analytically\&. 
.PP
References PolynomialApproximation::expansionCoeffFlag, PolynomialApproximation::expansionCoeffGradFlag, SharedOrthogPolyApproxData::multivariate_polynomial(), SharedOrthogPolyApproxData::norm_squared(), and BasisApproximation::sharedDataRep\&.
.PP
Referenced by ProjectOrthogPolyApproximation::compute_coefficients(), ProjectOrthogPolyApproximation::increment_coefficients(), and ProjectOrthogPolyApproximation::integration_data()\&.
.SS "void expectation ()\fC [private]\fP"

.PP
computes the chaosCoeffs via averaging of samples (expCoeffsSolnApproach is SAMPLING) The coefficients of the PCE for the response are calculated using a spectral projection of the response against each multivariate orthogonal polynomial basis fn using the inner product ratio <f,Psi>/<Psi^2>, where inner product <a,b> is the n-dimensional integral of a*b*weighting over the support range of the n-dimensional (composite) weighting function\&. When interpreting the weighting function as a probability density function, <a,b> = expected value of a*b, which can be evaluated by sampling from the probability density function and computing the mean statistic\&. It is not necessary to compute the mean statistic for the denominator, since this is available analytically\&. 
.PP
References PolynomialApproximation::expansionCoeffFlag, PolynomialApproximation::expansionCoeffGradFlag, OrthogPolyApproximation::expansionCoeffGrads, OrthogPolyApproximation::expansionCoeffs, OrthogPolyApproximation::fail_booleans(), ProjectOrthogPolyApproximation::integrate_response_moments(), OrthogPolyApproximation::mean(), SharedOrthogPolyApproxData::multiIndex, SharedOrthogPolyApproxData::multivariate_polynomial(), SharedOrthogPolyApproxData::norm_squared(), BasisApproximation::sharedDataRep, and PolynomialApproximation::surrData\&.
.PP
Referenced by ProjectOrthogPolyApproximation::compute_coefficients()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for PECOS from the source code\&.
